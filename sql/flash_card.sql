-- MySQL dump 10.13  Distrib 5.7.30, for macos10.14 (x86_64)
--
-- Host: localhost    Database: flash_card
-- ------------------------------------------------------
-- Server version	5.7.30

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `box`
--

DROP TABLE IF EXISTS `box`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(10) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(10) COLLATE utf8mb4_unicode_ci NOT NULL,
  `color` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `clone_times` int(11) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `is_share` tinyint(1) NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `summary` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `ix_box_create_time` (`create_time`),
  CONSTRAINT `box_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=102 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box`
--

LOCK TABLES `box` WRITE;
/*!40000 ALTER TABLE `box` DISABLE KEYS */;
INSERT INTO `box` VALUES (1,'LeetCode','刷刷刷~','red',0,0,1,'2020-08-12 11:40:37',1,'来源：力扣（LeetCode）\r\n\r\n链接：https://leetcode-cn.com/problemset/all/\r\n\r\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明'),(2,'剑指 Offer','刷刷刷！！！','blue',0,0,1,'2020-08-12 13:08:43',1,'来源：力扣（LeetCode）\r\n\r\n链接：https://leetcode-cn.com/problemset/lcof/\r\n\r\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。'),(8,'数据库','面经','green',0,0,1,'2020-08-13 02:08:55',1,'计算机基础（计算机网络/操作系统/数据库/Git...）面试问题全面总结，包含详细的follow-up question以及答案；全部采用【问题+追问+答案】的形式，即拿即用，直击互联网大厂面试?；可用于模拟面试、面试前复习、短期内快速备战面试...\r\n\r\n\r\n\r\n**来源**：\r\n\r\n此卡集所有知识点来自开源项目[Waking-Up](https://github.com/wolverinn/Waking-Up)\r\n\r\nGitHub链接：https://github.com/wolverinn/Waking-Up\r\n\r\n版权归项目作者wolverinn所有。\r\n\r\n\r\n\r\n'),(10,'Python','刷呀呀呀','olive',0,0,1,'2020-08-14 11:55:59',1,'计算机基础（计算机网络/操作系统/数据库/Git...）面试问题全面总结，包含详细的follow-up question以及答案；全部采用【问题+追问+答案】的形式，即拿即用，直击互联网大厂面试?；可用于模拟面试、面试前复习、短期内快速备战面试...\r\n\r\n\r\n\r\n**来源**：\r\n\r\n此卡集所有知识点来自开源项目[Waking-Up](https://github.com/wolverinn/Waking-Up)\r\n\r\nGitHub链接：https://github.com/wolverinn/Waking-Up\r\n\r\n版权归项目作者wolverinn所有。\r\n\r\n\r\n\r\n'),(11,'操作系统','刷呀呀','yellow',0,0,1,'2020-08-14 12:00:16',1,'计算机基础（计算机网络/操作系统/数据库/Git...）面试问题全面总结，包含详细的follow-up question以及答案；全部采用【问题+追问+答案】的形式，即拿即用，直击互联网大厂面试?；可用于模拟面试、面试前复习、短期内快速备战面试...\r\n\r\n\r\n\r\n**来源**：\r\n\r\n此卡集所有知识点来自开源项目[Waking-Up](https://github.com/wolverinn/Waking-Up)\r\n\r\nGitHub链接：https://github.com/wolverinn/Waking-Up\r\n\r\n版权归项目作者wolverinn所有。\r\n\r\n\r\n\r\n'),(12,'计网知识点','刷呀','orange',0,0,1,'2020-08-14 12:21:45',1,'计算机基础（计算机网络/操作系统/数据库/Git...）面试问题全面总结，包含详细的follow-up question以及答案；全部采用【问题+追问+答案】的形式，即拿即用，直击互联网大厂面试?；可用于模拟面试、面试前复习、短期内快速备战面试...\r\n\r\n\r\n\r\n**来源**：\r\n\r\n此卡集所有知识点来自开源项目[Waking-Up](https://github.com/wolverinn/Waking-Up)\r\n\r\nGitHub链接：https://github.com/wolverinn/Waking-Up\r\n\r\n版权归项目作者wolverinn所有。\r\n\r\n\r\n\r\n');
/*!40000 ALTER TABLE `box` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `box_with_card`
--

DROP TABLE IF EXISTS `box_with_card`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_with_card` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `box_id` int(11) DEFAULT NULL,
  `card_id` int(11) DEFAULT NULL,
  `is_active` tinyint(1) DEFAULT NULL,
  `error_times` int(11) NOT NULL,
  `understand` tinyint(1) NOT NULL,
  `collection` tinyint(1) NOT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `box_id` (`box_id`),
  KEY `card_id` (`card_id`),
  KEY `ix_box_with_card_collection` (`collection`),
  KEY `ix_box_with_card_create_time` (`create_time`),
  KEY `ix_box_with_card_understand` (`understand`),
  CONSTRAINT `box_with_card_ibfk_1` FOREIGN KEY (`box_id`) REFERENCES `box` (`id`) ON DELETE CASCADE,
  CONSTRAINT `box_with_card_ibfk_2` FOREIGN KEY (`card_id`) REFERENCES `card` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1963 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_with_card`
--

LOCK TABLES `box_with_card` WRITE;
/*!40000 ALTER TABLE `box_with_card` DISABLE KEYS */;
INSERT INTO `box_with_card` VALUES (1,1,1,1,0,0,0,'2020-08-12 11:41:53'),(2,1,2,1,0,0,0,'2020-08-12 11:46:33'),(3,1,3,1,0,0,0,'2020-08-12 11:47:37'),(4,1,4,1,0,0,0,'2020-08-12 11:48:13'),(5,1,5,1,0,0,0,'2020-08-12 11:49:21'),(6,1,6,1,0,0,0,'2020-08-12 11:50:29'),(7,1,7,1,0,0,0,'2020-08-12 11:51:09'),(8,1,8,1,0,0,0,'2020-08-12 11:52:05'),(9,1,9,1,0,0,0,'2020-08-12 11:52:29'),(10,1,10,1,0,0,0,'2020-08-12 11:59:19'),(11,1,11,1,0,0,0,'2020-08-12 12:10:20'),(12,1,12,1,0,0,0,'2020-08-12 12:10:59'),(13,1,13,1,0,0,0,'2020-08-12 12:11:15'),(14,1,14,1,0,0,0,'2020-08-12 12:13:30'),(15,1,15,1,0,0,0,'2020-08-12 12:13:43'),(16,1,16,1,0,0,0,'2020-08-12 12:14:01'),(17,1,17,1,0,0,0,'2020-08-12 12:15:09'),(18,1,18,1,0,0,0,'2020-08-12 12:16:42'),(19,1,19,1,0,0,0,'2020-08-12 12:18:00'),(20,1,20,1,0,0,0,'2020-08-12 12:18:44'),(21,1,21,1,0,0,0,'2020-08-12 12:25:10'),(22,1,22,1,0,0,0,'2020-08-12 12:25:27'),(23,1,23,1,0,0,0,'2020-08-12 12:25:38'),(24,1,24,1,0,0,0,'2020-08-12 12:26:03'),(25,1,25,1,0,0,0,'2020-08-12 12:26:25'),(26,1,26,1,0,0,0,'2020-08-12 12:27:26'),(27,1,27,1,0,0,0,'2020-08-12 12:27:46'),(28,1,28,1,0,0,0,'2020-08-12 12:28:04'),(29,1,29,1,0,0,0,'2020-08-12 12:28:25'),(30,1,30,1,0,0,0,'2020-08-12 12:28:52'),(31,1,31,1,0,0,0,'2020-08-12 12:29:09'),(32,1,32,1,0,0,0,'2020-08-12 12:29:44'),(33,1,33,1,0,0,0,'2020-08-12 12:30:15'),(34,1,34,1,0,0,0,'2020-08-12 12:30:30'),(35,1,35,1,0,0,0,'2020-08-12 12:30:50'),(36,1,36,1,0,0,0,'2020-08-12 12:31:15'),(37,1,37,1,0,0,0,'2020-08-12 12:31:35'),(38,1,38,1,0,0,0,'2020-08-12 12:31:50'),(39,1,39,1,0,0,0,'2020-08-12 12:32:08'),(40,1,40,1,0,0,0,'2020-08-12 12:32:23'),(41,1,41,1,0,0,0,'2020-08-12 12:32:36'),(42,1,42,1,0,0,0,'2020-08-12 12:32:56'),(43,1,43,1,0,0,0,'2020-08-12 12:33:08'),(44,1,44,1,0,0,0,'2020-08-12 12:33:25'),(45,1,45,1,0,0,0,'2020-08-12 12:33:37'),(46,1,46,1,0,0,0,'2020-08-12 12:33:49'),(47,1,47,1,0,0,0,'2020-08-12 12:34:05'),(48,1,48,1,0,0,0,'2020-08-12 12:34:18'),(49,1,49,1,0,0,0,'2020-08-12 12:34:50'),(50,1,50,1,0,0,0,'2020-08-12 12:35:20'),(51,1,51,1,0,0,0,'2020-08-12 12:35:46'),(52,1,52,1,0,0,0,'2020-08-12 12:36:02'),(53,1,53,1,0,0,0,'2020-08-12 12:36:19'),(54,1,54,1,0,0,0,'2020-08-12 12:36:35'),(55,1,55,1,0,0,0,'2020-08-12 12:36:51'),(56,1,56,1,0,0,0,'2020-08-12 12:37:06'),(57,1,57,1,0,0,0,'2020-08-12 12:37:30'),(58,1,58,1,0,0,0,'2020-08-12 12:37:45'),(59,1,59,1,0,0,0,'2020-08-12 12:38:00'),(60,1,60,1,0,0,0,'2020-08-12 12:38:21'),(61,1,61,1,0,0,0,'2020-08-12 12:38:36'),(62,1,62,1,0,0,0,'2020-08-12 12:38:58'),(63,1,63,1,0,0,0,'2020-08-12 12:39:19'),(64,1,64,1,0,0,0,'2020-08-12 12:46:17'),(65,1,65,1,0,0,0,'2020-08-12 12:47:00'),(66,1,66,1,0,0,0,'2020-08-12 12:47:18'),(67,1,67,1,0,0,0,'2020-08-12 12:47:31'),(68,1,68,1,0,0,0,'2020-08-12 12:47:55'),(69,1,69,1,0,0,0,'2020-08-12 12:48:06'),(70,1,70,1,0,0,0,'2020-08-12 12:48:17'),(71,1,71,1,0,0,0,'2020-08-12 12:48:30'),(72,1,72,1,0,0,0,'2020-08-12 12:48:44'),(73,1,73,1,0,0,0,'2020-08-12 12:48:58'),(74,1,74,1,0,0,0,'2020-08-12 12:49:14'),(75,1,75,1,0,0,0,'2020-08-12 12:49:37'),(76,1,76,1,0,0,0,'2020-08-12 12:50:01'),(77,1,77,1,0,0,0,'2020-08-12 12:50:38'),(78,1,78,1,0,0,0,'2020-08-12 12:50:51'),(79,1,79,1,0,0,0,'2020-08-12 12:51:04'),(80,1,80,1,0,0,0,'2020-08-12 12:51:17'),(81,1,81,1,0,0,0,'2020-08-12 12:51:31'),(82,1,82,1,0,0,0,'2020-08-12 12:51:44'),(83,1,83,1,0,0,0,'2020-08-12 12:51:58'),(84,1,84,1,0,0,0,'2020-08-12 12:52:14'),(85,1,85,1,0,0,0,'2020-08-12 12:52:27'),(86,1,86,1,0,0,0,'2020-08-12 12:52:39'),(87,1,87,1,0,0,0,'2020-08-12 12:52:50'),(88,1,88,1,0,0,0,'2020-08-12 12:53:55'),(89,1,89,1,0,0,0,'2020-08-12 12:54:27'),(90,1,90,1,0,0,0,'2020-08-12 12:54:40'),(91,1,91,1,0,0,0,'2020-08-12 12:55:19'),(92,1,92,1,0,0,0,'2020-08-12 12:55:35'),(93,1,93,1,0,0,0,'2020-08-12 12:55:55'),(94,1,94,1,0,0,0,'2020-08-12 12:56:14'),(95,1,95,1,0,0,0,'2020-08-12 12:58:18'),(96,1,96,1,0,0,0,'2020-08-12 12:58:31'),(97,1,97,1,0,0,0,'2020-08-12 12:58:42'),(98,1,98,1,0,0,0,'2020-08-12 12:58:56'),(99,1,99,1,0,0,0,'2020-08-12 12:59:16'),(100,1,100,1,0,0,0,'2020-08-12 12:59:31'),(101,2,101,1,0,0,0,'2020-08-12 13:09:11'),(102,2,102,1,0,0,0,'2020-08-12 13:09:28'),(103,2,103,1,0,0,0,'2020-08-12 13:09:43'),(104,2,104,1,0,0,0,'2020-08-12 13:09:55'),(105,2,105,1,0,0,0,'2020-08-12 13:10:13'),(106,2,106,1,0,0,0,'2020-08-12 13:10:29'),(107,2,107,1,0,0,0,'2020-08-12 13:10:39'),(108,2,108,1,0,0,0,'2020-08-12 13:10:53'),(109,2,109,1,0,0,0,'2020-08-12 13:11:05'),(110,2,110,1,0,0,0,'2020-08-12 13:11:18'),(111,2,111,1,0,0,0,'2020-08-12 13:11:32'),(112,2,112,1,0,0,0,'2020-08-12 13:11:56'),(113,2,113,1,0,0,0,'2020-08-12 13:12:17'),(114,2,114,1,0,0,0,'2020-08-12 13:12:31'),(115,2,115,1,0,0,1,'2020-08-12 13:12:47'),(116,2,116,1,0,0,0,'2020-08-12 13:12:59'),(117,2,117,1,0,0,0,'2020-08-12 13:13:45'),(118,2,118,1,0,0,0,'2020-08-12 13:14:03'),(119,2,119,1,0,0,0,'2020-08-12 13:14:46'),(120,2,120,1,0,0,0,'2020-08-12 13:15:01'),(121,2,121,1,0,0,0,'2020-08-12 13:15:20'),(122,2,122,1,0,0,0,'2020-08-12 13:15:58'),(123,2,123,1,0,0,0,'2020-08-12 13:16:13'),(124,2,124,1,0,0,0,'2020-08-12 13:16:24'),(125,2,125,1,0,0,0,'2020-08-12 13:16:38'),(126,2,126,1,0,0,0,'2020-08-12 13:16:55'),(127,2,127,1,0,0,0,'2020-08-12 13:17:07'),(128,2,128,1,0,0,0,'2020-08-12 13:17:21'),(129,2,129,1,0,0,0,'2020-08-12 13:17:33'),(130,2,130,1,0,0,0,'2020-08-12 13:17:48'),(131,2,131,1,0,0,0,'2020-08-12 13:18:04'),(132,2,132,1,0,0,0,'2020-08-12 13:18:18'),(133,2,133,1,0,0,0,'2020-08-12 13:18:42'),(134,2,134,1,0,0,0,'2020-08-12 13:18:57'),(135,2,135,1,0,0,0,'2020-08-12 13:19:15'),(136,2,136,1,0,0,0,'2020-08-12 13:19:26'),(137,2,137,1,0,0,0,'2020-08-12 13:20:11'),(138,2,138,1,0,0,0,'2020-08-12 13:20:43'),(139,2,139,1,0,0,0,'2020-08-12 13:20:57'),(140,2,140,1,0,0,0,'2020-08-12 13:22:32'),(141,2,141,1,0,0,0,'2020-08-12 13:23:00'),(142,2,142,1,0,0,0,'2020-08-12 13:23:26'),(143,2,143,1,0,0,0,'2020-08-12 13:23:55'),(144,2,144,1,0,0,0,'2020-08-12 13:24:17'),(145,2,145,1,0,0,0,'2020-08-12 13:24:42'),(146,2,146,1,0,0,0,'2020-08-12 13:24:52'),(147,2,147,1,0,0,0,'2020-08-12 13:25:05'),(148,2,148,1,0,0,0,'2020-08-12 13:27:47'),(149,2,149,1,0,0,0,'2020-08-12 13:30:01'),(150,2,150,1,0,0,0,'2020-08-12 13:31:10'),(151,2,151,1,0,0,0,'2020-08-12 13:31:30'),(152,2,152,1,0,0,0,'2020-08-12 13:31:43'),(153,2,153,1,0,0,0,'2020-08-12 13:31:53'),(154,2,154,1,0,0,0,'2020-08-12 13:32:11'),(155,2,155,1,0,0,0,'2020-08-12 13:32:21'),(156,2,156,1,0,0,0,'2020-08-12 13:34:15'),(157,2,157,1,0,0,0,'2020-08-12 13:34:33'),(158,2,158,1,0,0,0,'2020-08-12 13:34:48'),(159,2,159,1,0,0,0,'2020-08-12 13:35:01'),(160,2,160,1,0,0,0,'2020-08-12 13:35:20'),(161,2,161,1,0,0,0,'2020-08-12 13:35:33'),(162,2,162,1,0,0,0,'2020-08-12 13:35:46'),(163,2,163,1,0,0,0,'2020-08-12 13:35:59'),(164,2,164,1,0,0,0,'2020-08-12 13:36:59'),(165,2,165,1,0,0,0,'2020-08-12 13:37:17'),(166,2,166,1,0,0,0,'2020-08-12 13:37:29'),(167,2,167,1,0,0,0,'2020-08-12 13:37:45'),(168,2,168,1,0,0,0,'2020-08-12 13:38:14'),(169,2,169,1,0,0,0,'2020-08-12 13:38:46'),(170,2,170,1,0,0,0,'2020-08-12 13:39:02'),(171,2,171,1,0,0,0,'2020-08-12 13:39:14'),(172,2,172,1,0,0,0,'2020-08-12 13:39:37'),(173,2,173,1,0,0,0,'2020-08-12 13:39:51'),(421,8,175,1,0,0,0,'2020-08-14 11:22:49'),(422,8,176,1,0,0,0,'2020-08-14 11:25:00'),(423,8,177,1,0,0,0,'2020-08-14 11:26:03'),(424,8,178,1,0,0,0,'2020-08-14 11:26:41'),(425,8,179,1,0,0,0,'2020-08-14 11:27:13'),(426,8,180,1,0,0,0,'2020-08-14 11:29:57'),(427,8,181,1,0,0,0,'2020-08-14 11:30:14'),(428,8,182,1,0,0,0,'2020-08-14 11:30:59'),(429,8,183,1,0,0,0,'2020-08-14 11:31:44'),(430,8,184,1,0,0,0,'2020-08-14 11:31:58'),(431,8,185,1,0,0,0,'2020-08-14 11:32:13'),(432,8,186,1,0,0,0,'2020-08-14 11:32:40'),(433,8,187,1,0,0,0,'2020-08-14 11:34:12'),(434,8,188,1,0,0,0,'2020-08-14 11:34:58'),(435,8,189,1,0,0,0,'2020-08-14 11:35:13'),(436,8,190,1,0,0,0,'2020-08-14 11:43:33'),(437,8,191,1,0,0,0,'2020-08-14 11:43:59'),(438,8,192,1,0,0,0,'2020-08-14 11:44:23'),(439,8,193,1,0,0,0,'2020-08-14 11:44:35'),(440,8,194,1,0,0,0,'2020-08-14 11:44:50'),(441,8,195,1,0,0,0,'2020-08-14 11:45:35'),(442,8,196,1,0,0,0,'2020-08-14 11:46:34'),(443,8,197,1,0,0,0,'2020-08-14 11:47:25'),(444,8,198,1,0,0,0,'2020-08-14 11:47:39'),(445,8,199,1,0,0,0,'2020-08-14 11:47:58'),(446,8,200,1,0,0,0,'2020-08-14 11:48:15'),(447,8,201,1,0,0,0,'2020-08-14 11:48:35'),(448,8,202,1,0,0,0,'2020-08-14 11:49:11'),(449,8,203,1,0,0,0,'2020-08-14 11:49:35'),(450,8,204,1,0,0,0,'2020-08-14 11:50:03'),(451,8,205,1,0,0,0,'2020-08-14 11:50:37'),(452,8,206,1,0,0,0,'2020-08-14 11:51:27'),(453,8,207,1,0,0,0,'2020-08-14 11:52:23'),(454,8,208,1,0,0,0,'2020-08-14 11:52:58'),(455,8,209,1,0,0,0,'2020-08-14 11:53:22'),(456,8,210,1,0,0,0,'2020-08-14 11:53:39'),(457,8,211,1,0,0,0,'2020-08-14 11:54:19'),(458,8,212,1,0,0,0,'2020-08-14 11:54:30'),(459,10,213,1,0,0,0,'2020-08-14 11:56:44'),(460,10,214,1,0,0,0,'2020-08-14 11:57:10'),(461,10,215,1,0,0,0,'2020-08-14 11:57:21'),(462,10,216,1,0,0,0,'2020-08-14 11:57:59'),(463,10,217,1,0,0,0,'2020-08-14 11:58:10'),(464,10,218,1,0,0,0,'2020-08-14 11:58:20'),(465,10,219,1,0,0,0,'2020-08-14 11:58:41'),(466,10,220,1,0,0,0,'2020-08-14 11:59:27'),(467,11,221,1,0,0,0,'2020-08-14 12:00:48'),(468,11,222,1,0,0,0,'2020-08-14 12:01:00'),(469,11,223,1,0,0,0,'2020-08-14 12:01:09'),(470,11,224,1,0,0,0,'2020-08-14 12:01:49'),(471,11,225,1,0,0,0,'2020-08-14 12:02:42'),(472,11,226,1,0,0,0,'2020-08-14 12:03:35'),(473,11,227,1,0,0,0,'2020-08-14 12:04:20'),(474,11,228,1,0,0,0,'2020-08-14 12:04:30'),(475,11,229,1,0,0,0,'2020-08-14 12:04:39'),(476,11,230,1,0,0,0,'2020-08-14 12:04:50'),(477,11,231,1,0,0,0,'2020-08-14 12:06:39'),(478,11,232,1,0,0,0,'2020-08-14 12:08:24'),(479,11,233,1,0,0,0,'2020-08-14 12:09:57'),(480,11,234,1,0,0,0,'2020-08-14 12:10:10'),(481,11,235,1,0,0,0,'2020-08-14 12:10:37'),(482,11,236,1,0,0,0,'2020-08-14 12:10:51'),(483,11,237,1,0,0,0,'2020-08-14 12:11:17'),(484,11,238,1,0,0,0,'2020-08-14 12:11:26'),(485,11,239,1,0,0,0,'2020-08-14 12:11:39'),(486,11,240,1,0,0,0,'2020-08-14 12:11:48'),(487,11,241,1,0,0,0,'2020-08-14 12:12:02'),(488,11,242,1,0,0,0,'2020-08-14 12:13:10'),(489,11,243,1,0,0,0,'2020-08-14 12:14:20'),(490,11,244,1,0,0,0,'2020-08-14 12:14:52'),(491,11,245,1,0,0,0,'2020-08-14 12:15:08'),(492,11,246,1,0,0,0,'2020-08-14 12:15:23'),(493,11,247,1,0,0,0,'2020-08-14 12:15:37'),(494,11,248,1,0,0,0,'2020-08-14 12:15:56'),(495,11,249,1,0,0,0,'2020-08-14 12:16:08'),(496,11,250,1,0,0,0,'2020-08-14 12:16:32'),(497,11,251,1,0,0,0,'2020-08-14 12:16:43'),(498,11,252,1,0,0,0,'2020-08-14 12:17:41'),(499,11,253,1,0,0,0,'2020-08-14 12:18:02'),(500,11,254,1,0,0,0,'2020-08-14 12:18:29'),(501,11,255,1,0,0,0,'2020-08-14 12:18:56'),(502,11,256,1,0,0,0,'2020-08-14 12:19:11'),(503,11,257,1,0,0,0,'2020-08-14 12:19:27'),(504,11,258,1,0,0,0,'2020-08-14 12:19:37'),(505,11,259,1,0,0,0,'2020-08-14 12:19:49'),(506,11,260,1,0,0,0,'2020-08-14 12:20:00'),(507,11,261,1,0,0,0,'2020-08-14 12:20:11'),(508,11,262,1,0,0,0,'2020-08-14 12:20:21'),(509,12,263,1,0,0,0,'2020-08-14 12:22:38'),(510,12,264,1,0,0,0,'2020-08-14 12:23:02'),(511,12,265,1,0,0,0,'2020-08-14 12:23:13'),(512,12,266,1,0,0,0,'2020-08-14 12:23:26'),(513,12,267,1,0,0,0,'2020-08-14 12:23:44'),(514,12,268,1,0,0,0,'2020-08-14 12:23:57'),(515,12,269,1,0,0,0,'2020-08-14 12:24:40'),(516,12,270,1,0,0,0,'2020-08-14 12:25:07'),(517,12,271,1,0,0,0,'2020-08-14 12:25:21'),(518,12,272,1,0,0,0,'2020-08-14 12:25:36'),(519,12,273,1,0,0,0,'2020-08-14 12:26:08'),(520,12,274,1,0,0,0,'2020-08-14 12:26:23'),(521,12,275,1,0,0,0,'2020-08-14 12:28:19'),(522,12,276,1,0,0,0,'2020-08-14 12:32:13'),(523,12,277,1,0,0,0,'2020-08-14 12:35:08'),(524,12,278,1,0,0,0,'2020-08-14 12:35:23'),(525,12,279,1,0,0,0,'2020-08-14 12:36:15'),(526,12,280,1,0,0,0,'2020-08-14 12:36:35'),(527,12,281,1,0,0,0,'2020-08-14 12:36:50'),(528,12,282,1,0,0,0,'2020-08-14 12:37:10'),(529,12,283,1,0,0,0,'2020-08-14 12:37:37'),(530,12,284,1,0,0,0,'2020-08-14 12:37:54'),(531,12,285,1,0,0,0,'2020-08-14 12:38:06'),(532,12,286,1,0,0,0,'2020-08-14 12:38:15'),(533,12,287,1,0,0,0,'2020-08-14 12:38:32'),(534,12,288,1,0,0,0,'2020-08-14 12:38:46'),(535,12,289,1,0,0,0,'2020-08-14 12:39:19'),(536,12,290,1,0,0,0,'2020-08-14 12:40:01'),(537,12,291,1,0,0,0,'2020-08-14 12:40:48'),(538,12,292,1,0,0,0,'2020-08-14 12:40:59'),(539,12,293,1,0,0,0,'2020-08-14 12:41:28'),(540,12,294,1,0,0,0,'2020-08-14 12:41:39'),(541,12,295,1,0,0,0,'2020-08-14 12:41:57'),(542,12,296,1,0,0,0,'2020-08-14 12:42:13');
/*!40000 ALTER TABLE `box_with_card` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `card`
--

DROP TABLE IF EXISTS `card`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `card` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `question` varchar(256) COLLATE utf8mb4_unicode_ci NOT NULL,
  `answer` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `answer_html` text COLLATE utf8mb4_unicode_ci,
  `delta` text COLLATE utf8mb4_unicode_ci,
  `color` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `ix_card_create_time` (`create_time`)
) ENGINE=InnoDB AUTO_INCREMENT=396 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `card`
--

LOCK TABLES `card` WRITE;
/*!40000 ALTER TABLE `card` DISABLE KEYS */;
INSERT INTO `card` VALUES (1,'100. 相同的树','给定两个二叉树，编写一个函数来检验它们是否相同。\n \n如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。\n\n**示例 1:**\n\n```\n输入:\n          1           1\n          / \\          / \\\n         2   3      2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true\n```\n\n**示例 2:**\n\n```\n输入: \n          1          1\n          /            \\\n         2              2\n\n       [1,2],       [1,null,2]\n\n输出: false\n```\n\n**示例 3:**\n\n```\n输入:\n          1           1\n          / \\          / \\\n         2   1     1    2\n\n        [1,2,1],   [1,1,2]\n\n输出: false\n```\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e24\\u4e2a\\u4e8c\\u53c9\\u6811\\uff0c\\u7f16\\u5199\\u4e00\\u4e2a\\u51fd\\u6570\\u6765\\u68c0\\u9a8c\\u5b83\\u4eec\\u662f\\u5426\\u76f8\\u540c\\u3002\\n \\n\\u5982\\u679c\\u4e24\\u4e2a\\u6811\\u5728\\u7ed3\\u6784\\u4e0a\\u76f8\\u540c\\uff0c\\u5e76\\u4e14\\u8282\\u70b9\\u5177\\u6709\\u76f8\\u540c\\u7684\\u503c\\uff0c\\u5219\\u8ba4\\u4e3a\\u5b83\\u4eec\\u662f\\u76f8\\u540c\\u7684\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\n          1           1\\n          / \\\\          / \\\\\\n         2   3      2   3\\n\\n        [1,2,3],   [1,2,3]\\n\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\n          1          1\\n          /            \\\\\\n         2              2\\n\\n       [1,2],       [1,null,2]\\n\\n\\u8f93\\u51fa: false\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165:\\n          1           1\\n          / \\\\          / \\\\\\n         2   1     1    2\\n\\n        [1,2,1],   [1,1,2]\\n\\n\\u8f93\\u51fa: false\\n```\\n\\n\\n\"}]}','green','2020-08-12 11:41:53'),(2,'99. 恢复二叉搜索树','二叉搜索树中的两个节点被错误地交换。\n \n请在不改变其结构的情况下，恢复这棵树。\n\n**示例 1:**\n\n```\n输入: [1,3,null,null,2]\n\n   1\n  /\n 3\n  \\\n   2\n\n输出: [3,1,null,null,2]\n\n   3\n  /\n 1\n  \\\n   2\n```\n\n**示例 2:**\n\n```\n输入: [3,1,4,null,null,2]\n\n  3\n / \\\n1   4\n   /\n  2\n\n输出: [2,1,4,null,null,3]\n\n  2\n / \\\n1   4\n   /\n  3\n```\n\n**进阶:**\n\n- 使用 O(*n*) 空间复杂度的解法很容易实现。\n- 你能想出一个只使用常数空间的解决方案吗？\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u4e2d\\u7684\\u4e24\\u4e2a\\u8282\\u70b9\\u88ab\\u9519\\u8bef\\u5730\\u4ea4\\u6362\\u3002\\n \\n\\u8bf7\\u5728\\u4e0d\\u6539\\u53d8\\u5176\\u7ed3\\u6784\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u6062\\u590d\\u8fd9\\u68f5\\u6811\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [1,3,null,null,2]\\n\\n   1\\n  /\\n 3\\n  \\\\\\n   2\\n\\n\\u8f93\\u51fa: [3,1,null,null,2]\\n\\n   3\\n  /\\n 1\\n  \\\\\\n   2\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [3,1,4,null,null,2]\\n\\n  3\\n / \\\\\\n1   4\\n   /\\n  2\\n\\n\\u8f93\\u51fa: [2,1,4,null,null,3]\\n\\n  2\\n / \\\\\\n1   4\\n   /\\n  3\\n```\\n\\n**\\u8fdb\\u9636:**\\n\\n- \\u4f7f\\u7528 O(*n*) \\u7a7a\\u95f4\\u590d\\u6742\\u5ea6\\u7684\\u89e3\\u6cd5\\u5f88\\u5bb9\\u6613\\u5b9e\\u73b0\\u3002\\n- \\u4f60\\u80fd\\u60f3\\u51fa\\u4e00\\u4e2a\\u53ea\\u4f7f\\u7528\\u5e38\\u6570\\u7a7a\\u95f4\\u7684\\u89e3\\u51b3\\u65b9\\u6848\\u5417\\uff1f\\n\\n\\n\"}]}','red','2020-08-12 11:46:33'),(3,'98. 验证二叉搜索树','给定一个二叉树，判断其是否是一个有效的二叉搜索树。 \n\n假设一个二叉搜索树具有如下特征：\n\n- 节点的左子树只包含**小于**当前节点的数。\n- 节点的右子树只包含**大于**当前节点的数。\n- 所有左子树和右子树自身必须也是二叉搜索树。\n\n**示例 1:**\n\n```\n输入:\n    2\n   / \\\n  1   3\n输出: true\n```\n\n**示例 2:**\n\n```\n输入:\n    5\n    / \\\n  1   4\n       / \\\n     3   6\n输出: false\n解释: 输入为: [5,1,4,null,null,3,6]。\n     根节点的值为 5 ，但是其右子节点值为 4 。\n```\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u4e8c\\u53c9\\u6811\\uff0c\\u5224\\u65ad\\u5176\\u662f\\u5426\\u662f\\u4e00\\u4e2a\\u6709\\u6548\\u7684\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u3002 \\n\\n\\u5047\\u8bbe\\u4e00\\u4e2a\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u5177\\u6709\\u5982\\u4e0b\\u7279\\u5f81\\uff1a\\n\\n- \\u8282\\u70b9\\u7684\\u5de6\\u5b50\\u6811\\u53ea\\u5305\\u542b**\\u5c0f\\u4e8e**\\u5f53\\u524d\\u8282\\u70b9\\u7684\\u6570\\u3002\\n- \\u8282\\u70b9\\u7684\\u53f3\\u5b50\\u6811\\u53ea\\u5305\\u542b**\\u5927\\u4e8e**\\u5f53\\u524d\\u8282\\u70b9\\u7684\\u6570\\u3002\\n- \\u6240\\u6709\\u5de6\\u5b50\\u6811\\u548c\\u53f3\\u5b50\\u6811\\u81ea\\u8eab\\u5fc5\\u987b\\u4e5f\\u662f\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\n    2\\n   / \\\\\\n  1   3\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165:\\n    5\\n    / \\\\\\n  1   4\\n       / \\\\\\n     3   6\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \\u8f93\\u5165\\u4e3a: [5,1,4,null,null,3,6]\\u3002\\n     \\u6839\\u8282\\u70b9\\u7684\\u503c\\u4e3a 5 \\uff0c\\u4f46\\u662f\\u5176\\u53f3\\u5b50\\u8282\\u70b9\\u503c\\u4e3a 4 \\u3002\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 11:47:37'),(4,'97. 交错字符串','给定三个字符串 *s1*, *s2*, *s3*, 验证 *s3* 是否是由 *s1* 和 *s2* 交错组成的。\n\n  \n\n**示例 1：**\n\n```\n输入：s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n输出：false\n```\n\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e09\\u4e2a\\u5b57\\u7b26\\u4e32 *s1*, *s2*, *s3*, \\u9a8c\\u8bc1 *s3* \\u662f\\u5426\\u662f\\u7531 *s1* \\u548c *s2* \\u4ea4\\u9519\\u7ec4\\u6210\\u7684\\u3002\\n\\n  \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1as1 = \\\"aabcc\\\", s2 = \\\"dbbca\\\", s3 = \\\"aadbbcbcac\\\"\\n\\u8f93\\u51fa\\uff1atrue\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1as1 = \\\"aabcc\\\", s2 = \\\"dbbca\\\", s3 = \\\"aadbbbaccc\\\"\\n\\u8f93\\u51fa\\uff1afalse\\n```\\n\\n\\n\\n\"}]}','red','2020-08-12 11:48:13'),(5,'96. 不同的二叉搜索树','给定一个整数 *n*，求以 1 ... *n* 为节点组成的二叉搜索树有多少种？\n\n**示例:**\n \n```\n输入: 3\n输出: 5\n解释:\n给定 n = 3, 一共有 5 种不同结构的二叉搜索树:\n\n   1         3     3      2      1\n    \\        /      /       / \\       \\\n     3     2     1      1   3      2\n    /      /        \\                    \\\n   2     1         2                   3\n```\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6574\\u6570 *n*\\uff0c\\u6c42\\u4ee5 1 ... *n* \\u4e3a\\u8282\\u70b9\\u7ec4\\u6210\\u7684\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u6709\\u591a\\u5c11\\u79cd\\uff1f\\n\\n**\\u793a\\u4f8b:**\\n \\n```\\n\\u8f93\\u5165: 3\\n\\u8f93\\u51fa: 5\\n\\u89e3\\u91ca:\\n\\u7ed9\\u5b9a n = 3, \\u4e00\\u5171\\u6709 5 \\u79cd\\u4e0d\\u540c\\u7ed3\\u6784\\u7684\\u4e8c\\u53c9\\u641c\\u7d22\\u6811:\\n\\n   1         3     3      2      1\\n    \\\\        /      /       / \\\\       \\\\\\n     3     2     1      1   3      2\\n    /      /        \\\\                    \\\\\\n   2     1         2                   3\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 11:49:21'),(6,'95. 不同的二叉搜索树 II','给定一个整数 *n*，生成所有由 1 ... *n* 为节点所组成的 **二叉搜索树** 。\n \n  \n\n**示例：**\n\n```\n输入：3\n输出：\n[\n  [1,null,3,2],\n  [3,2,null,1],\n  [3,1,null,null,2],\n  [2,1,3],\n  [1,null,2,null,3]\n]\n解释：\n以上的输出对应以下 5 种不同结构的二叉搜索树：\n\n   1         3     3      2      1\n    \\         /     /        / \\      \\\n     3     2     1      1   3      2\n    /      /        \\                    \\\n   2     1          2                   3\n```\n\n \n\n**提示：**\n\n- `0 <= n <= 8`\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6574\\u6570 *n*\\uff0c\\u751f\\u6210\\u6240\\u6709\\u7531 1 ... *n* \\u4e3a\\u8282\\u70b9\\u6240\\u7ec4\\u6210\\u7684 **\\u4e8c\\u53c9\\u641c\\u7d22\\u6811** \\u3002\\n \\n  \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a3\\n\\u8f93\\u51fa\\uff1a\\n[\\n  [1,null,3,2],\\n  [3,2,null,1],\\n  [3,1,null,null,2],\\n  [2,1,3],\\n  [1,null,2,null,3]\\n]\\n\\u89e3\\u91ca\\uff1a\\n\\u4ee5\\u4e0a\\u7684\\u8f93\\u51fa\\u5bf9\\u5e94\\u4ee5\\u4e0b 5 \\u79cd\\u4e0d\\u540c\\u7ed3\\u6784\\u7684\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\uff1a\\n\\n   1         3     3      2      1\\n    \\\\         /     /        / \\\\      \\\\\\n     3     2     1      1   3      2\\n    /      /        \\\\                    \\\\\\n   2     1          2                   3\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `0 <= n <= 8`\\n\\n\"}]}','yellow','2020-08-12 11:50:29'),(7,'94. 二叉树的中序遍历','给定一个二叉树，返回它的*中序* 遍历。\n\n**示例:**\n \n```\n输入: [1,null,2,3]\n   1\n     \\\n      2\n    /\n   3\n\n输出: [1,3,2]\n```\n\n**进阶:** 递归算法很简单，你可以通过迭代算法完成吗？\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u4e8c\\u53c9\\u6811\\uff0c\\u8fd4\\u56de\\u5b83\\u7684*\\u4e2d\\u5e8f* \\u904d\\u5386\\u3002\\n\\n**\\u793a\\u4f8b:**\\n \\n```\\n\\u8f93\\u5165: [1,null,2,3]\\n   1\\n     \\\\\\n      2\\n    /\\n   3\\n\\n\\u8f93\\u51fa: [1,3,2]\\n```\\n\\n**\\u8fdb\\u9636:** \\u9012\\u5f52\\u7b97\\u6cd5\\u5f88\\u7b80\\u5355\\uff0c\\u4f60\\u53ef\\u4ee5\\u901a\\u8fc7\\u8fed\\u4ee3\\u7b97\\u6cd5\\u5b8c\\u6210\\u5417\\uff1f\\n\\n\\n\"}]}','yellow','2020-08-12 11:51:09'),(8,'93. 复原IP地址','给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。\n\n有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 `\'.\' `分隔。\n  \n \n\n**示例:**\n\n```\n输入: \"25525511135\"\n输出: [\"255.255.11.135\", \"255.255.111.35\"]\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u53ea\\u5305\\u542b\\u6570\\u5b57\\u7684\\u5b57\\u7b26\\u4e32\\uff0c\\u590d\\u539f\\u5b83\\u5e76\\u8fd4\\u56de\\u6240\\u6709\\u53ef\\u80fd\\u7684 IP \\u5730\\u5740\\u683c\\u5f0f\\u3002\\n\\n\\u6709\\u6548\\u7684 IP \\u5730\\u5740\\u6b63\\u597d\\u7531\\u56db\\u4e2a\\u6574\\u6570\\uff08\\u6bcf\\u4e2a\\u6574\\u6570\\u4f4d\\u4e8e 0 \\u5230 255 \\u4e4b\\u95f4\\u7ec4\\u6210\\uff09\\uff0c\\u6574\\u6570\\u4e4b\\u95f4\\u7528 `\'.\' `\\u5206\\u9694\\u3002\\n  \\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: \\\"25525511135\\\"\\n\\u8f93\\u51fa: [\\\"255.255.11.135\\\", \\\"255.255.111.35\\\"]\\n```\\n\\n\"}]}','yellow','2020-08-12 11:52:05'),(9,'92. 反转链表 II','\n反转从位置 *m* 到 *n* 的链表。请使用一趟扫描完成反转。\n\n**说明:**\n1 ≤ *m* ≤ *n* ≤ 链表长度。\n\n**示例:**\n \n```\n输入: 1->2->3->4->5->NULL, m = 2, n = 4\n输出: 1->4->3->2->5->NULL\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\n\\u53cd\\u8f6c\\u4ece\\u4f4d\\u7f6e *m* \\u5230 *n* \\u7684\\u94fe\\u8868\\u3002\\u8bf7\\u4f7f\\u7528\\u4e00\\u8d9f\\u626b\\u63cf\\u5b8c\\u6210\\u53cd\\u8f6c\\u3002\\n\\n**\\u8bf4\\u660e:**\\n1 \\u2264 *m* \\u2264 *n* \\u2264 \\u94fe\\u8868\\u957f\\u5ea6\\u3002\\n\\n**\\u793a\\u4f8b:**\\n \\n```\\n\\u8f93\\u5165: 1->2->3->4->5->NULL, m = 2, n = 4\\n\\u8f93\\u51fa: 1->4->3->2->5->NULL\\n```\\n\\n\"}]}','yellow','2020-08-12 11:52:29'),(10,'91. 解码方法','一条包含字母 `A-Z` 的消息通过以下方式进行了编码：\n\n```\n\'A\' -> 1\n\'B\' -> 2\n...\n\'Z\' -> 26\n```\n\n给定一个只包含数字的**非空**字符串，请计算解码方法的总数。\n\n**示例 1:**\n \n```\n输入: \"12\"\n输出: 2\n解释: 它可以解码为 \"AB\"（1 2）或者 \"L\"（12）。\n```\n\n**示例 2:**\n\n```\n输入: \"226\"\n输出: 3\n解释: 它可以解码为 \"BZ\" (2 26), \"VF\" (22 6), 或者 \"BBF\" (2 2 6) 。\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u4e00\\u6761\\u5305\\u542b\\u5b57\\u6bcd `A-Z` \\u7684\\u6d88\\u606f\\u901a\\u8fc7\\u4ee5\\u4e0b\\u65b9\\u5f0f\\u8fdb\\u884c\\u4e86\\u7f16\\u7801\\uff1a\\n\\n```\\n\'A\' -> 1\\n\'B\' -> 2\\n...\\n\'Z\' -> 26\\n```\\n\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u53ea\\u5305\\u542b\\u6570\\u5b57\\u7684**\\u975e\\u7a7a**\\u5b57\\u7b26\\u4e32\\uff0c\\u8bf7\\u8ba1\\u7b97\\u89e3\\u7801\\u65b9\\u6cd5\\u7684\\u603b\\u6570\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n \\n```\\n\\u8f93\\u5165: \\\"12\\\"\\n\\u8f93\\u51fa: 2\\n\\u89e3\\u91ca: \\u5b83\\u53ef\\u4ee5\\u89e3\\u7801\\u4e3a \\\"AB\\\"\\uff081 2\\uff09\\u6216\\u8005 \\\"L\\\"\\uff0812\\uff09\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\\"226\\\"\\n\\u8f93\\u51fa: 3\\n\\u89e3\\u91ca: \\u5b83\\u53ef\\u4ee5\\u89e3\\u7801\\u4e3a \\\"BZ\\\" (2 26), \\\"VF\\\" (22 6), \\u6216\\u8005 \\\"BBF\\\" (2 2 6) \\u3002\\n```\\n\\n\"}]}','yellow','2020-08-12 11:59:19'),(11,'90. 子集 II','给定一个可能包含重复元素的整数数组 ***nums***，返回该数组所有可能的子集（幂集）。\n\n**说明：**解集不能包含重复的子集。\n\n**示例:**\n\n```\n输入: [1,2,2]\n输出:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n```\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u53ef\\u80fd\\u5305\\u542b\\u91cd\\u590d\\u5143\\u7d20\\u7684\\u6574\\u6570\\u6570\\u7ec4 ***nums***\\uff0c\\u8fd4\\u56de\\u8be5\\u6570\\u7ec4\\u6240\\u6709\\u53ef\\u80fd\\u7684\\u5b50\\u96c6\\uff08\\u5e42\\u96c6\\uff09\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\u89e3\\u96c6\\u4e0d\\u80fd\\u5305\\u542b\\u91cd\\u590d\\u7684\\u5b50\\u96c6\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [1,2,2]\\n\\u8f93\\u51fa:\\n[\\n  [2],\\n  [1],\\n  [1,2,2],\\n  [2,2],\\n  [1,2],\\n  []\\n]\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:10:20'),(12,'89. 格雷编码','格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。\n\n给定一个代表编码总位数的非负整数 *n*，打印其格雷编码序列。即使有多个不同答案，你也只需要返回其中一种。\n\n格雷编码序列必须以 0 开头。\n\n \n\n**示例 1:**\n\n```\n输入: 2\n输出: [0,1,3,2]\n解释:\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\n对于给定的 n，其格雷编码序列并不唯一。\n例如，[0,2,3,1] 也是一个有效的格雷编码序列。\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1\n```\n\n**示例 2:**\n\n```\n输入: 0\n输出: [0]\n解释: 我们定义格雷编码序列必须以 0 开头。\n     给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。\n     因此，当 n = 0 时，其格雷编码序列为 [0]。\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u683c\\u96f7\\u7f16\\u7801\\u662f\\u4e00\\u4e2a\\u4e8c\\u8fdb\\u5236\\u6570\\u5b57\\u7cfb\\u7edf\\uff0c\\u5728\\u8be5\\u7cfb\\u7edf\\u4e2d\\uff0c\\u4e24\\u4e2a\\u8fde\\u7eed\\u7684\\u6570\\u503c\\u4ec5\\u6709\\u4e00\\u4e2a\\u4f4d\\u6570\\u7684\\u5dee\\u5f02\\u3002\\n\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u4ee3\\u8868\\u7f16\\u7801\\u603b\\u4f4d\\u6570\\u7684\\u975e\\u8d1f\\u6574\\u6570 *n*\\uff0c\\u6253\\u5370\\u5176\\u683c\\u96f7\\u7f16\\u7801\\u5e8f\\u5217\\u3002\\u5373\\u4f7f\\u6709\\u591a\\u4e2a\\u4e0d\\u540c\\u7b54\\u6848\\uff0c\\u4f60\\u4e5f\\u53ea\\u9700\\u8981\\u8fd4\\u56de\\u5176\\u4e2d\\u4e00\\u79cd\\u3002\\n\\n\\u683c\\u96f7\\u7f16\\u7801\\u5e8f\\u5217\\u5fc5\\u987b\\u4ee5 0 \\u5f00\\u5934\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 2\\n\\u8f93\\u51fa: [0,1,3,2]\\n\\u89e3\\u91ca:\\n00 - 0\\n01 - 1\\n11 - 3\\n10 - 2\\n\\n\\u5bf9\\u4e8e\\u7ed9\\u5b9a\\u7684 n\\uff0c\\u5176\\u683c\\u96f7\\u7f16\\u7801\\u5e8f\\u5217\\u5e76\\u4e0d\\u552f\\u4e00\\u3002\\n\\u4f8b\\u5982\\uff0c[0,2,3,1] \\u4e5f\\u662f\\u4e00\\u4e2a\\u6709\\u6548\\u7684\\u683c\\u96f7\\u7f16\\u7801\\u5e8f\\u5217\\u3002\\n\\n00 - 0\\n10 - 2\\n11 - 3\\n01 - 1\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 0\\n\\u8f93\\u51fa: [0]\\n\\u89e3\\u91ca: \\u6211\\u4eec\\u5b9a\\u4e49\\u683c\\u96f7\\u7f16\\u7801\\u5e8f\\u5217\\u5fc5\\u987b\\u4ee5 0 \\u5f00\\u5934\\u3002\\n     \\u7ed9\\u5b9a\\u7f16\\u7801\\u603b\\u4f4d\\u6570\\u4e3a n \\u7684\\u683c\\u96f7\\u7f16\\u7801\\u5e8f\\u5217\\uff0c\\u5176\\u957f\\u5ea6\\u4e3a 2n\\u3002\\u5f53 n = 0 \\u65f6\\uff0c\\u957f\\u5ea6\\u4e3a 20 = 1\\u3002\\n     \\u56e0\\u6b64\\uff0c\\u5f53 n = 0 \\u65f6\\uff0c\\u5176\\u683c\\u96f7\\u7f16\\u7801\\u5e8f\\u5217\\u4e3a [0]\\u3002\\n```\\n\\n\"}]}','yellow','2020-08-12 12:10:59'),(13,'88. 合并两个有序数组','给你两个有序整数数组 *nums1* 和 *nums2*，请你将 *nums2* 合并到 *nums1* 中*，*使 *nums1* 成为一个有序数组。\n\n \n\n**说明:**\n\n- 初始化 *nums1* 和 *nums2* 的元素数量分别为 *m* 和 *n* 。\n- 你可以假设 *nums1* 有足够的空间（空间大小大于或等于 *m + n*）来保存 *nums2* 中的元素。\n\n \n\n**示例:**\n\n```\n输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u4f60\\u4e24\\u4e2a\\u6709\\u5e8f\\u6574\\u6570\\u6570\\u7ec4 *nums1* \\u548c *nums2*\\uff0c\\u8bf7\\u4f60\\u5c06 *nums2* \\u5408\\u5e76\\u5230 *nums1* \\u4e2d*\\uff0c*\\u4f7f *nums1* \\u6210\\u4e3a\\u4e00\\u4e2a\\u6709\\u5e8f\\u6570\\u7ec4\\u3002\\n\\n \\n\\n**\\u8bf4\\u660e:**\\n\\n- \\u521d\\u59cb\\u5316 *nums1* \\u548c *nums2* \\u7684\\u5143\\u7d20\\u6570\\u91cf\\u5206\\u522b\\u4e3a *m* \\u548c *n* \\u3002\\n- \\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe *nums1* \\u6709\\u8db3\\u591f\\u7684\\u7a7a\\u95f4\\uff08\\u7a7a\\u95f4\\u5927\\u5c0f\\u5927\\u4e8e\\u6216\\u7b49\\u4e8e *m + n*\\uff09\\u6765\\u4fdd\\u5b58 *nums2* \\u4e2d\\u7684\\u5143\\u7d20\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165:\\nnums1 = [1,2,3,0,0,0], m = 3\\nnums2 = [2,5,6],       n = 3\\n\\n\\u8f93\\u51fa: [1,2,2,3,5,6]\\n```\\n\\n\"}]}','green','2020-08-12 12:11:15'),(14,'87. 扰乱字符串','给定一个字符串 *s1*，我们可以把它递归地分割成两个非空子字符串，从而将其表示为二叉树。\n\n下图是字符串 *s1* = `\"great\"` 的一种可能的表示形式。\n\n```\n     great\n    /       \\\n  gr      eat\n / \\        /  \\\ng   r    e   at\n               / \\\n              a   t\n```\n\n在扰乱这个字符串的过程中，我们可以挑选任何一个非叶节点，然后交换它的两个子节点。\n\n例如，如果我们挑选非叶节点 `\"gr\"` ，交换它的两个子节点，将会产生扰乱字符串 `\"rgeat\"` 。\n\n```\n    rgeat\n   /       \\\n  rg     eat\n / \\       /  \\\nr   g   e   at\n              / \\\n             a   t\n```\n\n我们将 `\"rgeat”` 称作 `\"great\"` 的一个扰乱字符串。\n\n同样地，如果我们继续交换节点 `\"eat\"` 和 `\"at\"` 的子节点，将会产生另一个新的扰乱字符串 `\"rgtae\"` 。\n\n```\n    rgtae\n   /       \\\n  rg     tae\n / \\      /  \\\nr   g  ta   e\n        / \\\n       t   a\n```\n\n我们将 `\"rgtae”` 称作 `\"great\"` 的一个扰乱字符串。\n\n给出两个长度相等的字符串 *s1* 和 *s2*，判断 *s2* 是否是 *s1* 的扰乱字符串。\n\n**示例 1:**\n\n```\n输入: s1 = \"great\", s2 = \"rgeat\"\n输出: true\n```\n\n**示例 2:**\n\n```\n输入: s1 = \"abcde\", s2 = \"caebd\"\n输出: false\n```\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32 *s1*\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u628a\\u5b83\\u9012\\u5f52\\u5730\\u5206\\u5272\\u6210\\u4e24\\u4e2a\\u975e\\u7a7a\\u5b50\\u5b57\\u7b26\\u4e32\\uff0c\\u4ece\\u800c\\u5c06\\u5176\\u8868\\u793a\\u4e3a\\u4e8c\\u53c9\\u6811\\u3002\\n\\n\\u4e0b\\u56fe\\u662f\\u5b57\\u7b26\\u4e32 *s1* = `\\\"great\\\"` \\u7684\\u4e00\\u79cd\\u53ef\\u80fd\\u7684\\u8868\\u793a\\u5f62\\u5f0f\\u3002\\n\\n```\\n     great\\n    /       \\\\\\n  gr      eat\\n / \\\\        /  \\\\\\ng   r    e   at\\n               / \\\\\\n              a   t\\n```\\n\\n\\u5728\\u6270\\u4e71\\u8fd9\\u4e2a\\u5b57\\u7b26\\u4e32\\u7684\\u8fc7\\u7a0b\\u4e2d\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u6311\\u9009\\u4efb\\u4f55\\u4e00\\u4e2a\\u975e\\u53f6\\u8282\\u70b9\\uff0c\\u7136\\u540e\\u4ea4\\u6362\\u5b83\\u7684\\u4e24\\u4e2a\\u5b50\\u8282\\u70b9\\u3002\\n\\n\\u4f8b\\u5982\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u6311\\u9009\\u975e\\u53f6\\u8282\\u70b9 `\\\"gr\\\"` \\uff0c\\u4ea4\\u6362\\u5b83\\u7684\\u4e24\\u4e2a\\u5b50\\u8282\\u70b9\\uff0c\\u5c06\\u4f1a\\u4ea7\\u751f\\u6270\\u4e71\\u5b57\\u7b26\\u4e32 `\\\"rgeat\\\"` \\u3002\\n\\n```\\n    rgeat\\n   /       \\\\\\n  rg     eat\\n / \\\\       /  \\\\\\nr   g   e   at\\n              / \\\\\\n             a   t\\n```\\n\\n\\u6211\\u4eec\\u5c06 `\\\"rgeat\\u201d` \\u79f0\\u4f5c `\\\"great\\\"` \\u7684\\u4e00\\u4e2a\\u6270\\u4e71\\u5b57\\u7b26\\u4e32\\u3002\\n\\n\\u540c\\u6837\\u5730\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7ee7\\u7eed\\u4ea4\\u6362\\u8282\\u70b9 `\\\"eat\\\"` \\u548c `\\\"at\\\"` \\u7684\\u5b50\\u8282\\u70b9\\uff0c\\u5c06\\u4f1a\\u4ea7\\u751f\\u53e6\\u4e00\\u4e2a\\u65b0\\u7684\\u6270\\u4e71\\u5b57\\u7b26\\u4e32 `\\\"rgtae\\\"` \\u3002\\n\\n```\\n    rgtae\\n   /       \\\\\\n  rg     tae\\n / \\\\      /  \\\\\\nr   g  ta   e\\n        / \\\\\\n       t   a\\n```\\n\\n\\u6211\\u4eec\\u5c06 `\\\"rgtae\\u201d` \\u79f0\\u4f5c `\\\"great\\\"` \\u7684\\u4e00\\u4e2a\\u6270\\u4e71\\u5b57\\u7b26\\u4e32\\u3002\\n\\n\\u7ed9\\u51fa\\u4e24\\u4e2a\\u957f\\u5ea6\\u76f8\\u7b49\\u7684\\u5b57\\u7b26\\u4e32 *s1* \\u548c *s2*\\uff0c\\u5224\\u65ad *s2* \\u662f\\u5426\\u662f *s1* \\u7684\\u6270\\u4e71\\u5b57\\u7b26\\u4e32\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: s1 = \\\"great\\\", s2 = \\\"rgeat\\\"\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: s1 = \\\"abcde\\\", s2 = \\\"caebd\\\"\\n\\u8f93\\u51fa: false\\n```\\n\\n\\n\"}]}','red','2020-08-12 12:13:30'),(15,'86. 分隔链表','给定一个链表和一个特定值 *x*，对链表进行分隔，使得所有小于 *x* 的节点都在大于或等于 *x* 的节点之前。\n\n你应当保留两个分区中每个节点的初始相对位置。\n\n**示例:**\n\n```\n输入: head = 1->4->3->2->5->2, x = 3\n输出: 1->2->2->4->3->5\n```\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u94fe\\u8868\\u548c\\u4e00\\u4e2a\\u7279\\u5b9a\\u503c *x*\\uff0c\\u5bf9\\u94fe\\u8868\\u8fdb\\u884c\\u5206\\u9694\\uff0c\\u4f7f\\u5f97\\u6240\\u6709\\u5c0f\\u4e8e *x* \\u7684\\u8282\\u70b9\\u90fd\\u5728\\u5927\\u4e8e\\u6216\\u7b49\\u4e8e *x* \\u7684\\u8282\\u70b9\\u4e4b\\u524d\\u3002\\n\\n\\u4f60\\u5e94\\u5f53\\u4fdd\\u7559\\u4e24\\u4e2a\\u5206\\u533a\\u4e2d\\u6bcf\\u4e2a\\u8282\\u70b9\\u7684\\u521d\\u59cb\\u76f8\\u5bf9\\u4f4d\\u7f6e\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: head = 1->4->3->2->5->2, x = 3\\n\\u8f93\\u51fa: 1->2->2->4->3->5\\n```\\n\"}]}','yellow','2020-08-12 12:13:43'),(16,'85. 最大矩形','给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。\n\n**示例:**\n\n```\n输入:\n[\n  [\"1\",\"0\",\"1\",\"0\",\"0\"],\n  [\"1\",\"0\",\"1\",\"1\",\"1\"],\n  [\"1\",\"1\",\"1\",\"1\",\"1\"],\n  [\"1\",\"0\",\"0\",\"1\",\"0\"]\n]\n输出: 6\n```\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u4ec5\\u5305\\u542b 0 \\u548c 1 \\u7684\\u4e8c\\u7ef4\\u4e8c\\u8fdb\\u5236\\u77e9\\u9635\\uff0c\\u627e\\u51fa\\u53ea\\u5305\\u542b 1 \\u7684\\u6700\\u5927\\u77e9\\u5f62\\uff0c\\u5e76\\u8fd4\\u56de\\u5176\\u9762\\u79ef\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165:\\n[\\n  [\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\"],\\n  [\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\"],\\n  [\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\"],\\n  [\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\"]\\n]\\n\\u8f93\\u51fa: 6\\n```\\n\"}]}','red','2020-08-12 12:14:01'),(17,'84. 柱状图中最大的矩形','给定 *n* 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。\n\n求在该柱状图中，能够勾勒出来的矩形的最大面积。\n\n \n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png)\n\n以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 `[2,1,5,6,2,3]`。\n\n \n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png)\n\n图中阴影部分为所能勾勒出的最大矩形面积，其面积为 `10` 个单位。\n\n \n\n**示例:**\n\n```\n输入: [2,1,5,6,2,3]\n输出: 10\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a *n* \\u4e2a\\u975e\\u8d1f\\u6574\\u6570\\uff0c\\u7528\\u6765\\u8868\\u793a\\u67f1\\u72b6\\u56fe\\u4e2d\\u5404\\u4e2a\\u67f1\\u5b50\\u7684\\u9ad8\\u5ea6\\u3002\\u6bcf\\u4e2a\\u67f1\\u5b50\\u5f7c\\u6b64\\u76f8\\u90bb\\uff0c\\u4e14\\u5bbd\\u5ea6\\u4e3a 1 \\u3002\\n\\n\\u6c42\\u5728\\u8be5\\u67f1\\u72b6\\u56fe\\u4e2d\\uff0c\\u80fd\\u591f\\u52fe\\u52d2\\u51fa\\u6765\\u7684\\u77e9\\u5f62\\u7684\\u6700\\u5927\\u9762\\u79ef\\u3002\\n\\n \\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png)\\n\\n\\u4ee5\\u4e0a\\u662f\\u67f1\\u72b6\\u56fe\\u7684\\u793a\\u4f8b\\uff0c\\u5176\\u4e2d\\u6bcf\\u4e2a\\u67f1\\u5b50\\u7684\\u5bbd\\u5ea6\\u4e3a 1\\uff0c\\u7ed9\\u5b9a\\u7684\\u9ad8\\u5ea6\\u4e3a `[2,1,5,6,2,3]`\\u3002\\n\\n \\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png)\\n\\n\\u56fe\\u4e2d\\u9634\\u5f71\\u90e8\\u5206\\u4e3a\\u6240\\u80fd\\u52fe\\u52d2\\u51fa\\u7684\\u6700\\u5927\\u77e9\\u5f62\\u9762\\u79ef\\uff0c\\u5176\\u9762\\u79ef\\u4e3a `10` \\u4e2a\\u5355\\u4f4d\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [2,1,5,6,2,3]\\n\\u8f93\\u51fa: 10\\n```\\n\\n\"}]}','red','2020-08-12 12:15:09'),(18,'83. 删除排序链表中的重复元素','\n给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。\n\n**示例 1:**\n\n```\n输入: 1->1->2\n输出: 1->2\n```\n\n**示例 2:**\n\n```\n输入: 1->1->2->3->3\n输出: 1->2->3\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6392\\u5e8f\\u94fe\\u8868\\uff0c\\u5220\\u9664\\u6240\\u6709\\u91cd\\u590d\\u7684\\u5143\\u7d20\\uff0c\\u4f7f\\u5f97\\u6bcf\\u4e2a\\u5143\\u7d20\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 1->1->2\\n\\u8f93\\u51fa: 1->2\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 1->1->2->3->3\\n\\u8f93\\u51fa: 1->2->3\\n```\\n\\n\"}]}','green','2020-08-12 12:16:42'),(19,'82. 删除排序链表中的重复元素 II','给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 *没有重复出现* 的数字。\n\n**示例 1:**\n\n```\n输入: 1->2->3->3->4->4->5\n输出: 1->2->5\n```\n\n**示例 2:**\n\n```\n输入: 1->1->1->2->3\n输出: 2->3\n```\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6392\\u5e8f\\u94fe\\u8868\\uff0c\\u5220\\u9664\\u6240\\u6709\\u542b\\u6709\\u91cd\\u590d\\u6570\\u5b57\\u7684\\u8282\\u70b9\\uff0c\\u53ea\\u4fdd\\u7559\\u539f\\u59cb\\u94fe\\u8868\\u4e2d *\\u6ca1\\u6709\\u91cd\\u590d\\u51fa\\u73b0* \\u7684\\u6570\\u5b57\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 1->2->3->3->4->4->5\\n\\u8f93\\u51fa: 1->2->5\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 1->1->1->2->3\\n\\u8f93\\u51fa: 2->3\\n```\\n\"}]}','yellow','2020-08-12 12:18:00'),(20,'81. 搜索旋转排序数组 II','假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n\n( 例如，数组 `[0,0,1,2,2,5,6]` 可能变为 `[2,5,6,0,0,1,2]` )。\n\n编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 `true`，否则返回 `false`。\n\n**示例 1:**\n\n```\n输入: nums = [2,5,6,0,0,1,2], target = 0\n输出: true\n```\n\n**示例 2:**\n\n```\n输入: nums = [2,5,6,0,0,1,2], target = 3\n输出: false\n```\n\n**进阶:**\n\n- 这是 [搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/) 的延伸题目，本题中的 `nums` 可能包含重复元素。\n- 这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u5047\\u8bbe\\u6309\\u7167\\u5347\\u5e8f\\u6392\\u5e8f\\u7684\\u6570\\u7ec4\\u5728\\u9884\\u5148\\u672a\\u77e5\\u7684\\u67d0\\u4e2a\\u70b9\\u4e0a\\u8fdb\\u884c\\u4e86\\u65cb\\u8f6c\\u3002\\n\\n( \\u4f8b\\u5982\\uff0c\\u6570\\u7ec4 `[0,0,1,2,2,5,6]` \\u53ef\\u80fd\\u53d8\\u4e3a `[2,5,6,0,0,1,2]` )\\u3002\\n\\n\\u7f16\\u5199\\u4e00\\u4e2a\\u51fd\\u6570\\u6765\\u5224\\u65ad\\u7ed9\\u5b9a\\u7684\\u76ee\\u6807\\u503c\\u662f\\u5426\\u5b58\\u5728\\u4e8e\\u6570\\u7ec4\\u4e2d\\u3002\\u82e5\\u5b58\\u5728\\u8fd4\\u56de `true`\\uff0c\\u5426\\u5219\\u8fd4\\u56de `false`\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: nums = [2,5,6,0,0,1,2], target = 0\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: nums = [2,5,6,0,0,1,2], target = 3\\n\\u8f93\\u51fa: false\\n```\\n\\n**\\u8fdb\\u9636:**\\n\\n- \\u8fd9\\u662f [\\u641c\\u7d22\\u65cb\\u8f6c\\u6392\\u5e8f\\u6570\\u7ec4](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/) \\u7684\\u5ef6\\u4f38\\u9898\\u76ee\\uff0c\\u672c\\u9898\\u4e2d\\u7684 `nums` \\u53ef\\u80fd\\u5305\\u542b\\u91cd\\u590d\\u5143\\u7d20\\u3002\\n- \\u8fd9\\u4f1a\\u5f71\\u54cd\\u5230\\u7a0b\\u5e8f\\u7684\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u5417\\uff1f\\u4f1a\\u6709\\u600e\\u6837\\u7684\\u5f71\\u54cd\\uff0c\\u4e3a\\u4ec0\\u4e48\\uff1f\\n\\n\"}]}','yellow','2020-08-12 12:18:44'),(21,'80. 删除排序数组中的重复项 II','给定一个排序数组，你需要在**[原地](http://baike.baidu.com/item/原地算法)**删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须在**[原地](https://baike.baidu.com/item/原地算法)修改输入数组**并在使用 O(1) 额外空间的条件下完成。\n\n**示例 1:**\n\n```\n给定 nums = [1,1,1,2,2,3],\n\n函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n**示例 2:**\n\n```\n给定 nums = [0,0,1,1,1,1,2,3,3],\n\n函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n**说明:**\n\n为什么返回数值是整数，但输出的答案是数组呢?\n\n请注意，输入数组是以**“引用”**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n\n你可以想象内部操作如下:\n\n```\n// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6392\\u5e8f\\u6570\\u7ec4\\uff0c\\u4f60\\u9700\\u8981\\u5728**[\\u539f\\u5730](http://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)**\\u5220\\u9664\\u91cd\\u590d\\u51fa\\u73b0\\u7684\\u5143\\u7d20\\uff0c\\u4f7f\\u5f97\\u6bcf\\u4e2a\\u5143\\u7d20\\u6700\\u591a\\u51fa\\u73b0\\u4e24\\u6b21\\uff0c\\u8fd4\\u56de\\u79fb\\u9664\\u540e\\u6570\\u7ec4\\u7684\\u65b0\\u957f\\u5ea6\\u3002\\n\\n\\u4e0d\\u8981\\u4f7f\\u7528\\u989d\\u5916\\u7684\\u6570\\u7ec4\\u7a7a\\u95f4\\uff0c\\u4f60\\u5fc5\\u987b\\u5728**[\\u539f\\u5730](https://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4**\\u5e76\\u5728\\u4f7f\\u7528 O(1) \\u989d\\u5916\\u7a7a\\u95f4\\u7684\\u6761\\u4ef6\\u4e0b\\u5b8c\\u6210\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u7ed9\\u5b9a nums = [1,1,1,2,2,3],\\n\\n\\u51fd\\u6570\\u5e94\\u8fd4\\u56de\\u65b0\\u957f\\u5ea6 length = 5, \\u5e76\\u4e14\\u539f\\u6570\\u7ec4\\u7684\\u524d\\u4e94\\u4e2a\\u5143\\u7d20\\u88ab\\u4fee\\u6539\\u4e3a 1, 1, 2, 2, 3 \\u3002\\n\\n\\u4f60\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u6570\\u7ec4\\u4e2d\\u8d85\\u51fa\\u65b0\\u957f\\u5ea6\\u540e\\u9762\\u7684\\u5143\\u7d20\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u7ed9\\u5b9a nums = [0,0,1,1,1,1,2,3,3],\\n\\n\\u51fd\\u6570\\u5e94\\u8fd4\\u56de\\u65b0\\u957f\\u5ea6 length = 7, \\u5e76\\u4e14\\u539f\\u6570\\u7ec4\\u7684\\u524d\\u4e94\\u4e2a\\u5143\\u7d20\\u88ab\\u4fee\\u6539\\u4e3a 0, 0, 1, 1, 2, 3, 3 \\u3002\\n\\n\\u4f60\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u6570\\u7ec4\\u4e2d\\u8d85\\u51fa\\u65b0\\u957f\\u5ea6\\u540e\\u9762\\u7684\\u5143\\u7d20\\u3002\\n```\\n\\n**\\u8bf4\\u660e:**\\n\\n\\u4e3a\\u4ec0\\u4e48\\u8fd4\\u56de\\u6570\\u503c\\u662f\\u6574\\u6570\\uff0c\\u4f46\\u8f93\\u51fa\\u7684\\u7b54\\u6848\\u662f\\u6570\\u7ec4\\u5462?\\n\\n\\u8bf7\\u6ce8\\u610f\\uff0c\\u8f93\\u5165\\u6570\\u7ec4\\u662f\\u4ee5**\\u201c\\u5f15\\u7528\\u201d**\\u65b9\\u5f0f\\u4f20\\u9012\\u7684\\uff0c\\u8fd9\\u610f\\u5473\\u7740\\u5728\\u51fd\\u6570\\u91cc\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4\\u5bf9\\u4e8e\\u8c03\\u7528\\u8005\\u662f\\u53ef\\u89c1\\u7684\\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u60f3\\u8c61\\u5185\\u90e8\\u64cd\\u4f5c\\u5982\\u4e0b:\\n\\n```\\n// nums \\u662f\\u4ee5\\u201c\\u5f15\\u7528\\u201d\\u65b9\\u5f0f\\u4f20\\u9012\\u7684\\u3002\\u4e5f\\u5c31\\u662f\\u8bf4\\uff0c\\u4e0d\\u5bf9\\u5b9e\\u53c2\\u505a\\u4efb\\u4f55\\u62f7\\u8d1d\\nint len = removeDuplicates(nums);\\n\\n// \\u5728\\u51fd\\u6570\\u91cc\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4\\u5bf9\\u4e8e\\u8c03\\u7528\\u8005\\u662f\\u53ef\\u89c1\\u7684\\u3002\\n// \\u6839\\u636e\\u4f60\\u7684\\u51fd\\u6570\\u8fd4\\u56de\\u7684\\u957f\\u5ea6, \\u5b83\\u4f1a\\u6253\\u5370\\u51fa\\u6570\\u7ec4\\u4e2d\\u8be5\\u957f\\u5ea6\\u8303\\u56f4\\u5185\\u7684\\u6240\\u6709\\u5143\\u7d20\\u3002\\nfor (int i = 0; i < len; i++) {\\n    print(nums[i]);\\n}\\n```\\n\\n\"}]}','yellow','2020-08-12 12:25:10'),(22,'79. 单词搜索','给定一个二维网格和一个单词，找出该单词是否存在于网格中。\n\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\n\n \n\n**示例:**\n\n```\nboard =\n[\n  [\'A\',\'B\',\'C\',\'E\'],\n  [\'S\',\'F\',\'C\',\'S\'],\n  [\'A\',\'D\',\'E\',\'E\']\n]\n\n给定 word = \"ABCCED\", 返回 true\n给定 word = \"SEE\", 返回 true\n给定 word = \"ABCB\", 返回 false\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u4e8c\\u7ef4\\u7f51\\u683c\\u548c\\u4e00\\u4e2a\\u5355\\u8bcd\\uff0c\\u627e\\u51fa\\u8be5\\u5355\\u8bcd\\u662f\\u5426\\u5b58\\u5728\\u4e8e\\u7f51\\u683c\\u4e2d\\u3002\\n\\n\\u5355\\u8bcd\\u5fc5\\u987b\\u6309\\u7167\\u5b57\\u6bcd\\u987a\\u5e8f\\uff0c\\u901a\\u8fc7\\u76f8\\u90bb\\u7684\\u5355\\u5143\\u683c\\u5185\\u7684\\u5b57\\u6bcd\\u6784\\u6210\\uff0c\\u5176\\u4e2d\\u201c\\u76f8\\u90bb\\u201d\\u5355\\u5143\\u683c\\u662f\\u90a3\\u4e9b\\u6c34\\u5e73\\u76f8\\u90bb\\u6216\\u5782\\u76f4\\u76f8\\u90bb\\u7684\\u5355\\u5143\\u683c\\u3002\\u540c\\u4e00\\u4e2a\\u5355\\u5143\\u683c\\u5185\\u7684\\u5b57\\u6bcd\\u4e0d\\u5141\\u8bb8\\u88ab\\u91cd\\u590d\\u4f7f\\u7528\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\nboard =\\n[\\n  [\'A\',\'B\',\'C\',\'E\'],\\n  [\'S\',\'F\',\'C\',\'S\'],\\n  [\'A\',\'D\',\'E\',\'E\']\\n]\\n\\n\\u7ed9\\u5b9a word = \\\"ABCCED\\\", \\u8fd4\\u56de true\\n\\u7ed9\\u5b9a word = \\\"SEE\\\", \\u8fd4\\u56de true\\n\\u7ed9\\u5b9a word = \\\"ABCB\\\", \\u8fd4\\u56de false\\n```\\n\\n\"}]}','yellow','2020-08-12 12:25:27'),(23,'78. 子集','给定一组**不含重复元素**的整数数组 *nums*，返回该数组所有可能的子集（幂集）。\n\n**说明：**解集不能包含重复的子集。\n\n**示例:**\n\n```\n输入: nums = [1,2,3]\n输出:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u7ec4**\\u4e0d\\u542b\\u91cd\\u590d\\u5143\\u7d20**\\u7684\\u6574\\u6570\\u6570\\u7ec4 *nums*\\uff0c\\u8fd4\\u56de\\u8be5\\u6570\\u7ec4\\u6240\\u6709\\u53ef\\u80fd\\u7684\\u5b50\\u96c6\\uff08\\u5e42\\u96c6\\uff09\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\u89e3\\u96c6\\u4e0d\\u80fd\\u5305\\u542b\\u91cd\\u590d\\u7684\\u5b50\\u96c6\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: nums = [1,2,3]\\n\\u8f93\\u51fa:\\n[\\n  [3],\\n  [1],\\n  [2],\\n  [1,2,3],\\n  [1,3],\\n  [2,3],\\n  [1,2],\\n  []\\n]\\n```\\n\\n\"}]}','yellow','2020-08-12 12:25:38'),(24,'77. 组合','给定两个整数 *n* 和 *k*，返回 1 ... *n* 中所有可能的 *k* 个数的组合。\n\n**示例:**\n\n```\n输入: n = 4, k = 2\n输出:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e24\\u4e2a\\u6574\\u6570 *n* \\u548c *k*\\uff0c\\u8fd4\\u56de 1 ... *n* \\u4e2d\\u6240\\u6709\\u53ef\\u80fd\\u7684 *k* \\u4e2a\\u6570\\u7684\\u7ec4\\u5408\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: n = 4, k = 2\\n\\u8f93\\u51fa:\\n[\\n  [2,4],\\n  [3,4],\\n  [2,3],\\n  [1,2],\\n  [1,3],\\n  [1,4],\\n]\\n```\\n\\n\"}]}','yellow','2020-08-12 12:26:03'),(25,'76. 最小覆盖子串','给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。\n\n**示例：**\n\n```\n输入: S = \"ADOBECODEBANC\", T = \"ABC\"\n输出: \"BANC\"\n```\n\n**说明：**\n\n- 如果 S 中不存这样的子串，则返回空字符串 `\"\"`。\n- 如果 S 中存在这样的子串，我们保证它是唯一的答案。\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u4f60\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32 S\\u3001\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32 T\\uff0c\\u8bf7\\u5728\\u5b57\\u7b26\\u4e32 S \\u91cc\\u9762\\u627e\\u51fa\\uff1a\\u5305\\u542b T \\u6240\\u6709\\u5b57\\u7b26\\u7684\\u6700\\u5c0f\\u5b50\\u4e32\\u3002\\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u8f93\\u5165: S = \\\"ADOBECODEBANC\\\", T = \\\"ABC\\\"\\n\\u8f93\\u51fa: \\\"BANC\\\"\\n```\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n- \\u5982\\u679c S \\u4e2d\\u4e0d\\u5b58\\u8fd9\\u6837\\u7684\\u5b50\\u4e32\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32 `\\\"\\\"`\\u3002\\n- \\u5982\\u679c S \\u4e2d\\u5b58\\u5728\\u8fd9\\u6837\\u7684\\u5b50\\u4e32\\uff0c\\u6211\\u4eec\\u4fdd\\u8bc1\\u5b83\\u662f\\u552f\\u4e00\\u7684\\u7b54\\u6848\\u3002\\n\\n\\n\"}]}','red','2020-08-12 12:26:25'),(26,'75. 颜色分类','给定一个包含红色、白色和蓝色，一共 *n* 个元素的数组，**[原地](https://baike.baidu.com/item/原地算法)**对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。\n\n此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。\n\n**注意:**\n不能使用代码库中的排序函数来解决这道题。\n\n**示例:**\n\n```\n输入: [2,0,2,1,1,0]\n输出: [0,0,1,1,2,2]\n```\n\n**进阶：**\n\n- 一个直观的解决方案是使用计数排序的两趟扫描算法。\n  首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。\n- 你能想出一个仅使用常数空间的一趟扫描算法吗？\n\n\n','<p>给定一个包含红色、白色和蓝色，一共 *n* 个元素的数组，**[原地](https://baike.baidu.com/item/原地算法)**对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p><br></p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><p><br></p><p>**注意:**</p><p>不能使用代码库中的排序函数来解决这道题。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: [2,0,2,1,1,0]</p><p>输出: [0,0,1,1,2,2]</p><p>```</p><p><br></p><p>**进阶：**</p><p><br></p><p>- 一个直观的解决方案是使用计数排序的两趟扫描算法。</p><p>  首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。</p><p>- 你能想出一个仅使用常数空间的一趟扫描算法吗？</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5305\\u542b\\u7ea2\\u8272\\u3001\\u767d\\u8272\\u548c\\u84dd\\u8272\\uff0c\\u4e00\\u5171 *n* \\u4e2a\\u5143\\u7d20\\u7684\\u6570\\u7ec4\\uff0c**[\\u539f\\u5730](https://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)**\\u5bf9\\u5b83\\u4eec\\u8fdb\\u884c\\u6392\\u5e8f\\uff0c\\u4f7f\\u5f97\\u76f8\\u540c\\u989c\\u8272\\u7684\\u5143\\u7d20\\u76f8\\u90bb\\uff0c\\u5e76\\u6309\\u7167\\u7ea2\\u8272\\u3001\\u767d\\u8272\\u3001\\u84dd\\u8272\\u987a\\u5e8f\\u6392\\u5217\\u3002\\n\\n\\u6b64\\u9898\\u4e2d\\uff0c\\u6211\\u4eec\\u4f7f\\u7528\\u6574\\u6570 0\\u3001 1 \\u548c 2 \\u5206\\u522b\\u8868\\u793a\\u7ea2\\u8272\\u3001\\u767d\\u8272\\u548c\\u84dd\\u8272\\u3002\\n\\n**\\u6ce8\\u610f:**\\n\\u4e0d\\u80fd\\u4f7f\\u7528\\u4ee3\\u7801\\u5e93\\u4e2d\\u7684\\u6392\\u5e8f\\u51fd\\u6570\\u6765\\u89e3\\u51b3\\u8fd9\\u9053\\u9898\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [2,0,2,1,1,0]\\n\\u8f93\\u51fa: [0,0,1,1,2,2]\\n```\\n\\n**\\u8fdb\\u9636\\uff1a**\\n\\n- \\u4e00\\u4e2a\\u76f4\\u89c2\\u7684\\u89e3\\u51b3\\u65b9\\u6848\\u662f\\u4f7f\\u7528\\u8ba1\\u6570\\u6392\\u5e8f\\u7684\\u4e24\\u8d9f\\u626b\\u63cf\\u7b97\\u6cd5\\u3002\\n  \\u9996\\u5148\\uff0c\\u8fed\\u4ee3\\u8ba1\\u7b97\\u51fa0\\u30011 \\u548c 2 \\u5143\\u7d20\\u7684\\u4e2a\\u6570\\uff0c\\u7136\\u540e\\u6309\\u71670\\u30011\\u30012\\u7684\\u6392\\u5e8f\\uff0c\\u91cd\\u5199\\u5f53\\u524d\\u6570\\u7ec4\\u3002\\n- \\u4f60\\u80fd\\u60f3\\u51fa\\u4e00\\u4e2a\\u4ec5\\u4f7f\\u7528\\u5e38\\u6570\\u7a7a\\u95f4\\u7684\\u4e00\\u8d9f\\u626b\\u63cf\\u7b97\\u6cd5\\u5417\\uff1f\\n\\n\\n\"}]}','yellow','2020-08-12 12:27:26'),(27,'74. 搜索二维矩阵','编写一个高效的算法来判断 *m* x *n* 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n\n- 每行中的整数从左到右按升序排列。\n- 每行的第一个整数大于前一行的最后一个整数。\n\n**示例 1:**\n\n```\n输入:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n输出: true\n```\n\n**示例 2:**\n\n```\n输入:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n输出: false\n```\n\n','<p>编写一个高效的算法来判断 *m* x *n* 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><p><br></p><p>- 每行中的整数从左到右按升序排列。</p><p>- 每行的第一个整数大于前一行的最后一个整数。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入:</p><p>matrix = [</p><p>  [1,   3,  5,  7],</p><p>  [10, 11, 16, 20],</p><p>  [23, 30, 34, 50]</p><p>]</p><p>target = 3</p><p>输出: true</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入:</p><p>matrix = [</p><p>  [1,   3,  5,  7],</p><p>  [10, 11, 16, 20],</p><p>  [23, 30, 34, 50]</p><p>]</p><p>target = 13</p><p>输出: false</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7f16\\u5199\\u4e00\\u4e2a\\u9ad8\\u6548\\u7684\\u7b97\\u6cd5\\u6765\\u5224\\u65ad *m* x *n* \\u77e9\\u9635\\u4e2d\\uff0c\\u662f\\u5426\\u5b58\\u5728\\u4e00\\u4e2a\\u76ee\\u6807\\u503c\\u3002\\u8be5\\u77e9\\u9635\\u5177\\u6709\\u5982\\u4e0b\\u7279\\u6027\\uff1a\\n\\n- \\u6bcf\\u884c\\u4e2d\\u7684\\u6574\\u6570\\u4ece\\u5de6\\u5230\\u53f3\\u6309\\u5347\\u5e8f\\u6392\\u5217\\u3002\\n- \\u6bcf\\u884c\\u7684\\u7b2c\\u4e00\\u4e2a\\u6574\\u6570\\u5927\\u4e8e\\u524d\\u4e00\\u884c\\u7684\\u6700\\u540e\\u4e00\\u4e2a\\u6574\\u6570\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\nmatrix = [\\n  [1,   3,  5,  7],\\n  [10, 11, 16, 20],\\n  [23, 30, 34, 50]\\n]\\ntarget = 3\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165:\\nmatrix = [\\n  [1,   3,  5,  7],\\n  [10, 11, 16, 20],\\n  [23, 30, 34, 50]\\n]\\ntarget = 13\\n\\u8f93\\u51fa: false\\n```\\n\\n\"}]}','yellow','2020-08-12 12:27:46'),(28,'73. 矩阵置零','给定一个 *m* x *n* 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用**[原地](http://baike.baidu.com/item/原地算法)**算法**。**\n\n**示例 1:**\n\n```\n输入: \n[\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\n输出: \n[\n  [1,0,1],\n  [0,0,0],\n  [1,0,1]\n]\n```\n\n**示例 2:**\n\n```\n输入: \n[\n  [0,1,2,0],\n  [3,4,5,2],\n  [1,3,1,5]\n]\n输出: \n[\n  [0,0,0,0],\n  [0,4,5,0],\n  [0,3,1,0]\n]\n```\n\n**进阶:**\n\n- 一个直接的解决方案是使用  O(*m**n*) 的额外空间，但这并不是一个好的解决方案。\n- 一个简单的改进方案是使用 O(*m* + *n*) 的额外空间，但这仍然不是最好的解决方案。\n- 你能想出一个常数空间的解决方案吗？\n\n\n\n','<p>给定一个 *m* x *n* 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用**[原地](http://baike.baidu.com/item/原地算法)**算法**。**</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: </p><p>[</p><p>  [1,1,1],</p><p>  [1,0,1],</p><p>  [1,1,1]</p><p>]</p><p>输出: </p><p>[</p><p>  [1,0,1],</p><p>  [0,0,0],</p><p>  [1,0,1]</p><p>]</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: </p><p>[</p><p>  [0,1,2,0],</p><p>  [3,4,5,2],</p><p>  [1,3,1,5]</p><p>]</p><p>输出: </p><p>[</p><p>  [0,0,0,0],</p><p>  [0,4,5,0],</p><p>  [0,3,1,0]</p><p>]</p><p>```</p><p><br></p><p>**进阶:**</p><p><br></p><p>- 一个直接的解决方案是使用  O(*m**n*) 的额外空间，但这并不是一个好的解决方案。</p><p>- 一个简单的改进方案是使用 O(*m* + *n*) 的额外空间，但这仍然不是最好的解决方案。</p><p>- 你能想出一个常数空间的解决方案吗？</p><p><br></p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a *m* x *n* \\u7684\\u77e9\\u9635\\uff0c\\u5982\\u679c\\u4e00\\u4e2a\\u5143\\u7d20\\u4e3a 0\\uff0c\\u5219\\u5c06\\u5176\\u6240\\u5728\\u884c\\u548c\\u5217\\u7684\\u6240\\u6709\\u5143\\u7d20\\u90fd\\u8bbe\\u4e3a 0\\u3002\\u8bf7\\u4f7f\\u7528**[\\u539f\\u5730](http://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)**\\u7b97\\u6cd5**\\u3002**\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\n[\\n  [1,1,1],\\n  [1,0,1],\\n  [1,1,1]\\n]\\n\\u8f93\\u51fa: \\n[\\n  [1,0,1],\\n  [0,0,0],\\n  [1,0,1]\\n]\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\n[\\n  [0,1,2,0],\\n  [3,4,5,2],\\n  [1,3,1,5]\\n]\\n\\u8f93\\u51fa: \\n[\\n  [0,0,0,0],\\n  [0,4,5,0],\\n  [0,3,1,0]\\n]\\n```\\n\\n**\\u8fdb\\u9636:**\\n\\n- \\u4e00\\u4e2a\\u76f4\\u63a5\\u7684\\u89e3\\u51b3\\u65b9\\u6848\\u662f\\u4f7f\\u7528  O(*m**n*) \\u7684\\u989d\\u5916\\u7a7a\\u95f4\\uff0c\\u4f46\\u8fd9\\u5e76\\u4e0d\\u662f\\u4e00\\u4e2a\\u597d\\u7684\\u89e3\\u51b3\\u65b9\\u6848\\u3002\\n- \\u4e00\\u4e2a\\u7b80\\u5355\\u7684\\u6539\\u8fdb\\u65b9\\u6848\\u662f\\u4f7f\\u7528 O(*m* + *n*) \\u7684\\u989d\\u5916\\u7a7a\\u95f4\\uff0c\\u4f46\\u8fd9\\u4ecd\\u7136\\u4e0d\\u662f\\u6700\\u597d\\u7684\\u89e3\\u51b3\\u65b9\\u6848\\u3002\\n- \\u4f60\\u80fd\\u60f3\\u51fa\\u4e00\\u4e2a\\u5e38\\u6570\\u7a7a\\u95f4\\u7684\\u89e3\\u51b3\\u65b9\\u6848\\u5417\\uff1f\\n\\n\\n\\n\"}]}','yellow','2020-08-12 12:28:04'),(29,'72. 编辑距离','给你两个单词 *word1* 和 *word2*，请你计算出将 *word1* 转换成 *word2* 所使用的最少操作数 。\n\n你可以对一个单词进行如下三种操作：\n\n1. 插入一个字符\n2. 删除一个字符\n3. 替换一个字符\n\n \n\n**示例 1：**\n\n```\n输入：word1 = \"horse\", word2 = \"ros\"\n输出：3\n解释：\nhorse -> rorse (将 \'h\' 替换为 \'r\')\nrorse -> rose (删除 \'r\')\nrose -> ros (删除 \'e\')\n```\n\n**示例 2：**\n\n```\n输入：word1 = \"intention\", word2 = \"execution\"\n输出：5\n解释：\nintention -> inention (删除 \'t\')\ninention -> enention (将 \'i\' 替换为 \'e\')\nenention -> exention (将 \'n\' 替换为 \'x\')\nexention -> exection (将 \'n\' 替换为 \'c\')\nexection -> execution (插入 \'u\')\n```\n','<p>给你两个单词 *word1* 和 *word2*，请你计算出将 *word1* 转换成 *word2* 所使用的最少操作数 。</p><p><br></p><p>你可以对一个单词进行如下三种操作：</p><p><br></p><p>1. 插入一个字符</p><p>2. 删除一个字符</p><p>3. 替换一个字符</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：word1 = \"horse\", word2 = \"ros\"</p><p>输出：3</p><p>解释：</p><p>horse -&gt; rorse (将 \'h\' 替换为 \'r\')</p><p>rorse -&gt; rose (删除 \'r\')</p><p>rose -&gt; ros (删除 \'e\')</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：word1 = \"intention\", word2 = \"execution\"</p><p>输出：5</p><p>解释：</p><p>intention -&gt; inention (删除 \'t\')</p><p>inention -&gt; enention (将 \'i\' 替换为 \'e\')</p><p>enention -&gt; exention (将 \'n\' 替换为 \'x\')</p><p>exention -&gt; exection (将 \'n\' 替换为 \'c\')</p><p>exection -&gt; execution (插入 \'u\')</p><p>```</p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u4f60\\u4e24\\u4e2a\\u5355\\u8bcd *word1* \\u548c *word2*\\uff0c\\u8bf7\\u4f60\\u8ba1\\u7b97\\u51fa\\u5c06 *word1* \\u8f6c\\u6362\\u6210 *word2* \\u6240\\u4f7f\\u7528\\u7684\\u6700\\u5c11\\u64cd\\u4f5c\\u6570 \\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u5bf9\\u4e00\\u4e2a\\u5355\\u8bcd\\u8fdb\\u884c\\u5982\\u4e0b\\u4e09\\u79cd\\u64cd\\u4f5c\\uff1a\\n\\n1. \\u63d2\\u5165\\u4e00\\u4e2a\\u5b57\\u7b26\\n2. \\u5220\\u9664\\u4e00\\u4e2a\\u5b57\\u7b26\\n3. \\u66ff\\u6362\\u4e00\\u4e2a\\u5b57\\u7b26\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aword1 = \\\"horse\\\", word2 = \\\"ros\\\"\\n\\u8f93\\u51fa\\uff1a3\\n\\u89e3\\u91ca\\uff1a\\nhorse -> rorse (\\u5c06 \'h\' \\u66ff\\u6362\\u4e3a \'r\')\\nrorse -> rose (\\u5220\\u9664 \'r\')\\nrose -> ros (\\u5220\\u9664 \'e\')\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aword1 = \\\"intention\\\", word2 = \\\"execution\\\"\\n\\u8f93\\u51fa\\uff1a5\\n\\u89e3\\u91ca\\uff1a\\nintention -> inention (\\u5220\\u9664 \'t\')\\ninention -> enention (\\u5c06 \'i\' \\u66ff\\u6362\\u4e3a \'e\')\\nenention -> exention (\\u5c06 \'n\' \\u66ff\\u6362\\u4e3a \'x\')\\nexention -> exection (\\u5c06 \'n\' \\u66ff\\u6362\\u4e3a \'c\')\\nexection -> execution (\\u63d2\\u5165 \'u\')\\n```\\n\"}]}','red','2020-08-12 12:28:25'),(30,'71. 简化路径','以 Unix 风格给出一个文件的**绝对路径**，你需要简化它。或者换句话说，将其转换为规范路径。\n\n在 Unix 风格的文件系统中，一个点（`.`）表示当前目录本身；此外，两个点 （`..`） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：[Linux / Unix中的绝对路径 vs 相对路径](https://blog.csdn.net/u011327334/article/details/50355600)\n\n请注意，返回的规范路径必须始终以斜杠 `/` 开头，并且两个目录名之间必须只有一个斜杠 `/`。最后一个目录名（如果存在）**不能**以 `/` 结尾。此外，规范路径必须是表示绝对路径的**最短**字符串。\n\n \n\n**示例 1：**\n\n```\n输入：\"/home/\"\n输出：\"/home\"\n解释：注意，最后一个目录名后面没有斜杠。\n```\n\n**示例 2：**\n\n```\n输入：\"/../\"\n输出：\"/\"\n解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。\n```\n\n**示例 3：**\n\n```\n输入：\"/home//foo/\"\n输出：\"/home/foo\"\n解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。\n```\n\n**示例 4：**\n\n```\n输入：\"/a/./b/../../c/\"\n输出：\"/c\"\n```\n\n**示例 5：**\n\n```\n输入：\"/a/../../b/../c//.//\"\n输出：\"/c\"\n```\n\n**示例 6：**\n\n```\n输入：\"/a//b////c/d//././/..\"\n输出：\"/a/b/c\"\n```\n\n','<p>以 Unix 风格给出一个文件的**绝对路径**，你需要简化它。或者换句话说，将其转换为规范路径。</p><p><br></p><p>在 Unix 风格的文件系统中，一个点（`.`）表示当前目录本身；此外，两个点 （`..`） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：[Linux / Unix中的绝对路径 vs 相对路径](https://blog.csdn.net/u011327334/article/details/50355600)</p><p><br></p><p>请注意，返回的规范路径必须始终以斜杠 `/` 开头，并且两个目录名之间必须只有一个斜杠 `/`。最后一个目录名（如果存在）**不能**以 `/` 结尾。此外，规范路径必须是表示绝对路径的**最短**字符串。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：\"/home/\"</p><p>输出：\"/home\"</p><p>解释：注意，最后一个目录名后面没有斜杠。</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：\"/../\"</p><p>输出：\"/\"</p><p>解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。</p><p>```</p><p><br></p><p>**示例 3：**</p><p><br></p><p>```</p><p>输入：\"/home//foo/\"</p><p>输出：\"/home/foo\"</p><p>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</p><p>```</p><p><br></p><p>**示例 4：**</p><p><br></p><p>```</p><p>输入：\"/a/./b/../../c/\"</p><p>输出：\"/c\"</p><p>```</p><p><br></p><p>**示例 5：**</p><p><br></p><p>```</p><p>输入：\"/a/../../b/../c//.//\"</p><p>输出：\"/c\"</p><p>```</p><p><br></p><p>**示例 6：**</p><p><br></p><p>```</p><p>输入：\"/a//b////c/d//././/..\"</p><p>输出：\"/a/b/c\"</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u4ee5 Unix \\u98ce\\u683c\\u7ed9\\u51fa\\u4e00\\u4e2a\\u6587\\u4ef6\\u7684**\\u7edd\\u5bf9\\u8def\\u5f84**\\uff0c\\u4f60\\u9700\\u8981\\u7b80\\u5316\\u5b83\\u3002\\u6216\\u8005\\u6362\\u53e5\\u8bdd\\u8bf4\\uff0c\\u5c06\\u5176\\u8f6c\\u6362\\u4e3a\\u89c4\\u8303\\u8def\\u5f84\\u3002\\n\\n\\u5728 Unix \\u98ce\\u683c\\u7684\\u6587\\u4ef6\\u7cfb\\u7edf\\u4e2d\\uff0c\\u4e00\\u4e2a\\u70b9\\uff08`.`\\uff09\\u8868\\u793a\\u5f53\\u524d\\u76ee\\u5f55\\u672c\\u8eab\\uff1b\\u6b64\\u5916\\uff0c\\u4e24\\u4e2a\\u70b9 \\uff08`..`\\uff09 \\u8868\\u793a\\u5c06\\u76ee\\u5f55\\u5207\\u6362\\u5230\\u4e0a\\u4e00\\u7ea7\\uff08\\u6307\\u5411\\u7236\\u76ee\\u5f55\\uff09\\uff1b\\u4e24\\u8005\\u90fd\\u53ef\\u4ee5\\u662f\\u590d\\u6742\\u76f8\\u5bf9\\u8def\\u5f84\\u7684\\u7ec4\\u6210\\u90e8\\u5206\\u3002\\u66f4\\u591a\\u4fe1\\u606f\\u8bf7\\u53c2\\u9605\\uff1a[Linux / Unix\\u4e2d\\u7684\\u7edd\\u5bf9\\u8def\\u5f84 vs \\u76f8\\u5bf9\\u8def\\u5f84](https://blog.csdn.net/u011327334/article/details/50355600)\\n\\n\\u8bf7\\u6ce8\\u610f\\uff0c\\u8fd4\\u56de\\u7684\\u89c4\\u8303\\u8def\\u5f84\\u5fc5\\u987b\\u59cb\\u7ec8\\u4ee5\\u659c\\u6760 `/` \\u5f00\\u5934\\uff0c\\u5e76\\u4e14\\u4e24\\u4e2a\\u76ee\\u5f55\\u540d\\u4e4b\\u95f4\\u5fc5\\u987b\\u53ea\\u6709\\u4e00\\u4e2a\\u659c\\u6760 `/`\\u3002\\u6700\\u540e\\u4e00\\u4e2a\\u76ee\\u5f55\\u540d\\uff08\\u5982\\u679c\\u5b58\\u5728\\uff09**\\u4e0d\\u80fd**\\u4ee5 `/` \\u7ed3\\u5c3e\\u3002\\u6b64\\u5916\\uff0c\\u89c4\\u8303\\u8def\\u5f84\\u5fc5\\u987b\\u662f\\u8868\\u793a\\u7edd\\u5bf9\\u8def\\u5f84\\u7684**\\u6700\\u77ed**\\u5b57\\u7b26\\u4e32\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\\"/home/\\\"\\n\\u8f93\\u51fa\\uff1a\\\"/home\\\"\\n\\u89e3\\u91ca\\uff1a\\u6ce8\\u610f\\uff0c\\u6700\\u540e\\u4e00\\u4e2a\\u76ee\\u5f55\\u540d\\u540e\\u9762\\u6ca1\\u6709\\u659c\\u6760\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\\"/../\\\"\\n\\u8f93\\u51fa\\uff1a\\\"/\\\"\\n\\u89e3\\u91ca\\uff1a\\u4ece\\u6839\\u76ee\\u5f55\\u5411\\u4e0a\\u4e00\\u7ea7\\u662f\\u4e0d\\u53ef\\u884c\\u7684\\uff0c\\u56e0\\u4e3a\\u6839\\u662f\\u4f60\\u53ef\\u4ee5\\u5230\\u8fbe\\u7684\\u6700\\u9ad8\\u7ea7\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\\"/home//foo/\\\"\\n\\u8f93\\u51fa\\uff1a\\\"/home/foo\\\"\\n\\u89e3\\u91ca\\uff1a\\u5728\\u89c4\\u8303\\u8def\\u5f84\\u4e2d\\uff0c\\u591a\\u4e2a\\u8fde\\u7eed\\u659c\\u6760\\u9700\\u8981\\u7528\\u4e00\\u4e2a\\u659c\\u6760\\u66ff\\u6362\\u3002\\n```\\n\\n**\\u793a\\u4f8b 4\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\\"/a/./b/../../c/\\\"\\n\\u8f93\\u51fa\\uff1a\\\"/c\\\"\\n```\\n\\n**\\u793a\\u4f8b 5\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\\"/a/../../b/../c//.//\\\"\\n\\u8f93\\u51fa\\uff1a\\\"/c\\\"\\n```\\n\\n**\\u793a\\u4f8b 6\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\\"/a//b////c/d//././/..\\\"\\n\\u8f93\\u51fa\\uff1a\\\"/a/b/c\\\"\\n```\\n\\n\"}]}','yellow','2020-08-12 12:28:52'),(31,'70. 爬楼梯','假设你正在爬楼梯。需要 *n* 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n**注意：**给定 *n* 是一个正整数。\n\n**示例 1：**\n\n```\n输入： 2\n输出： 2\n解释： 有两种方法可以爬到楼顶。\n1.  1 阶 + 1 阶\n2.  2 阶\n```\n\n**示例 2：**\n\n```\n输入： 3\n输出： 3\n解释： 有三种方法可以爬到楼顶。\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n```\n','<p>假设你正在爬楼梯。需要 *n* 阶你才能到达楼顶。</p><p><br></p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><br></p><p>**注意：**给定 *n* 是一个正整数。</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入： 2</p><p>输出： 2</p><p>解释： 有两种方法可以爬到楼顶。</p><p>1.  1 阶 + 1 阶</p><p>2.  2 阶</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入： 3</p><p>输出： 3</p><p>解释： 有三种方法可以爬到楼顶。</p><p>1.  1 阶 + 1 阶 + 1 阶</p><p>2.  1 阶 + 2 阶</p><p>3.  2 阶 + 1 阶</p><p>```</p>','{\"ops\": [{\"insert\": \"\\u5047\\u8bbe\\u4f60\\u6b63\\u5728\\u722c\\u697c\\u68af\\u3002\\u9700\\u8981 *n* \\u9636\\u4f60\\u624d\\u80fd\\u5230\\u8fbe\\u697c\\u9876\\u3002\\n\\n\\u6bcf\\u6b21\\u4f60\\u53ef\\u4ee5\\u722c 1 \\u6216 2 \\u4e2a\\u53f0\\u9636\\u3002\\u4f60\\u6709\\u591a\\u5c11\\u79cd\\u4e0d\\u540c\\u7684\\u65b9\\u6cd5\\u53ef\\u4ee5\\u722c\\u5230\\u697c\\u9876\\u5462\\uff1f\\n\\n**\\u6ce8\\u610f\\uff1a**\\u7ed9\\u5b9a *n* \\u662f\\u4e00\\u4e2a\\u6b63\\u6574\\u6570\\u3002\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a 2\\n\\u8f93\\u51fa\\uff1a 2\\n\\u89e3\\u91ca\\uff1a \\u6709\\u4e24\\u79cd\\u65b9\\u6cd5\\u53ef\\u4ee5\\u722c\\u5230\\u697c\\u9876\\u3002\\n1.  1 \\u9636 + 1 \\u9636\\n2.  2 \\u9636\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a 3\\n\\u8f93\\u51fa\\uff1a 3\\n\\u89e3\\u91ca\\uff1a \\u6709\\u4e09\\u79cd\\u65b9\\u6cd5\\u53ef\\u4ee5\\u722c\\u5230\\u697c\\u9876\\u3002\\n1.  1 \\u9636 + 1 \\u9636 + 1 \\u9636\\n2.  1 \\u9636 + 2 \\u9636\\n3.  2 \\u9636 + 1 \\u9636\\n```\\n\"}]}','green','2020-08-12 12:29:09'),(32,'69. x 的平方根','实现 `int sqrt(int x)` 函数。\n\n计算并返回 *x* 的平方根，其中 *x* 是非负整数。\n\n由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。\n\n**示例 1:**\n\n```\n输入: 4\n输出: 2\n```\n\n**示例 2:**\n\n```\n输入: 8\n输出: 2\n说明: 8 的平方根是 2.82842..., \n     由于返回类型是整数，小数部分将被舍去。\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u5b9e\\u73b0 `int sqrt(int x)` \\u51fd\\u6570\\u3002\\n\\n\\u8ba1\\u7b97\\u5e76\\u8fd4\\u56de *x* \\u7684\\u5e73\\u65b9\\u6839\\uff0c\\u5176\\u4e2d *x* \\u662f\\u975e\\u8d1f\\u6574\\u6570\\u3002\\n\\n\\u7531\\u4e8e\\u8fd4\\u56de\\u7c7b\\u578b\\u662f\\u6574\\u6570\\uff0c\\u7ed3\\u679c\\u53ea\\u4fdd\\u7559\\u6574\\u6570\\u7684\\u90e8\\u5206\\uff0c\\u5c0f\\u6570\\u90e8\\u5206\\u5c06\\u88ab\\u820d\\u53bb\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 4\\n\\u8f93\\u51fa: 2\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 8\\n\\u8f93\\u51fa: 2\\n\\u8bf4\\u660e: 8 \\u7684\\u5e73\\u65b9\\u6839\\u662f 2.82842..., \\n     \\u7531\\u4e8e\\u8fd4\\u56de\\u7c7b\\u578b\\u662f\\u6574\\u6570\\uff0c\\u5c0f\\u6570\\u90e8\\u5206\\u5c06\\u88ab\\u820d\\u53bb\\u3002\\n```\\n\\n\"}]}','green','2020-08-12 12:29:44'),(33,'68. 文本左右对齐','给定一个单词数组和一个长度 *maxWidth*，重新排版单词，使其成为每行恰好有 *maxWidth* 个字符，且左右两端对齐的文本。\n\n你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 `\' \'` 填充，使得每行恰好有 *maxWidth* 个字符。\n\n要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。\n\n文本的最后一行应为左对齐，且单词之间不插入**额外的**空格。\n\n**说明:**\n\n- 单词是指由非空格字符组成的字符序列。\n- 每个单词的长度大于 0，小于等于 *maxWidth*。\n- 输入单词数组 `words` 至少包含一个单词。\n\n**示例:**\n\n```\n输入:\nwords = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\nmaxWidth = 16\n输出:\n[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\n```\n\n**示例 2:**\n\n```\n输入:\nwords = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\nmaxWidth = 16\n输出:\n[\n  \"What   must   be\",\n  \"acknowledgment  \",\n  \"shall be        \"\n]\n解释: 注意最后一行的格式应为 \"shall be    \" 而不是 \"shall     be\",\n     因为最后一行应为左对齐，而不是左右两端对齐。       \n     第二行同样为左对齐，这是因为这行只包含一个单词。\n```\n\n**示例 3:**\n\n```\n输入:\nwords = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\n         \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\nmaxWidth = 20\n输出:\n[\n  \"Science  is  what we\",\n  \"understand      well\",\n  \"enough to explain to\",\n  \"a  computer.  Art is\",\n  \"everything  else  we\",\n  \"do                  \"\n]\n```\n','<p>给定一个单词数组和一个长度 *maxWidth*，重新排版单词，使其成为每行恰好有 *maxWidth* 个字符，且左右两端对齐的文本。</p><p><br></p><p>你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 `\' \'` 填充，使得每行恰好有 *maxWidth* 个字符。</p><p><br></p><p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p><p><br></p><p>文本的最后一行应为左对齐，且单词之间不插入**额外的**空格。</p><p><br></p><p>**说明:**</p><p><br></p><p>- 单词是指由非空格字符组成的字符序列。</p><p>- 每个单词的长度大于 0，小于等于 *maxWidth*。</p><p>- 输入单词数组 `words` 至少包含一个单词。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入:</p><p>words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]</p><p>maxWidth = 16</p><p>输出:</p><p>[</p><p>   \"This    is    an\",</p><p>   \"example  of text\",</p><p>   \"justification.  \"</p><p>]</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入:</p><p>words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]</p><p>maxWidth = 16</p><p>输出:</p><p>[</p><p>  \"What   must   be\",</p><p>  \"acknowledgment  \",</p><p>  \"shall be        \"</p><p>]</p><p>解释: 注意最后一行的格式应为 \"shall be    \" 而不是 \"shall     be\",</p><p>     因为最后一行应为左对齐，而不是左右两端对齐。       </p><p>     第二行同样为左对齐，这是因为这行只包含一个单词。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入:</p><p>words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",</p><p>         \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]</p><p>maxWidth = 20</p><p>输出:</p><p>[</p><p>  \"Science  is  what we\",</p><p>  \"understand      well\",</p><p>  \"enough to explain to\",</p><p>  \"a  computer.  Art is\",</p><p>  \"everything  else  we\",</p><p>  \"do                  \"</p><p>]</p><p>```</p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5355\\u8bcd\\u6570\\u7ec4\\u548c\\u4e00\\u4e2a\\u957f\\u5ea6 *maxWidth*\\uff0c\\u91cd\\u65b0\\u6392\\u7248\\u5355\\u8bcd\\uff0c\\u4f7f\\u5176\\u6210\\u4e3a\\u6bcf\\u884c\\u6070\\u597d\\u6709 *maxWidth* \\u4e2a\\u5b57\\u7b26\\uff0c\\u4e14\\u5de6\\u53f3\\u4e24\\u7aef\\u5bf9\\u9f50\\u7684\\u6587\\u672c\\u3002\\n\\n\\u4f60\\u5e94\\u8be5\\u4f7f\\u7528\\u201c\\u8d2a\\u5fc3\\u7b97\\u6cd5\\u201d\\u6765\\u653e\\u7f6e\\u7ed9\\u5b9a\\u7684\\u5355\\u8bcd\\uff1b\\u4e5f\\u5c31\\u662f\\u8bf4\\uff0c\\u5c3d\\u53ef\\u80fd\\u591a\\u5730\\u5f80\\u6bcf\\u884c\\u4e2d\\u653e\\u7f6e\\u5355\\u8bcd\\u3002\\u5fc5\\u8981\\u65f6\\u53ef\\u7528\\u7a7a\\u683c `\' \'` \\u586b\\u5145\\uff0c\\u4f7f\\u5f97\\u6bcf\\u884c\\u6070\\u597d\\u6709 *maxWidth* \\u4e2a\\u5b57\\u7b26\\u3002\\n\\n\\u8981\\u6c42\\u5c3d\\u53ef\\u80fd\\u5747\\u5300\\u5206\\u914d\\u5355\\u8bcd\\u95f4\\u7684\\u7a7a\\u683c\\u6570\\u91cf\\u3002\\u5982\\u679c\\u67d0\\u4e00\\u884c\\u5355\\u8bcd\\u95f4\\u7684\\u7a7a\\u683c\\u4e0d\\u80fd\\u5747\\u5300\\u5206\\u914d\\uff0c\\u5219\\u5de6\\u4fa7\\u653e\\u7f6e\\u7684\\u7a7a\\u683c\\u6570\\u8981\\u591a\\u4e8e\\u53f3\\u4fa7\\u7684\\u7a7a\\u683c\\u6570\\u3002\\n\\n\\u6587\\u672c\\u7684\\u6700\\u540e\\u4e00\\u884c\\u5e94\\u4e3a\\u5de6\\u5bf9\\u9f50\\uff0c\\u4e14\\u5355\\u8bcd\\u4e4b\\u95f4\\u4e0d\\u63d2\\u5165**\\u989d\\u5916\\u7684**\\u7a7a\\u683c\\u3002\\n\\n**\\u8bf4\\u660e:**\\n\\n- \\u5355\\u8bcd\\u662f\\u6307\\u7531\\u975e\\u7a7a\\u683c\\u5b57\\u7b26\\u7ec4\\u6210\\u7684\\u5b57\\u7b26\\u5e8f\\u5217\\u3002\\n- \\u6bcf\\u4e2a\\u5355\\u8bcd\\u7684\\u957f\\u5ea6\\u5927\\u4e8e 0\\uff0c\\u5c0f\\u4e8e\\u7b49\\u4e8e *maxWidth*\\u3002\\n- \\u8f93\\u5165\\u5355\\u8bcd\\u6570\\u7ec4 `words` \\u81f3\\u5c11\\u5305\\u542b\\u4e00\\u4e2a\\u5355\\u8bcd\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165:\\nwords = [\\\"This\\\", \\\"is\\\", \\\"an\\\", \\\"example\\\", \\\"of\\\", \\\"text\\\", \\\"justification.\\\"]\\nmaxWidth = 16\\n\\u8f93\\u51fa:\\n[\\n   \\\"This    is    an\\\",\\n   \\\"example  of text\\\",\\n   \\\"justification.  \\\"\\n]\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165:\\nwords = [\\\"What\\\",\\\"must\\\",\\\"be\\\",\\\"acknowledgment\\\",\\\"shall\\\",\\\"be\\\"]\\nmaxWidth = 16\\n\\u8f93\\u51fa:\\n[\\n  \\\"What   must   be\\\",\\n  \\\"acknowledgment  \\\",\\n  \\\"shall be        \\\"\\n]\\n\\u89e3\\u91ca: \\u6ce8\\u610f\\u6700\\u540e\\u4e00\\u884c\\u7684\\u683c\\u5f0f\\u5e94\\u4e3a \\\"shall be    \\\" \\u800c\\u4e0d\\u662f \\\"shall     be\\\",\\n     \\u56e0\\u4e3a\\u6700\\u540e\\u4e00\\u884c\\u5e94\\u4e3a\\u5de6\\u5bf9\\u9f50\\uff0c\\u800c\\u4e0d\\u662f\\u5de6\\u53f3\\u4e24\\u7aef\\u5bf9\\u9f50\\u3002       \\n     \\u7b2c\\u4e8c\\u884c\\u540c\\u6837\\u4e3a\\u5de6\\u5bf9\\u9f50\\uff0c\\u8fd9\\u662f\\u56e0\\u4e3a\\u8fd9\\u884c\\u53ea\\u5305\\u542b\\u4e00\\u4e2a\\u5355\\u8bcd\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165:\\nwords = [\\\"Science\\\",\\\"is\\\",\\\"what\\\",\\\"we\\\",\\\"understand\\\",\\\"well\\\",\\\"enough\\\",\\\"to\\\",\\\"explain\\\",\\n         \\\"to\\\",\\\"a\\\",\\\"computer.\\\",\\\"Art\\\",\\\"is\\\",\\\"everything\\\",\\\"else\\\",\\\"we\\\",\\\"do\\\"]\\nmaxWidth = 20\\n\\u8f93\\u51fa:\\n[\\n  \\\"Science  is  what we\\\",\\n  \\\"understand      well\\\",\\n  \\\"enough to explain to\\\",\\n  \\\"a  computer.  Art is\\\",\\n  \\\"everything  else  we\\\",\\n  \\\"do                  \\\"\\n]\\n```\\n\"}]}','red','2020-08-12 12:30:15'),(34,'67. 二进制求和','给你两个二进制字符串，返回它们的和（用二进制表示）。\n\n输入为 **非空** 字符串且只包含数字 `1` 和 `0`。\n\n \n\n**示例 1:**\n\n```\n输入: a = \"11\", b = \"1\"\n输出: \"100\"\n```\n\n**示例 2:**\n\n```\n输入: a = \"1010\", b = \"1011\"\n输出: \"10101\"\n```\n\n \n\n**提示：**\n\n- 每个字符串仅由字符 `\'0\'` 或 `\'1\'` 组成。\n- `1 <= a.length, b.length <= 10^4`\n- 字符串如果不是 `\"0\"` ，就都不含前导零。\n\n\n','<p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p><p><br></p><p>输入为 **非空** 字符串且只包含数字 `1` 和 `0`。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: a = \"11\", b = \"1\"</p><p>输出: \"100\"</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: a = \"1010\", b = \"1011\"</p><p>输出: \"10101\"</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- 每个字符串仅由字符 `\'0\'` 或 `\'1\'` 组成。</p><p>- `1 &lt;= a.length, b.length &lt;= 10^4`</p><p>- 字符串如果不是 `\"0\"` ，就都不含前导零。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u4f60\\u4e24\\u4e2a\\u4e8c\\u8fdb\\u5236\\u5b57\\u7b26\\u4e32\\uff0c\\u8fd4\\u56de\\u5b83\\u4eec\\u7684\\u548c\\uff08\\u7528\\u4e8c\\u8fdb\\u5236\\u8868\\u793a\\uff09\\u3002\\n\\n\\u8f93\\u5165\\u4e3a **\\u975e\\u7a7a** \\u5b57\\u7b26\\u4e32\\u4e14\\u53ea\\u5305\\u542b\\u6570\\u5b57 `1` \\u548c `0`\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: a = \\\"11\\\", b = \\\"1\\\"\\n\\u8f93\\u51fa: \\\"100\\\"\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: a = \\\"1010\\\", b = \\\"1011\\\"\\n\\u8f93\\u51fa: \\\"10101\\\"\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- \\u6bcf\\u4e2a\\u5b57\\u7b26\\u4e32\\u4ec5\\u7531\\u5b57\\u7b26 `\'0\'` \\u6216 `\'1\'` \\u7ec4\\u6210\\u3002\\n- `1 <= a.length, b.length <= 10^4`\\n- \\u5b57\\u7b26\\u4e32\\u5982\\u679c\\u4e0d\\u662f `\\\"0\\\"` \\uff0c\\u5c31\\u90fd\\u4e0d\\u542b\\u524d\\u5bfc\\u96f6\\u3002\\n\\n\\n\"}]}','green','2020-08-12 12:30:30'),(35,'66. 加一','给定一个由**整数**组成的**非空**数组所表示的非负整数，在该数的基础上加一。\n\n最高位数字存放在数组的首位， 数组中每个元素只存储**单个**数字。\n\n你可以假设除了整数 0 之外，这个整数不会以零开头。\n\n**示例 1:**\n\n```\n输入: [1,2,3]\n输出: [1,2,4]\n解释: 输入数组表示数字 123。\n```\n\n**示例 2:**\n\n```\n输入: [4,3,2,1]\n输出: [4,3,2,2]\n解释: 输入数组表示数字 4321。\n```\n\n\n','<p>给定一个由**整数**组成的**非空**数组所表示的非负整数，在该数的基础上加一。</p><p><br></p><p>最高位数字存放在数组的首位， 数组中每个元素只存储**单个**数字。</p><p><br></p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [1,2,3]</p><p>输出: [1,2,4]</p><p>解释: 输入数组表示数字 123。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [4,3,2,1]</p><p>输出: [4,3,2,2]</p><p>解释: 输入数组表示数字 4321。</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u7531**\\u6574\\u6570**\\u7ec4\\u6210\\u7684**\\u975e\\u7a7a**\\u6570\\u7ec4\\u6240\\u8868\\u793a\\u7684\\u975e\\u8d1f\\u6574\\u6570\\uff0c\\u5728\\u8be5\\u6570\\u7684\\u57fa\\u7840\\u4e0a\\u52a0\\u4e00\\u3002\\n\\n\\u6700\\u9ad8\\u4f4d\\u6570\\u5b57\\u5b58\\u653e\\u5728\\u6570\\u7ec4\\u7684\\u9996\\u4f4d\\uff0c \\u6570\\u7ec4\\u4e2d\\u6bcf\\u4e2a\\u5143\\u7d20\\u53ea\\u5b58\\u50a8**\\u5355\\u4e2a**\\u6570\\u5b57\\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe\\u9664\\u4e86\\u6574\\u6570 0 \\u4e4b\\u5916\\uff0c\\u8fd9\\u4e2a\\u6574\\u6570\\u4e0d\\u4f1a\\u4ee5\\u96f6\\u5f00\\u5934\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [1,2,3]\\n\\u8f93\\u51fa: [1,2,4]\\n\\u89e3\\u91ca: \\u8f93\\u5165\\u6570\\u7ec4\\u8868\\u793a\\u6570\\u5b57 123\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [4,3,2,1]\\n\\u8f93\\u51fa: [4,3,2,2]\\n\\u89e3\\u91ca: \\u8f93\\u5165\\u6570\\u7ec4\\u8868\\u793a\\u6570\\u5b57 4321\\u3002\\n```\\n\\n\\n\"}]}','green','2020-08-12 12:30:50'),(36,'65. 有效数字','\n验证给定的字符串是否可以解释为十进制数字。\n\n例如:\n\n```\n\"0\"` => `true`\n`\" 0.1 \"` => `true`\n`\"abc\"` => `false`\n`\"1 a\"` => `false`\n`\"2e10\"` => `true`\n`\" -90e3  \"` => `true`\n`\" 1e\"` => `false`\n`\"e3\"` => `false`\n`\" 6e-1\"` => `true`\n`\" 99e2.5 \"` => `false`\n`\"53.5e93\"` => `true`\n`\" --6 \"` => `false`\n`\"-+3\"` => `false`\n`\"95a54e53\"` => `false\n```\n\n**说明:** 我们有意将问题陈述地比较模糊。在实现代码之前，你应当事先思考所有可能的情况。这里给出一份可能存在于有效十进制数字中的字符列表：\n\n- 数字 0-9\n- 指数 - \"e\"\n- 正/负号 - \"+\"/\"-\"\n- 小数点 - \".\"\n\n当然，在输入中，这些字符的上下文也很重要。\n\n**更新于 2015-02-10:**\n`C++`函数的形式已经更新了。如果你仍然看见你的函数接收 `const char *` 类型的参数，请点击重载按钮重置你的代码。\n\n\n','<p><br></p><p>验证给定的字符串是否可以解释为十进制数字。</p><p><br></p><p>例如:</p><p><br></p><p>```</p><p>\"0\"` =&gt; `true`</p><p>`\" 0.1 \"` =&gt; `true`</p><p>`\"abc\"` =&gt; `false`</p><p>`\"1 a\"` =&gt; `false`</p><p>`\"2e10\"` =&gt; `true`</p><p>`\" -90e3  \"` =&gt; `true`</p><p>`\" 1e\"` =&gt; `false`</p><p>`\"e3\"` =&gt; `false`</p><p>`\" 6e-1\"` =&gt; `true`</p><p>`\" 99e2.5 \"` =&gt; `false`</p><p>`\"53.5e93\"` =&gt; `true`</p><p>`\" --6 \"` =&gt; `false`</p><p>`\"-+3\"` =&gt; `false`</p><p>`\"95a54e53\"` =&gt; `false</p><p>```</p><p><br></p><p>**说明:** 我们有意将问题陈述地比较模糊。在实现代码之前，你应当事先思考所有可能的情况。这里给出一份可能存在于有效十进制数字中的字符列表：</p><p><br></p><p>- 数字 0-9</p><p>- 指数 - \"e\"</p><p>- 正/负号 - \"+\"/\"-\"</p><p>- 小数点 - \".\"</p><p><br></p><p>当然，在输入中，这些字符的上下文也很重要。</p><p><br></p><p>**更新于 2015-02-10:**</p><p>`C++`函数的形式已经更新了。如果你仍然看见你的函数接收 `const char *` 类型的参数，请点击重载按钮重置你的代码。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u9a8c\\u8bc1\\u7ed9\\u5b9a\\u7684\\u5b57\\u7b26\\u4e32\\u662f\\u5426\\u53ef\\u4ee5\\u89e3\\u91ca\\u4e3a\\u5341\\u8fdb\\u5236\\u6570\\u5b57\\u3002\\n\\n\\u4f8b\\u5982:\\n\\n```\\n\\\"0\\\"` => `true`\\n`\\\" 0.1 \\\"` => `true`\\n`\\\"abc\\\"` => `false`\\n`\\\"1 a\\\"` => `false`\\n`\\\"2e10\\\"` => `true`\\n`\\\" -90e3  \\\"` => `true`\\n`\\\" 1e\\\"` => `false`\\n`\\\"e3\\\"` => `false`\\n`\\\" 6e-1\\\"` => `true`\\n`\\\" 99e2.5 \\\"` => `false`\\n`\\\"53.5e93\\\"` => `true`\\n`\\\" --6 \\\"` => `false`\\n`\\\"-+3\\\"` => `false`\\n`\\\"95a54e53\\\"` => `false\\n```\\n\\n**\\u8bf4\\u660e:** \\u6211\\u4eec\\u6709\\u610f\\u5c06\\u95ee\\u9898\\u9648\\u8ff0\\u5730\\u6bd4\\u8f83\\u6a21\\u7cca\\u3002\\u5728\\u5b9e\\u73b0\\u4ee3\\u7801\\u4e4b\\u524d\\uff0c\\u4f60\\u5e94\\u5f53\\u4e8b\\u5148\\u601d\\u8003\\u6240\\u6709\\u53ef\\u80fd\\u7684\\u60c5\\u51b5\\u3002\\u8fd9\\u91cc\\u7ed9\\u51fa\\u4e00\\u4efd\\u53ef\\u80fd\\u5b58\\u5728\\u4e8e\\u6709\\u6548\\u5341\\u8fdb\\u5236\\u6570\\u5b57\\u4e2d\\u7684\\u5b57\\u7b26\\u5217\\u8868\\uff1a\\n\\n- \\u6570\\u5b57 0-9\\n- \\u6307\\u6570 - \\\"e\\\"\\n- \\u6b63/\\u8d1f\\u53f7 - \\\"+\\\"/\\\"-\\\"\\n- \\u5c0f\\u6570\\u70b9 - \\\".\\\"\\n\\n\\u5f53\\u7136\\uff0c\\u5728\\u8f93\\u5165\\u4e2d\\uff0c\\u8fd9\\u4e9b\\u5b57\\u7b26\\u7684\\u4e0a\\u4e0b\\u6587\\u4e5f\\u5f88\\u91cd\\u8981\\u3002\\n\\n**\\u66f4\\u65b0\\u4e8e 2015-02-10:**\\n`C++`\\u51fd\\u6570\\u7684\\u5f62\\u5f0f\\u5df2\\u7ecf\\u66f4\\u65b0\\u4e86\\u3002\\u5982\\u679c\\u4f60\\u4ecd\\u7136\\u770b\\u89c1\\u4f60\\u7684\\u51fd\\u6570\\u63a5\\u6536 `const char *` \\u7c7b\\u578b\\u7684\\u53c2\\u6570\\uff0c\\u8bf7\\u70b9\\u51fb\\u91cd\\u8f7d\\u6309\\u94ae\\u91cd\\u7f6e\\u4f60\\u7684\\u4ee3\\u7801\\u3002\\n\\n\\n\"}]}','red','2020-08-12 12:31:15'),(37,'64. 最小路径和','\n给定一个包含非负整数的 *m* x *n* 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n**说明：**每次只能向下或者向右移动一步。\n\n**示例:**\n\n```\n输入:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 7\n解释: 因为路径 1→3→1→1→1 的总和最小。\n```\n\n','<p><br></p><p>给定一个包含非负整数的 *m* x *n* 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><br></p><p>**说明：**每次只能向下或者向右移动一步。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入:</p><p>[</p><p>  [1,3,1],</p><p>  [1,5,1],</p><p>  [4,2,1]</p><p>]</p><p>输出: 7</p><p>解释: 因为路径 1→3→1→1→1 的总和最小。</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5305\\u542b\\u975e\\u8d1f\\u6574\\u6570\\u7684 *m* x *n* \\u7f51\\u683c\\uff0c\\u8bf7\\u627e\\u51fa\\u4e00\\u6761\\u4ece\\u5de6\\u4e0a\\u89d2\\u5230\\u53f3\\u4e0b\\u89d2\\u7684\\u8def\\u5f84\\uff0c\\u4f7f\\u5f97\\u8def\\u5f84\\u4e0a\\u7684\\u6570\\u5b57\\u603b\\u548c\\u4e3a\\u6700\\u5c0f\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\u6bcf\\u6b21\\u53ea\\u80fd\\u5411\\u4e0b\\u6216\\u8005\\u5411\\u53f3\\u79fb\\u52a8\\u4e00\\u6b65\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165:\\n[\\n  [1,3,1],\\n  [1,5,1],\\n  [4,2,1]\\n]\\n\\u8f93\\u51fa: 7\\n\\u89e3\\u91ca: \\u56e0\\u4e3a\\u8def\\u5f84 1\\u21923\\u21921\\u21921\\u21921 \\u7684\\u603b\\u548c\\u6700\\u5c0f\\u3002\\n```\\n\\n\"}]}','yellow','2020-08-12 12:31:35'),(38,'63. 不同路径 II','\n一个机器人位于一个 *m x n* 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png)\n\n网格中的障碍物和空位置分别用 `1` 和 `0` 来表示。\n\n**说明：***m* 和 *n* 的值均不超过 100。\n\n**示例 1:**\n\n```\n输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n```\n\n','<p><br></p><p>一个机器人位于一个 *m x n* 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p><br></p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p><br></p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p><br></p><p>![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png)</p><p><br></p><p>网格中的障碍物和空位置分别用 `1` 和 `0` 来表示。</p><p><br></p><p>**说明：***m* 和 *n* 的值均不超过 100。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入:</p><p>[</p><p>  [0,0,0],</p><p>  [0,1,0],</p><p>  [0,0,0]</p><p>]</p><p>输出: 2</p><p>解释:</p><p>3x3 网格的正中间有一个障碍物。</p><p>从左上角到右下角一共有 2 条不同的路径：</p><p>1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</p><p>2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u4e00\\u4e2a\\u673a\\u5668\\u4eba\\u4f4d\\u4e8e\\u4e00\\u4e2a *m x n* \\u7f51\\u683c\\u7684\\u5de6\\u4e0a\\u89d2 \\uff08\\u8d77\\u59cb\\u70b9\\u5728\\u4e0b\\u56fe\\u4e2d\\u6807\\u8bb0\\u4e3a\\u201cStart\\u201d \\uff09\\u3002\\n\\n\\u673a\\u5668\\u4eba\\u6bcf\\u6b21\\u53ea\\u80fd\\u5411\\u4e0b\\u6216\\u8005\\u5411\\u53f3\\u79fb\\u52a8\\u4e00\\u6b65\\u3002\\u673a\\u5668\\u4eba\\u8bd5\\u56fe\\u8fbe\\u5230\\u7f51\\u683c\\u7684\\u53f3\\u4e0b\\u89d2\\uff08\\u5728\\u4e0b\\u56fe\\u4e2d\\u6807\\u8bb0\\u4e3a\\u201cFinish\\u201d\\uff09\\u3002\\n\\n\\u73b0\\u5728\\u8003\\u8651\\u7f51\\u683c\\u4e2d\\u6709\\u969c\\u788d\\u7269\\u3002\\u90a3\\u4e48\\u4ece\\u5de6\\u4e0a\\u89d2\\u5230\\u53f3\\u4e0b\\u89d2\\u5c06\\u4f1a\\u6709\\u591a\\u5c11\\u6761\\u4e0d\\u540c\\u7684\\u8def\\u5f84\\uff1f\\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png)\\n\\n\\u7f51\\u683c\\u4e2d\\u7684\\u969c\\u788d\\u7269\\u548c\\u7a7a\\u4f4d\\u7f6e\\u5206\\u522b\\u7528 `1` \\u548c `0` \\u6765\\u8868\\u793a\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a***m* \\u548c *n* \\u7684\\u503c\\u5747\\u4e0d\\u8d85\\u8fc7 100\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\n[\\n  [0,0,0],\\n  [0,1,0],\\n  [0,0,0]\\n]\\n\\u8f93\\u51fa: 2\\n\\u89e3\\u91ca:\\n3x3 \\u7f51\\u683c\\u7684\\u6b63\\u4e2d\\u95f4\\u6709\\u4e00\\u4e2a\\u969c\\u788d\\u7269\\u3002\\n\\u4ece\\u5de6\\u4e0a\\u89d2\\u5230\\u53f3\\u4e0b\\u89d2\\u4e00\\u5171\\u6709 2 \\u6761\\u4e0d\\u540c\\u7684\\u8def\\u5f84\\uff1a\\n1. \\u5411\\u53f3 -> \\u5411\\u53f3 -> \\u5411\\u4e0b -> \\u5411\\u4e0b\\n2. \\u5411\\u4e0b -> \\u5411\\u4e0b -> \\u5411\\u53f3 -> \\u5411\\u53f3\\n```\\n\\n\"}]}','yellow','2020-08-12 12:31:50'),(39,'62. 不同路径','一个机器人位于一个 *m x n* 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n问总共有多少条不同的路径？\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png)\n\n例如，上图是一个7 x 3 的网格。有多少可能的路径？\n\n \n\n**示例 1:**\n\n```\n输入: m = 3, n = 2\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n```\n\n**示例 2:**\n\n```\n输入: m = 7, n = 3\n输出: 28\n```\n\n \n\n**提示：**\n\n- `1 <= m, n <= 100`\n- 题目数据保证答案小于等于 `2 * 10 ^ 9`\n\n\n\n','<p>一个机器人位于一个 *m x n* 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p><br></p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p><br></p><p>问总共有多少条不同的路径？</p><p><br></p><p>![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png)</p><p><br></p><p>例如，上图是一个7 x 3 的网格。有多少可能的路径？</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: m = 3, n = 2</p><p>输出: 3</p><p>解释:</p><p>从左上角开始，总共有 3 条路径可以到达右下角。</p><p>1. 向右 -&gt; 向右 -&gt; 向下</p><p>2. 向右 -&gt; 向下 -&gt; 向右</p><p>3. 向下 -&gt; 向右 -&gt; 向右</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: m = 7, n = 3</p><p>输出: 28</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `1 &lt;= m, n &lt;= 100`</p><p>- 题目数据保证答案小于等于 `2 * 10 ^ 9`</p><p><br></p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u4e00\\u4e2a\\u673a\\u5668\\u4eba\\u4f4d\\u4e8e\\u4e00\\u4e2a *m x n* \\u7f51\\u683c\\u7684\\u5de6\\u4e0a\\u89d2 \\uff08\\u8d77\\u59cb\\u70b9\\u5728\\u4e0b\\u56fe\\u4e2d\\u6807\\u8bb0\\u4e3a\\u201cStart\\u201d \\uff09\\u3002\\n\\n\\u673a\\u5668\\u4eba\\u6bcf\\u6b21\\u53ea\\u80fd\\u5411\\u4e0b\\u6216\\u8005\\u5411\\u53f3\\u79fb\\u52a8\\u4e00\\u6b65\\u3002\\u673a\\u5668\\u4eba\\u8bd5\\u56fe\\u8fbe\\u5230\\u7f51\\u683c\\u7684\\u53f3\\u4e0b\\u89d2\\uff08\\u5728\\u4e0b\\u56fe\\u4e2d\\u6807\\u8bb0\\u4e3a\\u201cFinish\\u201d\\uff09\\u3002\\n\\n\\u95ee\\u603b\\u5171\\u6709\\u591a\\u5c11\\u6761\\u4e0d\\u540c\\u7684\\u8def\\u5f84\\uff1f\\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png)\\n\\n\\u4f8b\\u5982\\uff0c\\u4e0a\\u56fe\\u662f\\u4e00\\u4e2a7 x 3 \\u7684\\u7f51\\u683c\\u3002\\u6709\\u591a\\u5c11\\u53ef\\u80fd\\u7684\\u8def\\u5f84\\uff1f\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: m = 3, n = 2\\n\\u8f93\\u51fa: 3\\n\\u89e3\\u91ca:\\n\\u4ece\\u5de6\\u4e0a\\u89d2\\u5f00\\u59cb\\uff0c\\u603b\\u5171\\u6709 3 \\u6761\\u8def\\u5f84\\u53ef\\u4ee5\\u5230\\u8fbe\\u53f3\\u4e0b\\u89d2\\u3002\\n1. \\u5411\\u53f3 -> \\u5411\\u53f3 -> \\u5411\\u4e0b\\n2. \\u5411\\u53f3 -> \\u5411\\u4e0b -> \\u5411\\u53f3\\n3. \\u5411\\u4e0b -> \\u5411\\u53f3 -> \\u5411\\u53f3\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: m = 7, n = 3\\n\\u8f93\\u51fa: 28\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `1 <= m, n <= 100`\\n- \\u9898\\u76ee\\u6570\\u636e\\u4fdd\\u8bc1\\u7b54\\u6848\\u5c0f\\u4e8e\\u7b49\\u4e8e `2 * 10 ^ 9`\\n\\n\\n\\n\"}]}','yellow','2020-08-12 12:32:08'),(40,'61. 旋转链表','\n给定一个链表，旋转链表，将链表每个节点向右移动 *k* 个位置，其中 *k* 是非负数。\n\n**示例 1:**\n\n```\n输入: 1->2->3->4->5->NULL, k = 2\n输出: 4->5->1->2->3->NULL\n解释:\n向右旋转 1 步: 5->1->2->3->4->NULL\n向右旋转 2 步: 4->5->1->2->3->NULL\n```\n\n**示例 2:**\n\n```\n输入: 0->1->2->NULL, k = 4\n输出: 2->0->1->NULL\n解释:\n向右旋转 1 步: 2->0->1->NULL\n向右旋转 2 步: 1->2->0->NULL\n向右旋转 3 步: 0->1->2->NULL\n向右旋转 4 步: 2->0->1->NULL\n```\n\n','<p><br></p><p>给定一个链表，旋转链表，将链表每个节点向右移动 *k* 个位置，其中 *k* 是非负数。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</p><p>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p><p>解释:</p><p>向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</p><p>向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4</p><p>输出: 2-&gt;0-&gt;1-&gt;NULL</p><p>解释:</p><p>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL</p><p>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL</p><p>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL</p><p>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u94fe\\u8868\\uff0c\\u65cb\\u8f6c\\u94fe\\u8868\\uff0c\\u5c06\\u94fe\\u8868\\u6bcf\\u4e2a\\u8282\\u70b9\\u5411\\u53f3\\u79fb\\u52a8 *k* \\u4e2a\\u4f4d\\u7f6e\\uff0c\\u5176\\u4e2d *k* \\u662f\\u975e\\u8d1f\\u6570\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 1->2->3->4->5->NULL, k = 2\\n\\u8f93\\u51fa: 4->5->1->2->3->NULL\\n\\u89e3\\u91ca:\\n\\u5411\\u53f3\\u65cb\\u8f6c 1 \\u6b65: 5->1->2->3->4->NULL\\n\\u5411\\u53f3\\u65cb\\u8f6c 2 \\u6b65: 4->5->1->2->3->NULL\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 0->1->2->NULL, k = 4\\n\\u8f93\\u51fa: 2->0->1->NULL\\n\\u89e3\\u91ca:\\n\\u5411\\u53f3\\u65cb\\u8f6c 1 \\u6b65: 2->0->1->NULL\\n\\u5411\\u53f3\\u65cb\\u8f6c 2 \\u6b65: 1->2->0->NULL\\n\\u5411\\u53f3\\u65cb\\u8f6c 3 \\u6b65: 0->1->2->NULL\\n\\u5411\\u53f3\\u65cb\\u8f6c 4 \\u6b65: 2->0->1->NULL\\n```\\n\\n\"}]}','yellow','2020-08-12 12:32:23'),(41,'60. 第k个排列','\n给出集合 `[1,2,3,…,*n*]`，其所有元素共有 *n*! 种排列。\n\n按大小顺序列出所有排列情况，并一一标记，当 *n* = 3 时, 所有排列如下：\n\n1. `\"123\"`\n2. `\"132\"`\n3. `\"213\"`\n4. `\"231\"`\n5. `\"312\"`\n6. `\"321\"`\n\n给定 *n* 和 *k*，返回第 *k* 个排列。\n\n**说明：**\n\n- 给定 *n* 的范围是 [1, 9]。\n- 给定 *k* 的范围是[1,  *n*!]。\n\n**示例 1:**\n\n```\n输入: n = 3, k = 3\n输出: \"213\"\n```\n\n**示例 2:**\n\n```\n输入: n = 4, k = 9\n输出: \"2314\"\n```\n\n\n','<p><br></p><p>给出集合 `[1,2,3,…,*n*]`，其所有元素共有 *n*! 种排列。</p><p><br></p><p>按大小顺序列出所有排列情况，并一一标记，当 *n* = 3 时, 所有排列如下：</p><p><br></p><p>1. `\"123\"`</p><p>2. `\"132\"`</p><p>3. `\"213\"`</p><p>4. `\"231\"`</p><p>5. `\"312\"`</p><p>6. `\"321\"`</p><p><br></p><p>给定 *n* 和 *k*，返回第 *k* 个排列。</p><p><br></p><p>**说明：**</p><p><br></p><p>- 给定 *n* 的范围是 [1, 9]。</p><p>- 给定 *k* 的范围是[1,  *n*!]。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: n = 3, k = 3</p><p>输出: \"213\"</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: n = 4, k = 9</p><p>输出: \"2314\"</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u51fa\\u96c6\\u5408 `[1,2,3,\\u2026,*n*]`\\uff0c\\u5176\\u6240\\u6709\\u5143\\u7d20\\u5171\\u6709 *n*! \\u79cd\\u6392\\u5217\\u3002\\n\\n\\u6309\\u5927\\u5c0f\\u987a\\u5e8f\\u5217\\u51fa\\u6240\\u6709\\u6392\\u5217\\u60c5\\u51b5\\uff0c\\u5e76\\u4e00\\u4e00\\u6807\\u8bb0\\uff0c\\u5f53 *n* = 3 \\u65f6, \\u6240\\u6709\\u6392\\u5217\\u5982\\u4e0b\\uff1a\\n\\n1. `\\\"123\\\"`\\n2. `\\\"132\\\"`\\n3. `\\\"213\\\"`\\n4. `\\\"231\\\"`\\n5. `\\\"312\\\"`\\n6. `\\\"321\\\"`\\n\\n\\u7ed9\\u5b9a *n* \\u548c *k*\\uff0c\\u8fd4\\u56de\\u7b2c *k* \\u4e2a\\u6392\\u5217\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n- \\u7ed9\\u5b9a *n* \\u7684\\u8303\\u56f4\\u662f [1, 9]\\u3002\\n- \\u7ed9\\u5b9a *k* \\u7684\\u8303\\u56f4\\u662f[1,  *n*!]\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: n = 3, k = 3\\n\\u8f93\\u51fa: \\\"213\\\"\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: n = 4, k = 9\\n\\u8f93\\u51fa: \\\"2314\\\"\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:32:36'),(42,'59. 螺旋矩阵 II','给定一个正整数 *n*，生成一个包含 1 到 *n*2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。\n\n**示例:**\n\n```\n输入: 3\n输出:\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\n```\n\n\n','<p>给定一个正整数 *n*，生成一个包含 1 到 *n*2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: 3</p><p>输出:</p><p>[</p><p> [ 1, 2, 3 ],</p><p> [ 8, 9, 4 ],</p><p> [ 7, 6, 5 ]</p><p>]</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6b63\\u6574\\u6570 *n*\\uff0c\\u751f\\u6210\\u4e00\\u4e2a\\u5305\\u542b 1 \\u5230 *n*2 \\u6240\\u6709\\u5143\\u7d20\\uff0c\\u4e14\\u5143\\u7d20\\u6309\\u987a\\u65f6\\u9488\\u987a\\u5e8f\\u87ba\\u65cb\\u6392\\u5217\\u7684\\u6b63\\u65b9\\u5f62\\u77e9\\u9635\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: 3\\n\\u8f93\\u51fa:\\n[\\n [ 1, 2, 3 ],\\n [ 8, 9, 4 ],\\n [ 7, 6, 5 ]\\n]\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:32:56'),(43,'58. 最后一个单词的长度','\n给定一个仅包含大小写字母和空格 `\' \'` 的字符串 `s`，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。\n\n如果不存在最后一个单词，请返回 0 。\n\n**说明：**一个单词是指仅由字母组成、不包含任何空格字符的 **最大子字符串**。\n\n \n\n**示例:**\n\n```\n输入: \"Hello World\"\n输出: 5\n```\n\n','<p><br></p><p>给定一个仅包含大小写字母和空格 `\' \'` 的字符串 `s`，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。</p><p><br></p><p>如果不存在最后一个单词，请返回 0 。</p><p><br></p><p>**说明：**一个单词是指仅由字母组成、不包含任何空格字符的 **最大子字符串**。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: \"Hello World\"</p><p>输出: 5</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u4ec5\\u5305\\u542b\\u5927\\u5c0f\\u5199\\u5b57\\u6bcd\\u548c\\u7a7a\\u683c `\' \'` \\u7684\\u5b57\\u7b26\\u4e32 `s`\\uff0c\\u8fd4\\u56de\\u5176\\u6700\\u540e\\u4e00\\u4e2a\\u5355\\u8bcd\\u7684\\u957f\\u5ea6\\u3002\\u5982\\u679c\\u5b57\\u7b26\\u4e32\\u4ece\\u5de6\\u5411\\u53f3\\u6eda\\u52a8\\u663e\\u793a\\uff0c\\u90a3\\u4e48\\u6700\\u540e\\u4e00\\u4e2a\\u5355\\u8bcd\\u5c31\\u662f\\u6700\\u540e\\u51fa\\u73b0\\u7684\\u5355\\u8bcd\\u3002\\n\\n\\u5982\\u679c\\u4e0d\\u5b58\\u5728\\u6700\\u540e\\u4e00\\u4e2a\\u5355\\u8bcd\\uff0c\\u8bf7\\u8fd4\\u56de 0 \\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\u4e00\\u4e2a\\u5355\\u8bcd\\u662f\\u6307\\u4ec5\\u7531\\u5b57\\u6bcd\\u7ec4\\u6210\\u3001\\u4e0d\\u5305\\u542b\\u4efb\\u4f55\\u7a7a\\u683c\\u5b57\\u7b26\\u7684 **\\u6700\\u5927\\u5b50\\u5b57\\u7b26\\u4e32**\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: \\\"Hello World\\\"\\n\\u8f93\\u51fa: 5\\n```\\n\\n\"}]}','green','2020-08-12 12:33:08'),(44,'57. 插入区间','\n给出一个*无重叠的 ，*按照区间起始端点排序的区间列表。\n\n在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。\n\n**示例 1:**\n\n```\n输入: intervals = [[1,3],[6,9]], newInterval = [2,5]\n输出: [[1,5],[6,9]]\n```\n\n**示例 2:**\n\n```\n输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n输出: [[1,2],[3,10],[12,16]]\n解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。\n```\n\n','<p><br></p><p>给出一个*无重叠的 ，*按照区间起始端点排序的区间列表。</p><p><br></p><p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: intervals = [[1,3],[6,9]], newInterval = [2,5]</p><p>输出: [[1,5],[6,9]]</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]</p><p>输出: [[1,2],[3,10],[12,16]]</p><p>解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u51fa\\u4e00\\u4e2a*\\u65e0\\u91cd\\u53e0\\u7684 \\uff0c*\\u6309\\u7167\\u533a\\u95f4\\u8d77\\u59cb\\u7aef\\u70b9\\u6392\\u5e8f\\u7684\\u533a\\u95f4\\u5217\\u8868\\u3002\\n\\n\\u5728\\u5217\\u8868\\u4e2d\\u63d2\\u5165\\u4e00\\u4e2a\\u65b0\\u7684\\u533a\\u95f4\\uff0c\\u4f60\\u9700\\u8981\\u786e\\u4fdd\\u5217\\u8868\\u4e2d\\u7684\\u533a\\u95f4\\u4ecd\\u7136\\u6709\\u5e8f\\u4e14\\u4e0d\\u91cd\\u53e0\\uff08\\u5982\\u679c\\u6709\\u5fc5\\u8981\\u7684\\u8bdd\\uff0c\\u53ef\\u4ee5\\u5408\\u5e76\\u533a\\u95f4\\uff09\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: intervals = [[1,3],[6,9]], newInterval = [2,5]\\n\\u8f93\\u51fa: [[1,5],[6,9]]\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\\n\\u8f93\\u51fa: [[1,2],[3,10],[12,16]]\\n\\u89e3\\u91ca: \\u8fd9\\u662f\\u56e0\\u4e3a\\u65b0\\u7684\\u533a\\u95f4 [4,8] \\u4e0e [3,5],[6,7],[8,10] \\u91cd\\u53e0\\u3002\\n```\\n\\n\"}]}','red','2020-08-12 12:33:25'),(45,'56. 合并区间','给出一个区间的集合，请合并所有重叠的区间。\n\n**示例 1:**\n\n```\n输入: [[1,3],[2,6],[8,10],[15,18]]\n输出: [[1,6],[8,10],[15,18]]\n解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n```\n\n**示例 2:**\n\n```\n输入: [[1,4],[4,5]]\n输出: [[1,5]]\n解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n```\n\n','<p>给出一个区间的集合，请合并所有重叠的区间。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [[1,3],[2,6],[8,10],[15,18]]</p><p>输出: [[1,6],[8,10],[15,18]]</p><p>解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [[1,4],[4,5]]</p><p>输出: [[1,5]]</p><p>解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u51fa\\u4e00\\u4e2a\\u533a\\u95f4\\u7684\\u96c6\\u5408\\uff0c\\u8bf7\\u5408\\u5e76\\u6240\\u6709\\u91cd\\u53e0\\u7684\\u533a\\u95f4\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [[1,3],[2,6],[8,10],[15,18]]\\n\\u8f93\\u51fa: [[1,6],[8,10],[15,18]]\\n\\u89e3\\u91ca: \\u533a\\u95f4 [1,3] \\u548c [2,6] \\u91cd\\u53e0, \\u5c06\\u5b83\\u4eec\\u5408\\u5e76\\u4e3a [1,6].\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [[1,4],[4,5]]\\n\\u8f93\\u51fa: [[1,5]]\\n\\u89e3\\u91ca: \\u533a\\u95f4 [1,4] \\u548c [4,5] \\u53ef\\u88ab\\u89c6\\u4e3a\\u91cd\\u53e0\\u533a\\u95f4\\u3002\\n```\\n\\n\"}]}','yellow','2020-08-12 12:33:37'),(46,'55. 跳跃游戏','\n给定一个非负整数数组，你最初位于数组的第一个位置。\n\n数组中的每个元素代表你在该位置可以跳跃的最大长度。\n\n判断你是否能够到达最后一个位置。\n\n**示例 1:**\n\n```\n输入: [2,3,1,1,4]\n输出: true\n解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。\n```\n\n**示例 2:**\n\n```\n输入: [3,2,1,0,4]\n输出: false\n解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。\n```\n','<p><br></p><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p><br></p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p><br></p><p>判断你是否能够到达最后一个位置。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [2,3,1,1,4]</p><p>输出: true</p><p>解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [3,2,1,0,4]</p><p>输出: false</p><p>解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u975e\\u8d1f\\u6574\\u6570\\u6570\\u7ec4\\uff0c\\u4f60\\u6700\\u521d\\u4f4d\\u4e8e\\u6570\\u7ec4\\u7684\\u7b2c\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u3002\\n\\n\\u6570\\u7ec4\\u4e2d\\u7684\\u6bcf\\u4e2a\\u5143\\u7d20\\u4ee3\\u8868\\u4f60\\u5728\\u8be5\\u4f4d\\u7f6e\\u53ef\\u4ee5\\u8df3\\u8dc3\\u7684\\u6700\\u5927\\u957f\\u5ea6\\u3002\\n\\n\\u5224\\u65ad\\u4f60\\u662f\\u5426\\u80fd\\u591f\\u5230\\u8fbe\\u6700\\u540e\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [2,3,1,1,4]\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \\u6211\\u4eec\\u53ef\\u4ee5\\u5148\\u8df3 1 \\u6b65\\uff0c\\u4ece\\u4f4d\\u7f6e 0 \\u5230\\u8fbe \\u4f4d\\u7f6e 1, \\u7136\\u540e\\u518d\\u4ece\\u4f4d\\u7f6e 1 \\u8df3 3 \\u6b65\\u5230\\u8fbe\\u6700\\u540e\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [3,2,1,0,4]\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \\u65e0\\u8bba\\u600e\\u6837\\uff0c\\u4f60\\u603b\\u4f1a\\u5230\\u8fbe\\u7d22\\u5f15\\u4e3a 3 \\u7684\\u4f4d\\u7f6e\\u3002\\u4f46\\u8be5\\u4f4d\\u7f6e\\u7684\\u6700\\u5927\\u8df3\\u8dc3\\u957f\\u5ea6\\u662f 0 \\uff0c \\u6240\\u4ee5\\u4f60\\u6c38\\u8fdc\\u4e0d\\u53ef\\u80fd\\u5230\\u8fbe\\u6700\\u540e\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u3002\\n```\\n\"}]}','yellow','2020-08-12 12:33:49'),(47,'54. 螺旋矩阵','给定一个包含 *m* x *n* 个元素的矩阵（*m* 行, *n* 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。\n\n**示例 1:**\n\n```\n输入:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n输出: [1,2,3,6,9,8,7,4,5]\n```\n\n**示例 2:**\n\n```\n输入:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\n输出: [1,2,3,4,8,12,11,10,9,5,6,7]\n```\n','<p>给定一个包含 *m* x *n* 个元素的矩阵（*m* 行, *n* 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入:</p><p>[</p><p> [ 1, 2, 3 ],</p><p> [ 4, 5, 6 ],</p><p> [ 7, 8, 9 ]</p><p>]</p><p>输出: [1,2,3,6,9,8,7,4,5]</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入:</p><p>[</p><p>  [1, 2, 3, 4],</p><p>  [5, 6, 7, 8],</p><p>  [9,10,11,12]</p><p>]</p><p>输出: [1,2,3,4,8,12,11,10,9,5,6,7]</p><p>```</p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5305\\u542b *m* x *n* \\u4e2a\\u5143\\u7d20\\u7684\\u77e9\\u9635\\uff08*m* \\u884c, *n* \\u5217\\uff09\\uff0c\\u8bf7\\u6309\\u7167\\u987a\\u65f6\\u9488\\u87ba\\u65cb\\u987a\\u5e8f\\uff0c\\u8fd4\\u56de\\u77e9\\u9635\\u4e2d\\u7684\\u6240\\u6709\\u5143\\u7d20\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\n[\\n [ 1, 2, 3 ],\\n [ 4, 5, 6 ],\\n [ 7, 8, 9 ]\\n]\\n\\u8f93\\u51fa: [1,2,3,6,9,8,7,4,5]\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165:\\n[\\n  [1, 2, 3, 4],\\n  [5, 6, 7, 8],\\n  [9,10,11,12]\\n]\\n\\u8f93\\u51fa: [1,2,3,4,8,12,11,10,9,5,6,7]\\n```\\n\"}]}','yellow','2020-08-12 12:34:05'),(48,'53. 最大子序和','\n给定一个整数数组 `nums` ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n**示例:**\n\n```\n输入: [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n```\n\n**进阶:**\n\n如果你已经实现复杂度为 O(*n*) 的解法，尝试使用更为精妙的分治法求解。\n\n\n','<p><br></p><p>给定一个整数数组 `nums` ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: [-2,1,-3,4,-1,2,1,-5,4]</p><p>输出: 6</p><p>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p><p>```</p><p><br></p><p>**进阶:**</p><p><br></p><p>如果你已经实现复杂度为 O(*n*) 的解法，尝试使用更为精妙的分治法求解。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6574\\u6570\\u6570\\u7ec4 `nums` \\uff0c\\u627e\\u5230\\u4e00\\u4e2a\\u5177\\u6709\\u6700\\u5927\\u548c\\u7684\\u8fde\\u7eed\\u5b50\\u6570\\u7ec4\\uff08\\u5b50\\u6570\\u7ec4\\u6700\\u5c11\\u5305\\u542b\\u4e00\\u4e2a\\u5143\\u7d20\\uff09\\uff0c\\u8fd4\\u56de\\u5176\\u6700\\u5927\\u548c\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [-2,1,-3,4,-1,2,1,-5,4]\\n\\u8f93\\u51fa: 6\\n\\u89e3\\u91ca: \\u8fde\\u7eed\\u5b50\\u6570\\u7ec4 [4,-1,2,1] \\u7684\\u548c\\u6700\\u5927\\uff0c\\u4e3a 6\\u3002\\n```\\n\\n**\\u8fdb\\u9636:**\\n\\n\\u5982\\u679c\\u4f60\\u5df2\\u7ecf\\u5b9e\\u73b0\\u590d\\u6742\\u5ea6\\u4e3a O(*n*) \\u7684\\u89e3\\u6cd5\\uff0c\\u5c1d\\u8bd5\\u4f7f\\u7528\\u66f4\\u4e3a\\u7cbe\\u5999\\u7684\\u5206\\u6cbb\\u6cd5\\u6c42\\u89e3\\u3002\\n\\n\\n\"}]}','green','2020-08-12 12:34:18'),(49,'52. N皇后 II','*n* 皇后问题研究的是如何将 *n* 个皇后放置在 *n*×*n* 的棋盘上，并且使皇后彼此之间不能相互攻击。\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png)\n\n上图为 8 皇后问题的一种解法。\n\n给定一个整数 *n*，返回 *n* 皇后不同的解决方案的数量。\n\n**示例:**\n\n```\n输入: 4\n输出: 2\n解释: 4 皇后问题存在如下两个不同的解法。\n[\n [\".Q..\",  // 解法 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // 解法 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n```\n\n \n\n**提示：**\n\n- **皇后**，是[国际象棋](https://baike.baidu.com/item/国际象棋)中的棋子，意味着[国王](https://baike.baidu.com/item/国王)的妻子。皇后只做一件事，那就是“[吃子](https://baike.baidu.com/item/吃子)”。当她遇见可以吃的棋子时，就迅速冲上去吃掉棋子。当然，她横、竖、斜都可走一或 N-1 步，可进可退。（引用自 [百度百科 - 皇后](https://baike.baidu.com/item/皇后/15860305?fr=aladdin) ）\n\n','<p>*n* 皇后问题研究的是如何将 *n* 个皇后放置在 *n*×*n* 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p><br></p><p>![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png)</p><p><br></p><p>上图为 8 皇后问题的一种解法。</p><p><br></p><p>给定一个整数 *n*，返回 *n* 皇后不同的解决方案的数量。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: 4</p><p>输出: 2</p><p>解释: 4 皇后问题存在如下两个不同的解法。</p><p>[</p><p> [\".Q..\",  // 解法 1</p><p>  \"...Q\",</p><p>  \"Q...\",</p><p>  \"..Q.\"],</p><p><br></p><p> [\"..Q.\",  // 解法 2</p><p>  \"Q...\",</p><p>  \"...Q\",</p><p>  \".Q..\"]</p><p>]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- **皇后**，是[国际象棋](https://baike.baidu.com/item/国际象棋)中的棋子，意味着[国王](https://baike.baidu.com/item/国王)的妻子。皇后只做一件事，那就是“[吃子](https://baike.baidu.com/item/吃子)”。当她遇见可以吃的棋子时，就迅速冲上去吃掉棋子。当然，她横、竖、斜都可走一或 N-1 步，可进可退。（引用自 [百度百科 - 皇后](https://baike.baidu.com/item/皇后/15860305?fr=aladdin) ）</p><p><br></p>','{\"ops\": [{\"insert\": \"*n* \\u7687\\u540e\\u95ee\\u9898\\u7814\\u7a76\\u7684\\u662f\\u5982\\u4f55\\u5c06 *n* \\u4e2a\\u7687\\u540e\\u653e\\u7f6e\\u5728 *n*\\u00d7*n* \\u7684\\u68cb\\u76d8\\u4e0a\\uff0c\\u5e76\\u4e14\\u4f7f\\u7687\\u540e\\u5f7c\\u6b64\\u4e4b\\u95f4\\u4e0d\\u80fd\\u76f8\\u4e92\\u653b\\u51fb\\u3002\\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png)\\n\\n\\u4e0a\\u56fe\\u4e3a 8 \\u7687\\u540e\\u95ee\\u9898\\u7684\\u4e00\\u79cd\\u89e3\\u6cd5\\u3002\\n\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6574\\u6570 *n*\\uff0c\\u8fd4\\u56de *n* \\u7687\\u540e\\u4e0d\\u540c\\u7684\\u89e3\\u51b3\\u65b9\\u6848\\u7684\\u6570\\u91cf\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: 4\\n\\u8f93\\u51fa: 2\\n\\u89e3\\u91ca: 4 \\u7687\\u540e\\u95ee\\u9898\\u5b58\\u5728\\u5982\\u4e0b\\u4e24\\u4e2a\\u4e0d\\u540c\\u7684\\u89e3\\u6cd5\\u3002\\n[\\n [\\\".Q..\\\",  // \\u89e3\\u6cd5 1\\n  \\\"...Q\\\",\\n  \\\"Q...\\\",\\n  \\\"..Q.\\\"],\\n\\n [\\\"..Q.\\\",  // \\u89e3\\u6cd5 2\\n  \\\"Q...\\\",\\n  \\\"...Q\\\",\\n  \\\".Q..\\\"]\\n]\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- **\\u7687\\u540e**\\uff0c\\u662f[\\u56fd\\u9645\\u8c61\\u68cb](https://baike.baidu.com/item/\\u56fd\\u9645\\u8c61\\u68cb)\\u4e2d\\u7684\\u68cb\\u5b50\\uff0c\\u610f\\u5473\\u7740[\\u56fd\\u738b](https://baike.baidu.com/item/\\u56fd\\u738b)\\u7684\\u59bb\\u5b50\\u3002\\u7687\\u540e\\u53ea\\u505a\\u4e00\\u4ef6\\u4e8b\\uff0c\\u90a3\\u5c31\\u662f\\u201c[\\u5403\\u5b50](https://baike.baidu.com/item/\\u5403\\u5b50)\\u201d\\u3002\\u5f53\\u5979\\u9047\\u89c1\\u53ef\\u4ee5\\u5403\\u7684\\u68cb\\u5b50\\u65f6\\uff0c\\u5c31\\u8fc5\\u901f\\u51b2\\u4e0a\\u53bb\\u5403\\u6389\\u68cb\\u5b50\\u3002\\u5f53\\u7136\\uff0c\\u5979\\u6a2a\\u3001\\u7ad6\\u3001\\u659c\\u90fd\\u53ef\\u8d70\\u4e00\\u6216 N-1 \\u6b65\\uff0c\\u53ef\\u8fdb\\u53ef\\u9000\\u3002\\uff08\\u5f15\\u7528\\u81ea [\\u767e\\u5ea6\\u767e\\u79d1 - \\u7687\\u540e](https://baike.baidu.com/item/\\u7687\\u540e/15860305?fr=aladdin) \\uff09\\n\\n\"}]}','red','2020-08-12 12:34:50'),(50,'51. N皇后','\n*n* 皇后问题研究的是如何将 *n* 个皇后放置在 *n*×*n* 的棋盘上，并且使皇后彼此之间不能相互攻击。\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png)\n\n上图为 8 皇后问题的一种解法。\n\n给定一个整数 *n*，返回所有不同的 *n* 皇后问题的解决方案。\n\n每一种解法包含一个明确的 *n* 皇后问题的棋子放置方案，该方案中 `\'Q\'` 和 `\'.\'` 分别代表了皇后和空位。\n\n**示例:**\n\n```\n输入: 4\n输出: [\n [\".Q..\",  // 解法 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // 解法 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n解释: 4 皇后问题存在两个不同的解法。\n```\n\n \n\n**提示：**\n\n- **皇后**，是[国际象棋](https://baike.baidu.com/item/国际象棋)中的棋子，意味着[国王](https://baike.baidu.com/item/国王)的妻子。皇后只做一件事，那就是“[吃子](https://baike.baidu.com/item/吃子)”。当她遇见可以吃的棋子时，就迅速冲上去吃掉棋子。当然，她横、竖、斜都可走一到七步，可进可退。（引用自 [百度百科 - 皇后](https://baike.baidu.com/item/皇后/15860305?fr=aladdin) ）\n\n','<p><br></p><p>*n* 皇后问题研究的是如何将 *n* 个皇后放置在 *n*×*n* 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p><br></p><p>![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png)</p><p><br></p><p>上图为 8 皇后问题的一种解法。</p><p><br></p><p>给定一个整数 *n*，返回所有不同的 *n* 皇后问题的解决方案。</p><p><br></p><p>每一种解法包含一个明确的 *n* 皇后问题的棋子放置方案，该方案中 `\'Q\'` 和 `\'.\'` 分别代表了皇后和空位。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: 4</p><p>输出: [</p><p> [\".Q..\",  // 解法 1</p><p>  \"...Q\",</p><p>  \"Q...\",</p><p>  \"..Q.\"],</p><p><br></p><p> [\"..Q.\",  // 解法 2</p><p>  \"Q...\",</p><p>  \"...Q\",</p><p>  \".Q..\"]</p><p>]</p><p>解释: 4 皇后问题存在两个不同的解法。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- **皇后**，是[国际象棋](https://baike.baidu.com/item/国际象棋)中的棋子，意味着[国王](https://baike.baidu.com/item/国王)的妻子。皇后只做一件事，那就是“[吃子](https://baike.baidu.com/item/吃子)”。当她遇见可以吃的棋子时，就迅速冲上去吃掉棋子。当然，她横、竖、斜都可走一到七步，可进可退。（引用自 [百度百科 - 皇后](https://baike.baidu.com/item/皇后/15860305?fr=aladdin) ）</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n*n* \\u7687\\u540e\\u95ee\\u9898\\u7814\\u7a76\\u7684\\u662f\\u5982\\u4f55\\u5c06 *n* \\u4e2a\\u7687\\u540e\\u653e\\u7f6e\\u5728 *n*\\u00d7*n* \\u7684\\u68cb\\u76d8\\u4e0a\\uff0c\\u5e76\\u4e14\\u4f7f\\u7687\\u540e\\u5f7c\\u6b64\\u4e4b\\u95f4\\u4e0d\\u80fd\\u76f8\\u4e92\\u653b\\u51fb\\u3002\\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png)\\n\\n\\u4e0a\\u56fe\\u4e3a 8 \\u7687\\u540e\\u95ee\\u9898\\u7684\\u4e00\\u79cd\\u89e3\\u6cd5\\u3002\\n\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6574\\u6570 *n*\\uff0c\\u8fd4\\u56de\\u6240\\u6709\\u4e0d\\u540c\\u7684 *n* \\u7687\\u540e\\u95ee\\u9898\\u7684\\u89e3\\u51b3\\u65b9\\u6848\\u3002\\n\\n\\u6bcf\\u4e00\\u79cd\\u89e3\\u6cd5\\u5305\\u542b\\u4e00\\u4e2a\\u660e\\u786e\\u7684 *n* \\u7687\\u540e\\u95ee\\u9898\\u7684\\u68cb\\u5b50\\u653e\\u7f6e\\u65b9\\u6848\\uff0c\\u8be5\\u65b9\\u6848\\u4e2d `\'Q\'` \\u548c `\'.\'` \\u5206\\u522b\\u4ee3\\u8868\\u4e86\\u7687\\u540e\\u548c\\u7a7a\\u4f4d\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: 4\\n\\u8f93\\u51fa: [\\n [\\\".Q..\\\",  // \\u89e3\\u6cd5 1\\n  \\\"...Q\\\",\\n  \\\"Q...\\\",\\n  \\\"..Q.\\\"],\\n\\n [\\\"..Q.\\\",  // \\u89e3\\u6cd5 2\\n  \\\"Q...\\\",\\n  \\\"...Q\\\",\\n  \\\".Q..\\\"]\\n]\\n\\u89e3\\u91ca: 4 \\u7687\\u540e\\u95ee\\u9898\\u5b58\\u5728\\u4e24\\u4e2a\\u4e0d\\u540c\\u7684\\u89e3\\u6cd5\\u3002\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- **\\u7687\\u540e**\\uff0c\\u662f[\\u56fd\\u9645\\u8c61\\u68cb](https://baike.baidu.com/item/\\u56fd\\u9645\\u8c61\\u68cb)\\u4e2d\\u7684\\u68cb\\u5b50\\uff0c\\u610f\\u5473\\u7740[\\u56fd\\u738b](https://baike.baidu.com/item/\\u56fd\\u738b)\\u7684\\u59bb\\u5b50\\u3002\\u7687\\u540e\\u53ea\\u505a\\u4e00\\u4ef6\\u4e8b\\uff0c\\u90a3\\u5c31\\u662f\\u201c[\\u5403\\u5b50](https://baike.baidu.com/item/\\u5403\\u5b50)\\u201d\\u3002\\u5f53\\u5979\\u9047\\u89c1\\u53ef\\u4ee5\\u5403\\u7684\\u68cb\\u5b50\\u65f6\\uff0c\\u5c31\\u8fc5\\u901f\\u51b2\\u4e0a\\u53bb\\u5403\\u6389\\u68cb\\u5b50\\u3002\\u5f53\\u7136\\uff0c\\u5979\\u6a2a\\u3001\\u7ad6\\u3001\\u659c\\u90fd\\u53ef\\u8d70\\u4e00\\u5230\\u4e03\\u6b65\\uff0c\\u53ef\\u8fdb\\u53ef\\u9000\\u3002\\uff08\\u5f15\\u7528\\u81ea [\\u767e\\u5ea6\\u767e\\u79d1 - \\u7687\\u540e](https://baike.baidu.com/item/\\u7687\\u540e/15860305?fr=aladdin) \\uff09\\n\\n\"}]}','red','2020-08-12 12:35:20'),(51,'50. Pow(x, n)','\n实现 [pow(*x*, *n*)](https://www.cplusplus.com/reference/valarray/pow/) ，即计算 x 的 n 次幂函数。\n\n**示例 1:**\n\n```\n输入: 2.00000, 10\n输出: 1024.00000\n```\n\n**示例 2:**\n\n```\n输入: 2.10000, 3\n输出: 9.26100\n```\n\n**示例 3:**\n\n```\n输入: 2.00000, -2\n输出: 0.25000\n解释: 2-2 = 1/22 = 1/4 = 0.25\n```\n\n**说明:**\n\n- -100.0 < *x* < 100.0\n- *n* 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。\n\n\n','<p><br></p><p>实现 [pow(*x*, *n*)](https://www.cplusplus.com/reference/valarray/pow/) ，即计算 x 的 n 次幂函数。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 2.00000, 10</p><p>输出: 1024.00000</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: 2.10000, 3</p><p>输出: 9.26100</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: 2.00000, -2</p><p>输出: 0.25000</p><p>解释: 2-2 = 1/22 = 1/4 = 0.25</p><p>```</p><p><br></p><p>**说明:**</p><p><br></p><p>- -100.0 &lt; *x* &lt; 100.0</p><p>- *n* 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5b9e\\u73b0 [pow(*x*, *n*)](https://www.cplusplus.com/reference/valarray/pow/) \\uff0c\\u5373\\u8ba1\\u7b97 x \\u7684 n \\u6b21\\u5e42\\u51fd\\u6570\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 2.00000, 10\\n\\u8f93\\u51fa: 1024.00000\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 2.10000, 3\\n\\u8f93\\u51fa: 9.26100\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: 2.00000, -2\\n\\u8f93\\u51fa: 0.25000\\n\\u89e3\\u91ca: 2-2 = 1/22 = 1/4 = 0.25\\n```\\n\\n**\\u8bf4\\u660e:**\\n\\n- -100.0 < *x* < 100.0\\n- *n* \\u662f 32 \\u4f4d\\u6709\\u7b26\\u53f7\\u6574\\u6570\\uff0c\\u5176\\u6570\\u503c\\u8303\\u56f4\\u662f [\\u2212231, 231 \\u2212 1] \\u3002\\n\\n\\n\"}]}','yellow','2020-08-12 12:35:46'),(52,'49. 字母异位词分组','\n给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。\n\n**示例:**\n\n```\n输入: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n输出:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n```\n\n**说明：**\n\n- 所有输入均为小写字母。\n- 不考虑答案输出的顺序。\n\n\n','<p><br></p><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]</p><p>输出:</p><p>[</p><p>  [\"ate\",\"eat\",\"tea\"],</p><p>  [\"nat\",\"tan\"],</p><p>  [\"bat\"]</p><p>]</p><p>```</p><p><br></p><p>**说明：**</p><p><br></p><p>- 所有输入均为小写字母。</p><p>- 不考虑答案输出的顺序。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\u6570\\u7ec4\\uff0c\\u5c06\\u5b57\\u6bcd\\u5f02\\u4f4d\\u8bcd\\u7ec4\\u5408\\u5728\\u4e00\\u8d77\\u3002\\u5b57\\u6bcd\\u5f02\\u4f4d\\u8bcd\\u6307\\u5b57\\u6bcd\\u76f8\\u540c\\uff0c\\u4f46\\u6392\\u5217\\u4e0d\\u540c\\u7684\\u5b57\\u7b26\\u4e32\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [\\\"eat\\\", \\\"tea\\\", \\\"tan\\\", \\\"ate\\\", \\\"nat\\\", \\\"bat\\\"]\\n\\u8f93\\u51fa:\\n[\\n  [\\\"ate\\\",\\\"eat\\\",\\\"tea\\\"],\\n  [\\\"nat\\\",\\\"tan\\\"],\\n  [\\\"bat\\\"]\\n]\\n```\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n- \\u6240\\u6709\\u8f93\\u5165\\u5747\\u4e3a\\u5c0f\\u5199\\u5b57\\u6bcd\\u3002\\n- \\u4e0d\\u8003\\u8651\\u7b54\\u6848\\u8f93\\u51fa\\u7684\\u987a\\u5e8f\\u3002\\n\\n\\n\"}]}','yellow','2020-08-12 12:36:02'),(53,'48. 旋转图像','\n给定一个 *n* × *n* 的二维矩阵表示一个图像。\n\n将图像顺时针旋转 90 度。\n\n**说明：**\n\n你必须在**[原地](https://baike.baidu.com/item/原地算法)**旋转图像，这意味着你需要直接修改输入的二维矩阵。**请不要**使用另一个矩阵来旋转图像。\n\n**示例 1:**\n\n```\n给定 matrix = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n原地旋转输入矩阵，使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n```\n\n**示例 2:**\n\n```\n给定 matrix =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n原地旋转输入矩阵，使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n```\n\n\n','<p><br></p><p>给定一个 *n* × *n* 的二维矩阵表示一个图像。</p><p><br></p><p>将图像顺时针旋转 90 度。</p><p><br></p><p>**说明：**</p><p><br></p><p>你必须在**[原地](https://baike.baidu.com/item/原地算法)**旋转图像，这意味着你需要直接修改输入的二维矩阵。**请不要**使用另一个矩阵来旋转图像。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>给定 matrix = </p><p>[</p><p>  [1,2,3],</p><p>  [4,5,6],</p><p>  [7,8,9]</p><p>],</p><p><br></p><p>原地旋转输入矩阵，使其变为:</p><p>[</p><p>  [7,4,1],</p><p>  [8,5,2],</p><p>  [9,6,3]</p><p>]</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>给定 matrix =</p><p>[</p><p>  [ 5, 1, 9,11],</p><p>  [ 2, 4, 8,10],</p><p>  [13, 3, 6, 7],</p><p>  [15,14,12,16]</p><p>], </p><p><br></p><p>原地旋转输入矩阵，使其变为:</p><p>[</p><p>  [15,13, 2, 5],</p><p>  [14, 3, 4, 1],</p><p>  [12, 6, 8, 9],</p><p>  [16, 7,10,11]</p><p>]</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a *n* \\u00d7 *n* \\u7684\\u4e8c\\u7ef4\\u77e9\\u9635\\u8868\\u793a\\u4e00\\u4e2a\\u56fe\\u50cf\\u3002\\n\\n\\u5c06\\u56fe\\u50cf\\u987a\\u65f6\\u9488\\u65cb\\u8f6c 90 \\u5ea6\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n\\u4f60\\u5fc5\\u987b\\u5728**[\\u539f\\u5730](https://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)**\\u65cb\\u8f6c\\u56fe\\u50cf\\uff0c\\u8fd9\\u610f\\u5473\\u7740\\u4f60\\u9700\\u8981\\u76f4\\u63a5\\u4fee\\u6539\\u8f93\\u5165\\u7684\\u4e8c\\u7ef4\\u77e9\\u9635\\u3002**\\u8bf7\\u4e0d\\u8981**\\u4f7f\\u7528\\u53e6\\u4e00\\u4e2a\\u77e9\\u9635\\u6765\\u65cb\\u8f6c\\u56fe\\u50cf\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u7ed9\\u5b9a matrix = \\n[\\n  [1,2,3],\\n  [4,5,6],\\n  [7,8,9]\\n],\\n\\n\\u539f\\u5730\\u65cb\\u8f6c\\u8f93\\u5165\\u77e9\\u9635\\uff0c\\u4f7f\\u5176\\u53d8\\u4e3a:\\n[\\n  [7,4,1],\\n  [8,5,2],\\n  [9,6,3]\\n]\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u7ed9\\u5b9a matrix =\\n[\\n  [ 5, 1, 9,11],\\n  [ 2, 4, 8,10],\\n  [13, 3, 6, 7],\\n  [15,14,12,16]\\n], \\n\\n\\u539f\\u5730\\u65cb\\u8f6c\\u8f93\\u5165\\u77e9\\u9635\\uff0c\\u4f7f\\u5176\\u53d8\\u4e3a:\\n[\\n  [15,13, 2, 5],\\n  [14, 3, 4, 1],\\n  [12, 6, 8, 9],\\n  [16, 7,10,11]\\n]\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:36:19'),(54,'47. 全排列 II','\n给定一个可包含重复数字的序列，返回所有不重复的全排列。\n\n**示例:**\n\n```\n输入: [1,1,2]\n输出:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n```\n\n','<p><br></p><p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: [1,1,2]</p><p>输出:</p><p>[</p><p>  [1,1,2],</p><p>  [1,2,1],</p><p>  [2,1,1]</p><p>]</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u53ef\\u5305\\u542b\\u91cd\\u590d\\u6570\\u5b57\\u7684\\u5e8f\\u5217\\uff0c\\u8fd4\\u56de\\u6240\\u6709\\u4e0d\\u91cd\\u590d\\u7684\\u5168\\u6392\\u5217\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [1,1,2]\\n\\u8f93\\u51fa:\\n[\\n  [1,1,2],\\n  [1,2,1],\\n  [2,1,1]\\n]\\n```\\n\\n\"}]}','yellow','2020-08-12 12:36:35'),(55,'46. 全排列','\n给定一个 **没有重复** 数字的序列，返回其所有可能的全排列。\n\n**示例:**\n\n```\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n','<p><br></p><p>给定一个 **没有重复** 数字的序列，返回其所有可能的全排列。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: [1,2,3]</p><p>输出:</p><p>[</p><p>  [1,2,3],</p><p>  [1,3,2],</p><p>  [2,1,3],</p><p>  [2,3,1],</p><p>  [3,1,2],</p><p>  [3,2,1]</p><p>]</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a **\\u6ca1\\u6709\\u91cd\\u590d** \\u6570\\u5b57\\u7684\\u5e8f\\u5217\\uff0c\\u8fd4\\u56de\\u5176\\u6240\\u6709\\u53ef\\u80fd\\u7684\\u5168\\u6392\\u5217\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [1,2,3]\\n\\u8f93\\u51fa:\\n[\\n  [1,2,3],\\n  [1,3,2],\\n  [2,1,3],\\n  [2,3,1],\\n  [3,1,2],\\n  [3,2,1]\\n]\\n```\\n\\n\"}]}','yellow','2020-08-12 12:36:51'),(56,'45. 跳跃游戏 II','给定一个非负整数数组，你最初位于数组的第一个位置。\n\n数组中的每个元素代表你在该位置可以跳跃的最大长度。\n\n你的目标是使用最少的跳跃次数到达数组的最后一个位置。\n\n**示例:**\n\n```\n输入: [2,3,1,1,4]\n输出: 2\n解释: 跳到最后一个位置的最小跳跃数是 2。\n     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\n```\n\n**说明:**\n\n假设你总是可以到达数组的最后一个位置。\n\n','<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p><br></p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p><br></p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: [2,3,1,1,4]</p><p>输出: 2</p><p>解释: 跳到最后一个位置的最小跳跃数是 2。</p><p>     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</p><p>```</p><p><br></p><p>**说明:**</p><p><br></p><p>假设你总是可以到达数组的最后一个位置。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u975e\\u8d1f\\u6574\\u6570\\u6570\\u7ec4\\uff0c\\u4f60\\u6700\\u521d\\u4f4d\\u4e8e\\u6570\\u7ec4\\u7684\\u7b2c\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u3002\\n\\n\\u6570\\u7ec4\\u4e2d\\u7684\\u6bcf\\u4e2a\\u5143\\u7d20\\u4ee3\\u8868\\u4f60\\u5728\\u8be5\\u4f4d\\u7f6e\\u53ef\\u4ee5\\u8df3\\u8dc3\\u7684\\u6700\\u5927\\u957f\\u5ea6\\u3002\\n\\n\\u4f60\\u7684\\u76ee\\u6807\\u662f\\u4f7f\\u7528\\u6700\\u5c11\\u7684\\u8df3\\u8dc3\\u6b21\\u6570\\u5230\\u8fbe\\u6570\\u7ec4\\u7684\\u6700\\u540e\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [2,3,1,1,4]\\n\\u8f93\\u51fa: 2\\n\\u89e3\\u91ca: \\u8df3\\u5230\\u6700\\u540e\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u7684\\u6700\\u5c0f\\u8df3\\u8dc3\\u6570\\u662f 2\\u3002\\n     \\u4ece\\u4e0b\\u6807\\u4e3a 0 \\u8df3\\u5230\\u4e0b\\u6807\\u4e3a 1 \\u7684\\u4f4d\\u7f6e\\uff0c\\u8df3 1 \\u6b65\\uff0c\\u7136\\u540e\\u8df3 3 \\u6b65\\u5230\\u8fbe\\u6570\\u7ec4\\u7684\\u6700\\u540e\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u3002\\n```\\n\\n**\\u8bf4\\u660e:**\\n\\n\\u5047\\u8bbe\\u4f60\\u603b\\u662f\\u53ef\\u4ee5\\u5230\\u8fbe\\u6570\\u7ec4\\u7684\\u6700\\u540e\\u4e00\\u4e2a\\u4f4d\\u7f6e\\u3002\\n\\n\"}]}','red','2020-08-12 12:37:06'),(57,'44. 通配符匹配','\n给定一个字符串 (`s`) 和一个字符模式 (`p`) ，实现一个支持 `\'?\'` 和 `\'*\'` 的通配符匹配。\n\n```\n\'?\' 可以匹配任何单个字符。\n\'*\' 可以匹配任意字符串（包括空字符串）。\n```\n\n两个字符串**完全匹配**才算匹配成功。\n\n**说明:**\n\n- `s` 可能为空，且只包含从 `a-z` 的小写字母。\n- `p` 可能为空，且只包含从 `a-z` 的小写字母，以及字符 `?` 和 `*`。\n\n**示例 1:**\n\n```\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n**示例 2:**\n\n```\n输入:\ns = \"aa\"\np = \"*\"\n输出: true\n解释: \'*\' 可以匹配任意字符串。\n```\n\n**示例 3:**\n\n```\n输入:\ns = \"cb\"\np = \"?a\"\n输出: false\n解释: \'?\' 可以匹配 \'c\', 但第二个 \'a\' 无法匹配 \'b\'。\n```\n\n**示例 4:**\n\n```\n输入:\ns = \"adceb\"\np = \"*a*b\"\n输出: true\n解释: 第一个 \'*\' 可以匹配空字符串, 第二个 \'*\' 可以匹配字符串 \"dce\".\n```\n\n**示例 5:**\n\n```\n输入:\ns = \"acdcb\"\np = \"a*c?b\"\n输出: false\n```\n\n','<p><br></p><p>给定一个字符串 (`s`) 和一个字符模式 (`p`) ，实现一个支持 `\'?\'` 和 `\'*\'` 的通配符匹配。</p><p><br></p><p>```</p><p>\'?\' 可以匹配任何单个字符。</p><p>\'*\' 可以匹配任意字符串（包括空字符串）。</p><p>```</p><p><br></p><p>两个字符串**完全匹配**才算匹配成功。</p><p><br></p><p>**说明:**</p><p><br></p><p>- `s` 可能为空，且只包含从 `a-z` 的小写字母。</p><p>- `p` 可能为空，且只包含从 `a-z` 的小写字母，以及字符 `?` 和 `*`。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"aa\"</p><p>p = \"a\"</p><p>输出: false</p><p>解释: \"a\" 无法匹配 \"aa\" 整个字符串。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"aa\"</p><p>p = \"*\"</p><p>输出: true</p><p>解释: \'*\' 可以匹配任意字符串。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"cb\"</p><p>p = \"?a\"</p><p>输出: false</p><p>解释: \'?\' 可以匹配 \'c\', 但第二个 \'a\' 无法匹配 \'b\'。</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"adceb\"</p><p>p = \"*a*b\"</p><p>输出: true</p><p>解释: 第一个 \'*\' 可以匹配空字符串, 第二个 \'*\' 可以匹配字符串 \"dce\".</p><p>```</p><p><br></p><p>**示例 5:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"acdcb\"</p><p>p = \"a*c?b\"</p><p>输出: false</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32 (`s`) \\u548c\\u4e00\\u4e2a\\u5b57\\u7b26\\u6a21\\u5f0f (`p`) \\uff0c\\u5b9e\\u73b0\\u4e00\\u4e2a\\u652f\\u6301 `\'?\'` \\u548c `\'*\'` \\u7684\\u901a\\u914d\\u7b26\\u5339\\u914d\\u3002\\n\\n```\\n\'?\' \\u53ef\\u4ee5\\u5339\\u914d\\u4efb\\u4f55\\u5355\\u4e2a\\u5b57\\u7b26\\u3002\\n\'*\' \\u53ef\\u4ee5\\u5339\\u914d\\u4efb\\u610f\\u5b57\\u7b26\\u4e32\\uff08\\u5305\\u62ec\\u7a7a\\u5b57\\u7b26\\u4e32\\uff09\\u3002\\n```\\n\\n\\u4e24\\u4e2a\\u5b57\\u7b26\\u4e32**\\u5b8c\\u5168\\u5339\\u914d**\\u624d\\u7b97\\u5339\\u914d\\u6210\\u529f\\u3002\\n\\n**\\u8bf4\\u660e:**\\n\\n- `s` \\u53ef\\u80fd\\u4e3a\\u7a7a\\uff0c\\u4e14\\u53ea\\u5305\\u542b\\u4ece `a-z` \\u7684\\u5c0f\\u5199\\u5b57\\u6bcd\\u3002\\n- `p` \\u53ef\\u80fd\\u4e3a\\u7a7a\\uff0c\\u4e14\\u53ea\\u5305\\u542b\\u4ece `a-z` \\u7684\\u5c0f\\u5199\\u5b57\\u6bcd\\uff0c\\u4ee5\\u53ca\\u5b57\\u7b26 `?` \\u548c `*`\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"aa\\\"\\np = \\\"a\\\"\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \\\"a\\\" \\u65e0\\u6cd5\\u5339\\u914d \\\"aa\\\" \\u6574\\u4e2a\\u5b57\\u7b26\\u4e32\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"aa\\\"\\np = \\\"*\\\"\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \'*\' \\u53ef\\u4ee5\\u5339\\u914d\\u4efb\\u610f\\u5b57\\u7b26\\u4e32\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"cb\\\"\\np = \\\"?a\\\"\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \'?\' \\u53ef\\u4ee5\\u5339\\u914d \'c\', \\u4f46\\u7b2c\\u4e8c\\u4e2a \'a\' \\u65e0\\u6cd5\\u5339\\u914d \'b\'\\u3002\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"adceb\\\"\\np = \\\"*a*b\\\"\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \\u7b2c\\u4e00\\u4e2a \'*\' \\u53ef\\u4ee5\\u5339\\u914d\\u7a7a\\u5b57\\u7b26\\u4e32, \\u7b2c\\u4e8c\\u4e2a \'*\' \\u53ef\\u4ee5\\u5339\\u914d\\u5b57\\u7b26\\u4e32 \\\"dce\\\".\\n```\\n\\n**\\u793a\\u4f8b 5:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"acdcb\\\"\\np = \\\"a*c?b\\\"\\n\\u8f93\\u51fa: false\\n```\\n\\n\"}]}','red','2020-08-12 12:37:30'),(58,'43. 字符串相乘','\n给定两个以字符串形式表示的非负整数 `num1` 和 `num2`，返回 `num1` 和 `num2` 的乘积，它们的乘积也表示为字符串形式。\n\n**示例 1:**\n\n```\n输入: num1 = \"2\", num2 = \"3\"\n输出: \"6\"\n```\n\n**示例 2:**\n\n```\n输入: num1 = \"123\", num2 = \"456\"\n输出: \"56088\"\n```\n\n**说明：**\n\n1. `num1` 和 `num2` 的长度小于110。\n2. `num1` 和 `num2` 只包含数字 `0-9`。\n3. `num1` 和 `num2` 均不以零开头，除非是数字 0 本身。\n4. **不能使用任何标准库的大数类型（比如 BigInteger）**或**直接将输入转换为整数来处理**。\n\n\n','<p><br></p><p>给定两个以字符串形式表示的非负整数 `num1` 和 `num2`，返回 `num1` 和 `num2` 的乘积，它们的乘积也表示为字符串形式。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: num1 = \"2\", num2 = \"3\"</p><p>输出: \"6\"</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: num1 = \"123\", num2 = \"456\"</p><p>输出: \"56088\"</p><p>```</p><p><br></p><p>**说明：**</p><p><br></p><p>1. `num1` 和 `num2` 的长度小于110。</p><p>2. `num1` 和 `num2` 只包含数字 `0-9`。</p><p>3. `num1` 和 `num2` 均不以零开头，除非是数字 0 本身。</p><p>4. **不能使用任何标准库的大数类型（比如 BigInteger）**或**直接将输入转换为整数来处理**。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e24\\u4e2a\\u4ee5\\u5b57\\u7b26\\u4e32\\u5f62\\u5f0f\\u8868\\u793a\\u7684\\u975e\\u8d1f\\u6574\\u6570 `num1` \\u548c `num2`\\uff0c\\u8fd4\\u56de `num1` \\u548c `num2` \\u7684\\u4e58\\u79ef\\uff0c\\u5b83\\u4eec\\u7684\\u4e58\\u79ef\\u4e5f\\u8868\\u793a\\u4e3a\\u5b57\\u7b26\\u4e32\\u5f62\\u5f0f\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: num1 = \\\"2\\\", num2 = \\\"3\\\"\\n\\u8f93\\u51fa: \\\"6\\\"\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: num1 = \\\"123\\\", num2 = \\\"456\\\"\\n\\u8f93\\u51fa: \\\"56088\\\"\\n```\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n1. `num1` \\u548c `num2` \\u7684\\u957f\\u5ea6\\u5c0f\\u4e8e110\\u3002\\n2. `num1` \\u548c `num2` \\u53ea\\u5305\\u542b\\u6570\\u5b57 `0-9`\\u3002\\n3. `num1` \\u548c `num2` \\u5747\\u4e0d\\u4ee5\\u96f6\\u5f00\\u5934\\uff0c\\u9664\\u975e\\u662f\\u6570\\u5b57 0 \\u672c\\u8eab\\u3002\\n4. **\\u4e0d\\u80fd\\u4f7f\\u7528\\u4efb\\u4f55\\u6807\\u51c6\\u5e93\\u7684\\u5927\\u6570\\u7c7b\\u578b\\uff08\\u6bd4\\u5982 BigInteger\\uff09**\\u6216**\\u76f4\\u63a5\\u5c06\\u8f93\\u5165\\u8f6c\\u6362\\u4e3a\\u6574\\u6570\\u6765\\u5904\\u7406**\\u3002\\n\\n\\n\"}]}','yellow','2020-08-12 12:37:45'),(59,'42. 接雨水','\n给定 *n* 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png)\n\n上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 **感谢 Marcos** 贡献此图。\n\n**示例:**\n\n```\n输入: [0,1,0,2,1,0,1,3,2,1,2,1]\n输出: 6\n```\n\n\n','<p><br></p><p>给定 *n* 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><br></p><p>![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png)</p><p><br></p><p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 **感谢 Marcos** 贡献此图。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: [0,1,0,2,1,0,1,3,2,1,2,1]</p><p>输出: 6</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a *n* \\u4e2a\\u975e\\u8d1f\\u6574\\u6570\\u8868\\u793a\\u6bcf\\u4e2a\\u5bbd\\u5ea6\\u4e3a 1 \\u7684\\u67f1\\u5b50\\u7684\\u9ad8\\u5ea6\\u56fe\\uff0c\\u8ba1\\u7b97\\u6309\\u6b64\\u6392\\u5217\\u7684\\u67f1\\u5b50\\uff0c\\u4e0b\\u96e8\\u4e4b\\u540e\\u80fd\\u63a5\\u591a\\u5c11\\u96e8\\u6c34\\u3002\\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png)\\n\\n\\u4e0a\\u9762\\u662f\\u7531\\u6570\\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \\u8868\\u793a\\u7684\\u9ad8\\u5ea6\\u56fe\\uff0c\\u5728\\u8fd9\\u79cd\\u60c5\\u51b5\\u4e0b\\uff0c\\u53ef\\u4ee5\\u63a5 6 \\u4e2a\\u5355\\u4f4d\\u7684\\u96e8\\u6c34\\uff08\\u84dd\\u8272\\u90e8\\u5206\\u8868\\u793a\\u96e8\\u6c34\\uff09\\u3002 **\\u611f\\u8c22 Marcos** \\u8d21\\u732e\\u6b64\\u56fe\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [0,1,0,2,1,0,1,3,2,1,2,1]\\n\\u8f93\\u51fa: 6\\n```\\n\\n\\n\"}]}','red','2020-08-12 12:38:00'),(60,'41. 缺失的第一个正数','\n给你一个未排序的整数数组，请你找出其中没有出现的最小的正整数。\n\n \n\n**示例 1:**\n\n```\n输入: [1,2,0]\n输出: 3\n```\n\n**示例 2:**\n\n```\n输入: [3,4,-1,1]\n输出: 2\n```\n\n**示例 3:**\n\n```\n输入: [7,8,9,11,12]\n输出: 1\n```\n\n \n\n**提示：**\n\n你的算法的时间复杂度应为O(*n*)，并且只能使用常数级别的额外空间。\n\n\n','<p><br></p><p>给你一个未排序的整数数组，请你找出其中没有出现的最小的正整数。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [1,2,0]</p><p>输出: 3</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [3,4,-1,1]</p><p>输出: 2</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: [7,8,9,11,12]</p><p>输出: 1</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>你的算法的时间复杂度应为O(*n*)，并且只能使用常数级别的额外空间。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u4f60\\u4e00\\u4e2a\\u672a\\u6392\\u5e8f\\u7684\\u6574\\u6570\\u6570\\u7ec4\\uff0c\\u8bf7\\u4f60\\u627e\\u51fa\\u5176\\u4e2d\\u6ca1\\u6709\\u51fa\\u73b0\\u7684\\u6700\\u5c0f\\u7684\\u6b63\\u6574\\u6570\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [1,2,0]\\n\\u8f93\\u51fa: 3\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [3,4,-1,1]\\n\\u8f93\\u51fa: 2\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: [7,8,9,11,12]\\n\\u8f93\\u51fa: 1\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n\\u4f60\\u7684\\u7b97\\u6cd5\\u7684\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u5e94\\u4e3aO(*n*)\\uff0c\\u5e76\\u4e14\\u53ea\\u80fd\\u4f7f\\u7528\\u5e38\\u6570\\u7ea7\\u522b\\u7684\\u989d\\u5916\\u7a7a\\u95f4\\u3002\\n\\n\\n\"}]}','red','2020-08-12 12:38:21'),(61,'40. 组合总和 II','\n难度中等317\n\n给定一个数组 `candidates` 和一个目标数 `target` ，找出 `candidates` 中所有可以使数字和为 `target` 的组合。\n\n`candidates` 中的每个数字在每个组合中只能使用一次。\n\n**说明：**\n\n- 所有数字（包括目标数）都是正整数。\n- 解集不能包含重复的组合。 \n\n**示例 1:**\n\n```\n输入: candidates = [10,1,2,7,6,1,5], target = 8,\n所求解集为:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n```\n\n**示例 2:**\n\n```\n输入: candidates = [2,5,2,1,2], target = 5,\n所求解集为:\n[\n  [1,2,2],\n  [5]\n]\n```\n\n\n\n',NULL,'{\"ops\": [{\"insert\": \"\\n\\u96be\\u5ea6\\u4e2d\\u7b49317\\n\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6570\\u7ec4 `candidates` \\u548c\\u4e00\\u4e2a\\u76ee\\u6807\\u6570 `target` \\uff0c\\u627e\\u51fa `candidates` \\u4e2d\\u6240\\u6709\\u53ef\\u4ee5\\u4f7f\\u6570\\u5b57\\u548c\\u4e3a `target` \\u7684\\u7ec4\\u5408\\u3002\\n\\n`candidates` \\u4e2d\\u7684\\u6bcf\\u4e2a\\u6570\\u5b57\\u5728\\u6bcf\\u4e2a\\u7ec4\\u5408\\u4e2d\\u53ea\\u80fd\\u4f7f\\u7528\\u4e00\\u6b21\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n- \\u6240\\u6709\\u6570\\u5b57\\uff08\\u5305\\u62ec\\u76ee\\u6807\\u6570\\uff09\\u90fd\\u662f\\u6b63\\u6574\\u6570\\u3002\\n- \\u89e3\\u96c6\\u4e0d\\u80fd\\u5305\\u542b\\u91cd\\u590d\\u7684\\u7ec4\\u5408\\u3002 \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: candidates = [10,1,2,7,6,1,5], target = 8,\\n\\u6240\\u6c42\\u89e3\\u96c6\\u4e3a:\\n[\\n  [1, 7],\\n  [1, 2, 5],\\n  [2, 6],\\n  [1, 1, 6]\\n]\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: candidates = [2,5,2,1,2], target = 5,\\n\\u6240\\u6c42\\u89e3\\u96c6\\u4e3a:\\n[\\n  [1,2,2],\\n  [5]\\n]\\n```\\n\\n\\n\\n\"}]}','yellow','2020-08-12 12:38:36'),(62,'39. 组合总和','\n给定一个**无重复元素**的数组 `candidates` 和一个目标数 `target` ，找出 `candidates` 中所有可以使数字和为 `target` 的组合。\n\n`candidates` 中的数字可以无限制重复被选取。\n\n**说明：**\n\n- 所有数字（包括 `target`）都是正整数。\n- 解集不能包含重复的组合。 \n\n**示例 1：**\n\n```\n输入：candidates = [2,3,6,7], target = 7,\n所求解集为：\n[\n  [7],\n  [2,2,3]\n]\n```\n\n**示例 2：**\n\n```\n输入：candidates = [2,3,5], target = 8,\n所求解集为：\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n```\n\n \n\n**提示：**\n\n- `1 <= candidates.length <= 30`\n- `1 <= candidates[i] <= 200`\n- `candidate` 中的每个元素都是独一无二的。\n- `1 <= target <= 500`\n\n\n','<p><br></p><p>给定一个**无重复元素**的数组 `candidates` 和一个目标数 `target` ，找出 `candidates` 中所有可以使数字和为 `target` 的组合。</p><p><br></p><p>`candidates` 中的数字可以无限制重复被选取。</p><p><br></p><p>**说明：**</p><p><br></p><p>- 所有数字（包括 `target`）都是正整数。</p><p>- 解集不能包含重复的组合。 </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：candidates = [2,3,6,7], target = 7,</p><p>所求解集为：</p><p>[</p><p>  [7],</p><p>  [2,2,3]</p><p>]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：candidates = [2,3,5], target = 8,</p><p>所求解集为：</p><p>[</p><p>  [2,2,2,2],</p><p>  [2,3,3],</p><p>  [3,5]</p><p>]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `1 &lt;= candidates.length &lt;= 30`</p><p>- `1 &lt;= candidates[i] &lt;= 200`</p><p>- `candidate` 中的每个元素都是独一无二的。</p><p>- `1 &lt;= target &lt;= 500`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a**\\u65e0\\u91cd\\u590d\\u5143\\u7d20**\\u7684\\u6570\\u7ec4 `candidates` \\u548c\\u4e00\\u4e2a\\u76ee\\u6807\\u6570 `target` \\uff0c\\u627e\\u51fa `candidates` \\u4e2d\\u6240\\u6709\\u53ef\\u4ee5\\u4f7f\\u6570\\u5b57\\u548c\\u4e3a `target` \\u7684\\u7ec4\\u5408\\u3002\\n\\n`candidates` \\u4e2d\\u7684\\u6570\\u5b57\\u53ef\\u4ee5\\u65e0\\u9650\\u5236\\u91cd\\u590d\\u88ab\\u9009\\u53d6\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n- \\u6240\\u6709\\u6570\\u5b57\\uff08\\u5305\\u62ec `target`\\uff09\\u90fd\\u662f\\u6b63\\u6574\\u6570\\u3002\\n- \\u89e3\\u96c6\\u4e0d\\u80fd\\u5305\\u542b\\u91cd\\u590d\\u7684\\u7ec4\\u5408\\u3002 \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1acandidates = [2,3,6,7], target = 7,\\n\\u6240\\u6c42\\u89e3\\u96c6\\u4e3a\\uff1a\\n[\\n  [7],\\n  [2,2,3]\\n]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1acandidates = [2,3,5], target = 8,\\n\\u6240\\u6c42\\u89e3\\u96c6\\u4e3a\\uff1a\\n[\\n  [2,2,2,2],\\n  [2,3,3],\\n  [3,5]\\n]\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `1 <= candidates.length <= 30`\\n- `1 <= candidates[i] <= 200`\\n- `candidate` \\u4e2d\\u7684\\u6bcf\\u4e2a\\u5143\\u7d20\\u90fd\\u662f\\u72ec\\u4e00\\u65e0\\u4e8c\\u7684\\u3002\\n- `1 <= target <= 500`\\n\\n\\n\"}]}','yellow','2020-08-12 12:38:58'),(63,'38. 外观数列','\n给定一个正整数 *n*（1 ≤ *n* ≤ 30），输出外观数列的第 *n* 项。\n\n注意：整数序列中的每一项将表示为一个字符串。\n\n「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：\n\n```\n1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n```\n\n第一项是数字 1\n\n描述前一项，这个数是 `1` 即 “一个 1 ”，记作 `11`\n\n描述前一项，这个数是 `11` 即 “两个 1 ” ，记作 `21`\n\n描述前一项，这个数是 `21` 即 “一个 2 一个 1 ” ，记作 `1211`\n\n描述前一项，这个数是 `1211` 即 “一个 1 一个 2 两个 1 ” ，记作 `111221`\n\n \n\n**示例 1:**\n\n```\n输入: 1\n输出: \"1\"\n解释：这是一个基本样例。\n```\n\n**示例 2:**\n\n```\n输入: 4\n输出: \"1211\"\n解释：当 n = 3 时，序列是 \"21\"，其中我们有 \"2\" 和 \"1\" 两组，\"2\" 可以读作 \"12\"，也就是出现频次 = 1 而 值 = 2；类似 \"1\" 可以读作 \"11\"。所以答案是 \"12\" 和 \"11\" 组合在一起，也就是 \"1211\"。\n```\n\n\n','<p><br></p><p>给定一个正整数 *n*（1 ≤ *n* ≤ 30），输出外观数列的第 *n* 项。</p><p><br></p><p>注意：整数序列中的每一项将表示为一个字符串。</p><p><br></p><p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：</p><p><br></p><p>```</p><p>1.     1</p><p>2.     11</p><p>3.     21</p><p>4.     1211</p><p>5.     111221</p><p>```</p><p><br></p><p>第一项是数字 1</p><p><br></p><p>描述前一项，这个数是 `1` 即 “一个 1 ”，记作 `11`</p><p><br></p><p>描述前一项，这个数是 `11` 即 “两个 1 ” ，记作 `21`</p><p><br></p><p>描述前一项，这个数是 `21` 即 “一个 2 一个 1 ” ，记作 `1211`</p><p><br></p><p>描述前一项，这个数是 `1211` 即 “一个 1 一个 2 两个 1 ” ，记作 `111221`</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 1</p><p>输出: \"1\"</p><p>解释：这是一个基本样例。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: 4</p><p>输出: \"1211\"</p><p>解释：当 n = 3 时，序列是 \"21\"，其中我们有 \"2\" 和 \"1\" 两组，\"2\" 可以读作 \"12\"，也就是出现频次 = 1 而 值 = 2；类似 \"1\" 可以读作 \"11\"。所以答案是 \"12\" 和 \"11\" 组合在一起，也就是 \"1211\"。</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6b63\\u6574\\u6570 *n*\\uff081 \\u2264 *n* \\u2264 30\\uff09\\uff0c\\u8f93\\u51fa\\u5916\\u89c2\\u6570\\u5217\\u7684\\u7b2c *n* \\u9879\\u3002\\n\\n\\u6ce8\\u610f\\uff1a\\u6574\\u6570\\u5e8f\\u5217\\u4e2d\\u7684\\u6bcf\\u4e00\\u9879\\u5c06\\u8868\\u793a\\u4e3a\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\u3002\\n\\n\\u300c\\u5916\\u89c2\\u6570\\u5217\\u300d\\u662f\\u4e00\\u4e2a\\u6574\\u6570\\u5e8f\\u5217\\uff0c\\u4ece\\u6570\\u5b57 1 \\u5f00\\u59cb\\uff0c\\u5e8f\\u5217\\u4e2d\\u7684\\u6bcf\\u4e00\\u9879\\u90fd\\u662f\\u5bf9\\u524d\\u4e00\\u9879\\u7684\\u63cf\\u8ff0\\u3002\\u524d\\u4e94\\u9879\\u5982\\u4e0b\\uff1a\\n\\n```\\n1.     1\\n2.     11\\n3.     21\\n4.     1211\\n5.     111221\\n```\\n\\n\\u7b2c\\u4e00\\u9879\\u662f\\u6570\\u5b57 1\\n\\n\\u63cf\\u8ff0\\u524d\\u4e00\\u9879\\uff0c\\u8fd9\\u4e2a\\u6570\\u662f `1` \\u5373 \\u201c\\u4e00\\u4e2a 1 \\u201d\\uff0c\\u8bb0\\u4f5c `11`\\n\\n\\u63cf\\u8ff0\\u524d\\u4e00\\u9879\\uff0c\\u8fd9\\u4e2a\\u6570\\u662f `11` \\u5373 \\u201c\\u4e24\\u4e2a 1 \\u201d \\uff0c\\u8bb0\\u4f5c `21`\\n\\n\\u63cf\\u8ff0\\u524d\\u4e00\\u9879\\uff0c\\u8fd9\\u4e2a\\u6570\\u662f `21` \\u5373 \\u201c\\u4e00\\u4e2a 2 \\u4e00\\u4e2a 1 \\u201d \\uff0c\\u8bb0\\u4f5c `1211`\\n\\n\\u63cf\\u8ff0\\u524d\\u4e00\\u9879\\uff0c\\u8fd9\\u4e2a\\u6570\\u662f `1211` \\u5373 \\u201c\\u4e00\\u4e2a 1 \\u4e00\\u4e2a 2 \\u4e24\\u4e2a 1 \\u201d \\uff0c\\u8bb0\\u4f5c `111221`\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 1\\n\\u8f93\\u51fa: \\\"1\\\"\\n\\u89e3\\u91ca\\uff1a\\u8fd9\\u662f\\u4e00\\u4e2a\\u57fa\\u672c\\u6837\\u4f8b\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 4\\n\\u8f93\\u51fa: \\\"1211\\\"\\n\\u89e3\\u91ca\\uff1a\\u5f53 n = 3 \\u65f6\\uff0c\\u5e8f\\u5217\\u662f \\\"21\\\"\\uff0c\\u5176\\u4e2d\\u6211\\u4eec\\u6709 \\\"2\\\" \\u548c \\\"1\\\" \\u4e24\\u7ec4\\uff0c\\\"2\\\" \\u53ef\\u4ee5\\u8bfb\\u4f5c \\\"12\\\"\\uff0c\\u4e5f\\u5c31\\u662f\\u51fa\\u73b0\\u9891\\u6b21 = 1 \\u800c \\u503c = 2\\uff1b\\u7c7b\\u4f3c \\\"1\\\" \\u53ef\\u4ee5\\u8bfb\\u4f5c \\\"11\\\"\\u3002\\u6240\\u4ee5\\u7b54\\u6848\\u662f \\\"12\\\" \\u548c \\\"11\\\" \\u7ec4\\u5408\\u5728\\u4e00\\u8d77\\uff0c\\u4e5f\\u5c31\\u662f \\\"1211\\\"\\u3002\\n```\\n\\n\\n\"}]}','green','2020-08-12 12:39:19'),(64,'37. 解数独','\n编写一个程序，通过已填充的空格来解决数独问题。\n\n一个数独的解法需**遵循如下规则**：\n\n1. 数字 `1-9` 在每一行只能出现一次。\n2. 数字 `1-9` 在每一列只能出现一次。\n3. 数字 `1-9` 在每一个以粗实线分隔的 `3x3` 宫内只能出现一次。\n\n空白格用 `\'.\'` 表示。\n\n![img](http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)\n\n一个数独。\n\n![img](http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)\n\n答案被标成红色。\n\n**Note:**\n\n- 给定的数独序列只包含数字 `1-9` 和字符 `\'.\'` 。\n- 你可以假设给定的数独只有唯一解。\n- 给定数独永远是 `9x9` 形式的。\n\n','<p><br></p><p>编写一个程序，通过已填充的空格来解决数独问题。</p><p><br></p><p>一个数独的解法需**遵循如下规则**：</p><p><br></p><p>1. 数字 `1-9` 在每一行只能出现一次。</p><p>2. 数字 `1-9` 在每一列只能出现一次。</p><p>3. 数字 `1-9` 在每一个以粗实线分隔的 `3x3` 宫内只能出现一次。</p><p><br></p><p>空白格用 `\'.\'` 表示。</p><p><br></p><p>![img](http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)</p><p><br></p><p>一个数独。</p><p><br></p><p>![img](http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)</p><p><br></p><p>答案被标成红色。</p><p><br></p><p>**Note:**</p><p><br></p><p>- 给定的数独序列只包含数字 `1-9` 和字符 `\'.\'` 。</p><p>- 你可以假设给定的数独只有唯一解。</p><p>- 给定数独永远是 `9x9` 形式的。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7f16\\u5199\\u4e00\\u4e2a\\u7a0b\\u5e8f\\uff0c\\u901a\\u8fc7\\u5df2\\u586b\\u5145\\u7684\\u7a7a\\u683c\\u6765\\u89e3\\u51b3\\u6570\\u72ec\\u95ee\\u9898\\u3002\\n\\n\\u4e00\\u4e2a\\u6570\\u72ec\\u7684\\u89e3\\u6cd5\\u9700**\\u9075\\u5faa\\u5982\\u4e0b\\u89c4\\u5219**\\uff1a\\n\\n1. \\u6570\\u5b57 `1-9` \\u5728\\u6bcf\\u4e00\\u884c\\u53ea\\u80fd\\u51fa\\u73b0\\u4e00\\u6b21\\u3002\\n2. \\u6570\\u5b57 `1-9` \\u5728\\u6bcf\\u4e00\\u5217\\u53ea\\u80fd\\u51fa\\u73b0\\u4e00\\u6b21\\u3002\\n3. \\u6570\\u5b57 `1-9` \\u5728\\u6bcf\\u4e00\\u4e2a\\u4ee5\\u7c97\\u5b9e\\u7ebf\\u5206\\u9694\\u7684 `3x3` \\u5bab\\u5185\\u53ea\\u80fd\\u51fa\\u73b0\\u4e00\\u6b21\\u3002\\n\\n\\u7a7a\\u767d\\u683c\\u7528 `\'.\'` \\u8868\\u793a\\u3002\\n\\n![img](http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)\\n\\n\\u4e00\\u4e2a\\u6570\\u72ec\\u3002\\n\\n![img](http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)\\n\\n\\u7b54\\u6848\\u88ab\\u6807\\u6210\\u7ea2\\u8272\\u3002\\n\\n**Note:**\\n\\n- \\u7ed9\\u5b9a\\u7684\\u6570\\u72ec\\u5e8f\\u5217\\u53ea\\u5305\\u542b\\u6570\\u5b57 `1-9` \\u548c\\u5b57\\u7b26 `\'.\'` \\u3002\\n- \\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe\\u7ed9\\u5b9a\\u7684\\u6570\\u72ec\\u53ea\\u6709\\u552f\\u4e00\\u89e3\\u3002\\n- \\u7ed9\\u5b9a\\u6570\\u72ec\\u6c38\\u8fdc\\u662f `9x9` \\u5f62\\u5f0f\\u7684\\u3002\\n\\n\"}]}','red','2020-08-12 12:46:17'),(65,'36. 有效的数独','\n判断一个 9x9 的数独是否有效。只需要**根据以下规则**，验证已经填入的数字是否有效即可。\n\n1. 数字 `1-9` 在每一行只能出现一次。\n2. 数字 `1-9` 在每一列只能出现一次。\n3. 数字 `1-9` 在每一个以粗实线分隔的 `3x3` 宫内只能出现一次。\n\n![img](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)\n\n上图是一个部分填充的有效的数独。\n\n数独部分空格内已填入了数字，空白格用 `\'.\'` 表示。\n\n**示例 1:**\n\n```\n输入:\n[\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\n输出: true\n```\n\n**示例 2:**\n\n```\n输入:\n[\n  [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\n输出: false\n解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。\n     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。\n```\n\n**说明:**\n\n- 一个有效的数独（部分已被填充）不一定是可解的。\n- 只需要根据以上规则，验证已经填入的数字是否有效即可。\n- 给定数独序列只包含数字 `1-9` 和字符 `\'.\'` 。\n- 给定数独永远是 `9x9` 形式的。\n\n\n','<p><br></p><p>判断一个 9x9 的数独是否有效。只需要**根据以下规则**，验证已经填入的数字是否有效即可。</p><p><br></p><p>1. 数字 `1-9` 在每一行只能出现一次。</p><p>2. 数字 `1-9` 在每一列只能出现一次。</p><p>3. 数字 `1-9` 在每一个以粗实线分隔的 `3x3` 宫内只能出现一次。</p><p><br></p><p>![img](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)</p><p><br></p><p>上图是一个部分填充的有效的数独。</p><p><br></p><p>数独部分空格内已填入了数字，空白格用 `\'.\'` 表示。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入:</p><p>[</p><p>  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],</p><p>  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],</p><p>  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],</p><p>  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],</p><p>  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],</p><p>  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],</p><p>  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],</p><p>  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],</p><p>  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]</p><p>]</p><p>输出: true</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入:</p><p>[</p><p>  [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],</p><p>  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],</p><p>  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],</p><p>  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],</p><p>  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],</p><p>  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],</p><p>  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],</p><p>  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],</p><p>  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]</p><p>]</p><p>输出: false</p><p>解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。</p><p>     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</p><p>```</p><p><br></p><p>**说明:**</p><p><br></p><p>- 一个有效的数独（部分已被填充）不一定是可解的。</p><p>- 只需要根据以上规则，验证已经填入的数字是否有效即可。</p><p>- 给定数独序列只包含数字 `1-9` 和字符 `\'.\'` 。</p><p>- 给定数独永远是 `9x9` 形式的。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5224\\u65ad\\u4e00\\u4e2a 9x9 \\u7684\\u6570\\u72ec\\u662f\\u5426\\u6709\\u6548\\u3002\\u53ea\\u9700\\u8981**\\u6839\\u636e\\u4ee5\\u4e0b\\u89c4\\u5219**\\uff0c\\u9a8c\\u8bc1\\u5df2\\u7ecf\\u586b\\u5165\\u7684\\u6570\\u5b57\\u662f\\u5426\\u6709\\u6548\\u5373\\u53ef\\u3002\\n\\n1. \\u6570\\u5b57 `1-9` \\u5728\\u6bcf\\u4e00\\u884c\\u53ea\\u80fd\\u51fa\\u73b0\\u4e00\\u6b21\\u3002\\n2. \\u6570\\u5b57 `1-9` \\u5728\\u6bcf\\u4e00\\u5217\\u53ea\\u80fd\\u51fa\\u73b0\\u4e00\\u6b21\\u3002\\n3. \\u6570\\u5b57 `1-9` \\u5728\\u6bcf\\u4e00\\u4e2a\\u4ee5\\u7c97\\u5b9e\\u7ebf\\u5206\\u9694\\u7684 `3x3` \\u5bab\\u5185\\u53ea\\u80fd\\u51fa\\u73b0\\u4e00\\u6b21\\u3002\\n\\n![img](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)\\n\\n\\u4e0a\\u56fe\\u662f\\u4e00\\u4e2a\\u90e8\\u5206\\u586b\\u5145\\u7684\\u6709\\u6548\\u7684\\u6570\\u72ec\\u3002\\n\\n\\u6570\\u72ec\\u90e8\\u5206\\u7a7a\\u683c\\u5185\\u5df2\\u586b\\u5165\\u4e86\\u6570\\u5b57\\uff0c\\u7a7a\\u767d\\u683c\\u7528 `\'.\'` \\u8868\\u793a\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\n[\\n  [\\\"5\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\n  [\\\"6\\\",\\\".\\\",\\\".\\\",\\\"1\\\",\\\"9\\\",\\\"5\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\n  [\\\".\\\",\\\"9\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\"],\\n  [\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"3\\\"],\\n  [\\\"4\\\",\\\".\\\",\\\".\\\",\\\"8\\\",\\\".\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"1\\\"],\\n  [\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"2\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\"],\\n  [\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"2\\\",\\\"8\\\",\\\".\\\"],\\n  [\\\".\\\",\\\".\\\",\\\".\\\",\\\"4\\\",\\\"1\\\",\\\"9\\\",\\\".\\\",\\\".\\\",\\\"5\\\"],\\n  [\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\"9\\\"]\\n]\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165:\\n[\\n  [\\\"8\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\n  [\\\"6\\\",\\\".\\\",\\\".\\\",\\\"1\\\",\\\"9\\\",\\\"5\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\n  [\\\".\\\",\\\"9\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\"],\\n  [\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"3\\\"],\\n  [\\\"4\\\",\\\".\\\",\\\".\\\",\\\"8\\\",\\\".\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"1\\\"],\\n  [\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"2\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\"],\\n  [\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"2\\\",\\\"8\\\",\\\".\\\"],\\n  [\\\".\\\",\\\".\\\",\\\".\\\",\\\"4\\\",\\\"1\\\",\\\"9\\\",\\\".\\\",\\\".\\\",\\\"5\\\"],\\n  [\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\"9\\\"]\\n]\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \\u9664\\u4e86\\u7b2c\\u4e00\\u884c\\u7684\\u7b2c\\u4e00\\u4e2a\\u6570\\u5b57\\u4ece 5 \\u6539\\u4e3a 8 \\u4ee5\\u5916\\uff0c\\u7a7a\\u683c\\u5185\\u5176\\u4ed6\\u6570\\u5b57\\u5747\\u4e0e \\u793a\\u4f8b1 \\u76f8\\u540c\\u3002\\n     \\u4f46\\u7531\\u4e8e\\u4f4d\\u4e8e\\u5de6\\u4e0a\\u89d2\\u7684 3x3 \\u5bab\\u5185\\u6709\\u4e24\\u4e2a 8 \\u5b58\\u5728, \\u56e0\\u6b64\\u8fd9\\u4e2a\\u6570\\u72ec\\u662f\\u65e0\\u6548\\u7684\\u3002\\n```\\n\\n**\\u8bf4\\u660e:**\\n\\n- \\u4e00\\u4e2a\\u6709\\u6548\\u7684\\u6570\\u72ec\\uff08\\u90e8\\u5206\\u5df2\\u88ab\\u586b\\u5145\\uff09\\u4e0d\\u4e00\\u5b9a\\u662f\\u53ef\\u89e3\\u7684\\u3002\\n- \\u53ea\\u9700\\u8981\\u6839\\u636e\\u4ee5\\u4e0a\\u89c4\\u5219\\uff0c\\u9a8c\\u8bc1\\u5df2\\u7ecf\\u586b\\u5165\\u7684\\u6570\\u5b57\\u662f\\u5426\\u6709\\u6548\\u5373\\u53ef\\u3002\\n- \\u7ed9\\u5b9a\\u6570\\u72ec\\u5e8f\\u5217\\u53ea\\u5305\\u542b\\u6570\\u5b57 `1-9` \\u548c\\u5b57\\u7b26 `\'.\'` \\u3002\\n- \\u7ed9\\u5b9a\\u6570\\u72ec\\u6c38\\u8fdc\\u662f `9x9` \\u5f62\\u5f0f\\u7684\\u3002\\n\\n\\n\"}]}','yellow','2020-08-12 12:47:00'),(66,'35. 搜索插入位置','\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n你可以假设数组中无重复元素。\n\n**示例 1:**\n\n```\n输入: [1,3,5,6], 5\n输出: 2\n```\n\n**示例 2:**\n\n```\n输入: [1,3,5,6], 2\n输出: 1\n```\n\n**示例 3:**\n\n```\n输入: [1,3,5,6], 7\n输出: 4\n```\n\n**示例 4:**\n\n```\n输入: [1,3,5,6], 0\n输出: 0\n```\n\n\n','<p><br></p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p><br></p><p>你可以假设数组中无重复元素。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [1,3,5,6], 5</p><p>输出: 2</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [1,3,5,6], 2</p><p>输出: 1</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: [1,3,5,6], 7</p><p>输出: 4</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入: [1,3,5,6], 0</p><p>输出: 0</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6392\\u5e8f\\u6570\\u7ec4\\u548c\\u4e00\\u4e2a\\u76ee\\u6807\\u503c\\uff0c\\u5728\\u6570\\u7ec4\\u4e2d\\u627e\\u5230\\u76ee\\u6807\\u503c\\uff0c\\u5e76\\u8fd4\\u56de\\u5176\\u7d22\\u5f15\\u3002\\u5982\\u679c\\u76ee\\u6807\\u503c\\u4e0d\\u5b58\\u5728\\u4e8e\\u6570\\u7ec4\\u4e2d\\uff0c\\u8fd4\\u56de\\u5b83\\u5c06\\u4f1a\\u88ab\\u6309\\u987a\\u5e8f\\u63d2\\u5165\\u7684\\u4f4d\\u7f6e\\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe\\u6570\\u7ec4\\u4e2d\\u65e0\\u91cd\\u590d\\u5143\\u7d20\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [1,3,5,6], 5\\n\\u8f93\\u51fa: 2\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [1,3,5,6], 2\\n\\u8f93\\u51fa: 1\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: [1,3,5,6], 7\\n\\u8f93\\u51fa: 4\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165: [1,3,5,6], 0\\n\\u8f93\\u51fa: 0\\n```\\n\\n\\n\"}]}','green','2020-08-12 12:47:18'),(67,'34. 在排序数组中查找元素的第一个和最后一个位置','\n给定一个按照升序排列的整数数组 `nums`，和一个目标值 `target`。找出给定目标值在数组中的开始位置和结束位置。\n\n你的算法时间复杂度必须是 *O*(log *n*) 级别。\n\n如果数组中不存在目标值，返回 `[-1, -1]`。\n\n**示例 1:**\n\n```\n输入: nums = [5,7,7,8,8,10], target = 8\n输出: [3,4]\n```\n\n**示例 2:**\n\n```\n输入: nums = [5,7,7,8,8,10], target = 6\n输出: [-1,-1]\n```\n',NULL,'{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6309\\u7167\\u5347\\u5e8f\\u6392\\u5217\\u7684\\u6574\\u6570\\u6570\\u7ec4 `nums`\\uff0c\\u548c\\u4e00\\u4e2a\\u76ee\\u6807\\u503c `target`\\u3002\\u627e\\u51fa\\u7ed9\\u5b9a\\u76ee\\u6807\\u503c\\u5728\\u6570\\u7ec4\\u4e2d\\u7684\\u5f00\\u59cb\\u4f4d\\u7f6e\\u548c\\u7ed3\\u675f\\u4f4d\\u7f6e\\u3002\\n\\n\\u4f60\\u7684\\u7b97\\u6cd5\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u5fc5\\u987b\\u662f *O*(log *n*) \\u7ea7\\u522b\\u3002\\n\\n\\u5982\\u679c\\u6570\\u7ec4\\u4e2d\\u4e0d\\u5b58\\u5728\\u76ee\\u6807\\u503c\\uff0c\\u8fd4\\u56de `[-1, -1]`\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: nums = [5,7,7,8,8,10], target = 8\\n\\u8f93\\u51fa: [3,4]\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: nums = [5,7,7,8,8,10], target = 6\\n\\u8f93\\u51fa: [-1,-1]\\n```\\n\"}]}','yellow','2020-08-12 12:47:31'),(68,'33. 搜索旋转排序数组','\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n\n( 例如，数组 `[0,1,2,4,5,6,7]` 可能变为 `[4,5,6,7,0,1,2]` )。\n\n搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 `-1` 。\n\n你可以假设数组中不存在重复的元素。\n\n你的算法时间复杂度必须是 *O*(log *n*) 级别。\n\n**示例 1:**\n\n```\n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n```\n\n**示例 2:**\n\n```\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n```\n\n\n','<p><br></p><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p><br></p><p>( 例如，数组 `[0,1,2,4,5,6,7]` 可能变为 `[4,5,6,7,0,1,2]` )。</p><p><br></p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 `-1` 。</p><p><br></p><p>你可以假设数组中不存在重复的元素。</p><p><br></p><p>你的算法时间复杂度必须是 *O*(log *n*) 级别。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: nums = [4,5,6,7,0,1,2], target = 0</p><p>输出: 4</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: nums = [4,5,6,7,0,1,2], target = 3</p><p>输出: -1</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5047\\u8bbe\\u6309\\u7167\\u5347\\u5e8f\\u6392\\u5e8f\\u7684\\u6570\\u7ec4\\u5728\\u9884\\u5148\\u672a\\u77e5\\u7684\\u67d0\\u4e2a\\u70b9\\u4e0a\\u8fdb\\u884c\\u4e86\\u65cb\\u8f6c\\u3002\\n\\n( \\u4f8b\\u5982\\uff0c\\u6570\\u7ec4 `[0,1,2,4,5,6,7]` \\u53ef\\u80fd\\u53d8\\u4e3a `[4,5,6,7,0,1,2]` )\\u3002\\n\\n\\u641c\\u7d22\\u4e00\\u4e2a\\u7ed9\\u5b9a\\u7684\\u76ee\\u6807\\u503c\\uff0c\\u5982\\u679c\\u6570\\u7ec4\\u4e2d\\u5b58\\u5728\\u8fd9\\u4e2a\\u76ee\\u6807\\u503c\\uff0c\\u5219\\u8fd4\\u56de\\u5b83\\u7684\\u7d22\\u5f15\\uff0c\\u5426\\u5219\\u8fd4\\u56de `-1` \\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe\\u6570\\u7ec4\\u4e2d\\u4e0d\\u5b58\\u5728\\u91cd\\u590d\\u7684\\u5143\\u7d20\\u3002\\n\\n\\u4f60\\u7684\\u7b97\\u6cd5\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u5fc5\\u987b\\u662f *O*(log *n*) \\u7ea7\\u522b\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: nums = [4,5,6,7,0,1,2], target = 0\\n\\u8f93\\u51fa: 4\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: nums = [4,5,6,7,0,1,2], target = 3\\n\\u8f93\\u51fa: -1\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:47:55'),(69,'32. 最长有效括号','给定一个只包含 `\'(\'` 和 `\')\'` 的字符串，找出最长的包含有效括号的子串的长度。\n\n**示例 1:**\n\n```\n输入: \"(()\"\n输出: 2\n解释: 最长有效括号子串为 \"()\"\n```\n\n**示例 2:**\n\n```\n输入: \")()())\"\n输出: 4\n解释: 最长有效括号子串为 \"()()\"\n```\n\n','<p>给定一个只包含 `\'(\'` 和 `\')\'` 的字符串，找出最长的包含有效括号的子串的长度。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: \"(()\"</p><p>输出: 2</p><p>解释: 最长有效括号子串为 \"()\"</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: \")()())\"</p><p>输出: 4</p><p>解释: 最长有效括号子串为 \"()()\"</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u53ea\\u5305\\u542b `\'(\'` \\u548c `\')\'` \\u7684\\u5b57\\u7b26\\u4e32\\uff0c\\u627e\\u51fa\\u6700\\u957f\\u7684\\u5305\\u542b\\u6709\\u6548\\u62ec\\u53f7\\u7684\\u5b50\\u4e32\\u7684\\u957f\\u5ea6\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\\"(()\\\"\\n\\u8f93\\u51fa: 2\\n\\u89e3\\u91ca: \\u6700\\u957f\\u6709\\u6548\\u62ec\\u53f7\\u5b50\\u4e32\\u4e3a \\\"()\\\"\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\\")()())\\\"\\n\\u8f93\\u51fa: 4\\n\\u89e3\\u91ca: \\u6700\\u957f\\u6709\\u6548\\u62ec\\u53f7\\u5b50\\u4e32\\u4e3a \\\"()()\\\"\\n```\\n\\n\"}]}','red','2020-08-12 12:48:06'),(70,'31. 下一个排列','\n实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。\n\n如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。\n\n必须**[原地](https://baike.baidu.com/item/原地算法)**修改，只允许使用额外常数空间。\n\n以下是一些例子，输入位于左侧列，其相应输出位于右侧列。\n`1,2,3` → `1,3,2`\n`3,2,1` → `1,2,3`\n`1,1,5` → `1,5,1`\n\n\n','<p><br></p><p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p><br></p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p><br></p><p>必须**[原地](https://baike.baidu.com/item/原地算法)**修改，只允许使用额外常数空间。</p><p><br></p><p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。</p><p>`1,2,3` → `1,3,2`</p><p>`3,2,1` → `1,2,3`</p><p>`1,1,5` → `1,5,1`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5b9e\\u73b0\\u83b7\\u53d6\\u4e0b\\u4e00\\u4e2a\\u6392\\u5217\\u7684\\u51fd\\u6570\\uff0c\\u7b97\\u6cd5\\u9700\\u8981\\u5c06\\u7ed9\\u5b9a\\u6570\\u5b57\\u5e8f\\u5217\\u91cd\\u65b0\\u6392\\u5217\\u6210\\u5b57\\u5178\\u5e8f\\u4e2d\\u4e0b\\u4e00\\u4e2a\\u66f4\\u5927\\u7684\\u6392\\u5217\\u3002\\n\\n\\u5982\\u679c\\u4e0d\\u5b58\\u5728\\u4e0b\\u4e00\\u4e2a\\u66f4\\u5927\\u7684\\u6392\\u5217\\uff0c\\u5219\\u5c06\\u6570\\u5b57\\u91cd\\u65b0\\u6392\\u5217\\u6210\\u6700\\u5c0f\\u7684\\u6392\\u5217\\uff08\\u5373\\u5347\\u5e8f\\u6392\\u5217\\uff09\\u3002\\n\\n\\u5fc5\\u987b**[\\u539f\\u5730](https://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)**\\u4fee\\u6539\\uff0c\\u53ea\\u5141\\u8bb8\\u4f7f\\u7528\\u989d\\u5916\\u5e38\\u6570\\u7a7a\\u95f4\\u3002\\n\\n\\u4ee5\\u4e0b\\u662f\\u4e00\\u4e9b\\u4f8b\\u5b50\\uff0c\\u8f93\\u5165\\u4f4d\\u4e8e\\u5de6\\u4fa7\\u5217\\uff0c\\u5176\\u76f8\\u5e94\\u8f93\\u51fa\\u4f4d\\u4e8e\\u53f3\\u4fa7\\u5217\\u3002\\n`1,2,3` \\u2192 `1,3,2`\\n`3,2,1` \\u2192 `1,2,3`\\n`1,1,5` \\u2192 `1,5,1`\\n\\n\\n\"}]}','yellow','2020-08-12 12:48:17'),(71,'30. 串联所有单词的子串','\n给定一个字符串 **s** 和一些长度相同的单词 **words。**找出 **s** 中恰好可以由 **words** 中所有单词串联形成的子串的起始位置。\n\n注意子串要与 **words** 中的单词完全匹配，中间不能有其他字符，但不需要考虑 **words** 中单词串联的顺序。\n\n \n\n**示例 1：**\n\n```\n输入：\n  s = \"barfoothefoobarman\",\n  words = [\"foo\",\"bar\"]\n输出：[0,9]\n解释：\n从索引 0 和 9 开始的子串分别是 \"barfoo\" 和 \"foobar\" 。\n输出的顺序不重要, [9,0] 也是有效答案。\n```\n\n**示例 2：**\n\n```\n输入：\n  s = \"wordgoodgoodgoodbestword\",\n  words = [\"word\",\"good\",\"best\",\"word\"]\n输出：[]\n```\n\n','<p><br></p><p>给定一个字符串 **s** 和一些长度相同的单词 **words。**找出 **s** 中恰好可以由 **words** 中所有单词串联形成的子串的起始位置。</p><p><br></p><p>注意子串要与 **words** 中的单词完全匹配，中间不能有其他字符，但不需要考虑 **words** 中单词串联的顺序。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：</p><p>  s = \"barfoothefoobarman\",</p><p>  words = [\"foo\",\"bar\"]</p><p>输出：[0,9]</p><p>解释：</p><p>从索引 0 和 9 开始的子串分别是 \"barfoo\" 和 \"foobar\" 。</p><p>输出的顺序不重要, [9,0] 也是有效答案。</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：</p><p>  s = \"wordgoodgoodgoodbestword\",</p><p>  words = [\"word\",\"good\",\"best\",\"word\"]</p><p>输出：[]</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32 **s** \\u548c\\u4e00\\u4e9b\\u957f\\u5ea6\\u76f8\\u540c\\u7684\\u5355\\u8bcd **words\\u3002**\\u627e\\u51fa **s** \\u4e2d\\u6070\\u597d\\u53ef\\u4ee5\\u7531 **words** \\u4e2d\\u6240\\u6709\\u5355\\u8bcd\\u4e32\\u8054\\u5f62\\u6210\\u7684\\u5b50\\u4e32\\u7684\\u8d77\\u59cb\\u4f4d\\u7f6e\\u3002\\n\\n\\u6ce8\\u610f\\u5b50\\u4e32\\u8981\\u4e0e **words** \\u4e2d\\u7684\\u5355\\u8bcd\\u5b8c\\u5168\\u5339\\u914d\\uff0c\\u4e2d\\u95f4\\u4e0d\\u80fd\\u6709\\u5176\\u4ed6\\u5b57\\u7b26\\uff0c\\u4f46\\u4e0d\\u9700\\u8981\\u8003\\u8651 **words** \\u4e2d\\u5355\\u8bcd\\u4e32\\u8054\\u7684\\u987a\\u5e8f\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\n  s = \\\"barfoothefoobarman\\\",\\n  words = [\\\"foo\\\",\\\"bar\\\"]\\n\\u8f93\\u51fa\\uff1a[0,9]\\n\\u89e3\\u91ca\\uff1a\\n\\u4ece\\u7d22\\u5f15 0 \\u548c 9 \\u5f00\\u59cb\\u7684\\u5b50\\u4e32\\u5206\\u522b\\u662f \\\"barfoo\\\" \\u548c \\\"foobar\\\" \\u3002\\n\\u8f93\\u51fa\\u7684\\u987a\\u5e8f\\u4e0d\\u91cd\\u8981, [9,0] \\u4e5f\\u662f\\u6709\\u6548\\u7b54\\u6848\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\n  s = \\\"wordgoodgoodgoodbestword\\\",\\n  words = [\\\"word\\\",\\\"good\\\",\\\"best\\\",\\\"word\\\"]\\n\\u8f93\\u51fa\\uff1a[]\\n```\\n\\n\"}]}','red','2020-08-12 12:48:30'),(72,'29. 两数相除','\n给定两个整数，被除数 `dividend` 和除数 `divisor`。将两数相除，要求不使用乘法、除法和 mod 运算符。\n\n返回被除数 `dividend` 除以除数 `divisor` 得到的商。\n\n整数除法的结果应当截去（`truncate`）其小数部分，例如：`truncate(8.345) = 8` 以及 `truncate(-2.7335) = -2`\n\n \n\n**示例 1:**\n\n```\n输入: dividend = 10, divisor = 3\n输出: 3\n解释: 10/3 = truncate(3.33333..) = truncate(3) = 3\n```\n\n**示例 2:**\n\n```\n输入: dividend = 7, divisor = -3\n输出: -2\n解释: 7/-3 = truncate(-2.33333..) = -2\n```\n\n \n\n**提示：**\n\n- 被除数和除数均为 32 位有符号整数。\n- 除数不为 0。\n- 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。\n\n\n','<p><br></p><p>给定两个整数，被除数 `dividend` 和除数 `divisor`。将两数相除，要求不使用乘法、除法和 mod 运算符。</p><p><br></p><p>返回被除数 `dividend` 除以除数 `divisor` 得到的商。</p><p><br></p><p>整数除法的结果应当截去（`truncate`）其小数部分，例如：`truncate(8.345) = 8` 以及 `truncate(-2.7335) = -2`</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: dividend = 10, divisor = 3</p><p>输出: 3</p><p>解释: 10/3 = truncate(3.33333..) = truncate(3) = 3</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: dividend = 7, divisor = -3</p><p>输出: -2</p><p>解释: 7/-3 = truncate(-2.33333..) = -2</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- 被除数和除数均为 32 位有符号整数。</p><p>- 除数不为 0。</p><p>- 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e24\\u4e2a\\u6574\\u6570\\uff0c\\u88ab\\u9664\\u6570 `dividend` \\u548c\\u9664\\u6570 `divisor`\\u3002\\u5c06\\u4e24\\u6570\\u76f8\\u9664\\uff0c\\u8981\\u6c42\\u4e0d\\u4f7f\\u7528\\u4e58\\u6cd5\\u3001\\u9664\\u6cd5\\u548c mod \\u8fd0\\u7b97\\u7b26\\u3002\\n\\n\\u8fd4\\u56de\\u88ab\\u9664\\u6570 `dividend` \\u9664\\u4ee5\\u9664\\u6570 `divisor` \\u5f97\\u5230\\u7684\\u5546\\u3002\\n\\n\\u6574\\u6570\\u9664\\u6cd5\\u7684\\u7ed3\\u679c\\u5e94\\u5f53\\u622a\\u53bb\\uff08`truncate`\\uff09\\u5176\\u5c0f\\u6570\\u90e8\\u5206\\uff0c\\u4f8b\\u5982\\uff1a`truncate(8.345) = 8` \\u4ee5\\u53ca `truncate(-2.7335) = -2`\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: dividend = 10, divisor = 3\\n\\u8f93\\u51fa: 3\\n\\u89e3\\u91ca: 10/3 = truncate(3.33333..) = truncate(3) = 3\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: dividend = 7, divisor = -3\\n\\u8f93\\u51fa: -2\\n\\u89e3\\u91ca: 7/-3 = truncate(-2.33333..) = -2\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- \\u88ab\\u9664\\u6570\\u548c\\u9664\\u6570\\u5747\\u4e3a 32 \\u4f4d\\u6709\\u7b26\\u53f7\\u6574\\u6570\\u3002\\n- \\u9664\\u6570\\u4e0d\\u4e3a 0\\u3002\\n- \\u5047\\u8bbe\\u6211\\u4eec\\u7684\\u73af\\u5883\\u53ea\\u80fd\\u5b58\\u50a8 32 \\u4f4d\\u6709\\u7b26\\u53f7\\u6574\\u6570\\uff0c\\u5176\\u6570\\u503c\\u8303\\u56f4\\u662f [\\u2212231, 231 \\u2212 1]\\u3002\\u672c\\u9898\\u4e2d\\uff0c\\u5982\\u679c\\u9664\\u6cd5\\u7ed3\\u679c\\u6ea2\\u51fa\\uff0c\\u5219\\u8fd4\\u56de 231 \\u2212 1\\u3002\\n\\n\\n\"}]}','yellow','2020-08-12 12:48:44'),(73,'28. 实现 strStr()','\n实现 [strStr()](https://baike.baidu.com/item/strstr/811469) 函数。\n\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 **-1**。\n\n**示例 1:**\n\n```\n输入: haystack = \"hello\", needle = \"ll\"\n输出: 2\n```\n\n**示例 2:**\n\n```\n输入: haystack = \"aaaaa\", needle = \"bba\"\n输出: -1\n```\n\n**说明:**\n\n当 `needle` 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n\n对于本题而言，当 `needle` 是空字符串时我们应当返回 0 。这与C语言的 [strstr()](https://baike.baidu.com/item/strstr/811469) 以及 Java的 [indexOf()](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)) 定义相符。\n\n\n','<p><br></p><p>实现 [strStr()](https://baike.baidu.com/item/strstr/811469) 函数。</p><p><br></p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 **-1**。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: haystack = \"hello\", needle = \"ll\"</p><p>输出: 2</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: haystack = \"aaaaa\", needle = \"bba\"</p><p>输出: -1</p><p>```</p><p><br></p><p>**说明:**</p><p><br></p><p>当 `needle` 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p><br></p><p>对于本题而言，当 `needle` 是空字符串时我们应当返回 0 。这与C语言的 [strstr()](https://baike.baidu.com/item/strstr/811469) 以及 Java的 [indexOf()](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)) 定义相符。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5b9e\\u73b0 [strStr()](https://baike.baidu.com/item/strstr/811469) \\u51fd\\u6570\\u3002\\n\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a haystack \\u5b57\\u7b26\\u4e32\\u548c\\u4e00\\u4e2a needle \\u5b57\\u7b26\\u4e32\\uff0c\\u5728 haystack \\u5b57\\u7b26\\u4e32\\u4e2d\\u627e\\u51fa needle \\u5b57\\u7b26\\u4e32\\u51fa\\u73b0\\u7684\\u7b2c\\u4e00\\u4e2a\\u4f4d\\u7f6e (\\u4ece0\\u5f00\\u59cb)\\u3002\\u5982\\u679c\\u4e0d\\u5b58\\u5728\\uff0c\\u5219\\u8fd4\\u56de **-1**\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: haystack = \\\"hello\\\", needle = \\\"ll\\\"\\n\\u8f93\\u51fa: 2\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: haystack = \\\"aaaaa\\\", needle = \\\"bba\\\"\\n\\u8f93\\u51fa: -1\\n```\\n\\n**\\u8bf4\\u660e:**\\n\\n\\u5f53 `needle` \\u662f\\u7a7a\\u5b57\\u7b26\\u4e32\\u65f6\\uff0c\\u6211\\u4eec\\u5e94\\u5f53\\u8fd4\\u56de\\u4ec0\\u4e48\\u503c\\u5462\\uff1f\\u8fd9\\u662f\\u4e00\\u4e2a\\u5728\\u9762\\u8bd5\\u4e2d\\u5f88\\u597d\\u7684\\u95ee\\u9898\\u3002\\n\\n\\u5bf9\\u4e8e\\u672c\\u9898\\u800c\\u8a00\\uff0c\\u5f53 `needle` \\u662f\\u7a7a\\u5b57\\u7b26\\u4e32\\u65f6\\u6211\\u4eec\\u5e94\\u5f53\\u8fd4\\u56de 0 \\u3002\\u8fd9\\u4e0eC\\u8bed\\u8a00\\u7684 [strstr()](https://baike.baidu.com/item/strstr/811469) \\u4ee5\\u53ca Java\\u7684 [indexOf()](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)) \\u5b9a\\u4e49\\u76f8\\u7b26\\u3002\\n\\n\\n\"}]}','green','2020-08-12 12:48:58'),(74,'27. 移除元素','\n给你一个数组 *nums* 和一个值 *val*，你需要 **[原地](https://baike.baidu.com/item/原地算法)** 移除所有数值等于 *val* 的元素，并返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 **[原地 ](https://baike.baidu.com/item/原地算法)修改输入数组**。\n\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n \n\n**示例 1:**\n\n```\n给定 nums = [3,2,2,3], val = 3,\n\n函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n**示例 2:**\n\n```\n给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n\n函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n\n注意这五个元素可为任意顺序。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n \n\n**说明:**\n\n为什么返回数值是整数，但输出的答案是数组呢?\n\n请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n\n你可以想象内部操作如下:\n\n```\n// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\nint len = removeElement(nums, val);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n```\n\n\n','<p><br></p><p>给你一个数组 *nums* 和一个值 *val*，你需要 **[原地](https://baike.baidu.com/item/原地算法)** 移除所有数值等于 *val* 的元素，并返回移除后数组的新长度。</p><p><br></p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 **[原地 ](https://baike.baidu.com/item/原地算法)修改输入数组**。</p><p><br></p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>给定 nums = [3,2,2,3], val = 3,</p><p><br></p><p>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</p><p><br></p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>给定 nums = [0,1,2,2,3,0,4,2], val = 2,</p><p><br></p><p>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p><p><br></p><p>注意这五个元素可为任意顺序。</p><p><br></p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**说明:**</p><p><br></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p><br></p><p>请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p><br></p><p>你可以想象内部操作如下:</p><p><br></p><p>```</p><p>// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</p><p>int len = removeElement(nums, val);</p><p><br></p><p>// 在函数里修改输入数组对于调用者是可见的。</p><p>// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</p><p>for (int i = 0; i &lt; len; i++) {</p><p>    print(nums[i]);</p><p>}</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u4f60\\u4e00\\u4e2a\\u6570\\u7ec4 *nums* \\u548c\\u4e00\\u4e2a\\u503c *val*\\uff0c\\u4f60\\u9700\\u8981 **[\\u539f\\u5730](https://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)** \\u79fb\\u9664\\u6240\\u6709\\u6570\\u503c\\u7b49\\u4e8e *val* \\u7684\\u5143\\u7d20\\uff0c\\u5e76\\u8fd4\\u56de\\u79fb\\u9664\\u540e\\u6570\\u7ec4\\u7684\\u65b0\\u957f\\u5ea6\\u3002\\n\\n\\u4e0d\\u8981\\u4f7f\\u7528\\u989d\\u5916\\u7684\\u6570\\u7ec4\\u7a7a\\u95f4\\uff0c\\u4f60\\u5fc5\\u987b\\u4ec5\\u4f7f\\u7528 O(1) \\u989d\\u5916\\u7a7a\\u95f4\\u5e76 **[\\u539f\\u5730 ](https://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4**\\u3002\\n\\n\\u5143\\u7d20\\u7684\\u987a\\u5e8f\\u53ef\\u4ee5\\u6539\\u53d8\\u3002\\u4f60\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u6570\\u7ec4\\u4e2d\\u8d85\\u51fa\\u65b0\\u957f\\u5ea6\\u540e\\u9762\\u7684\\u5143\\u7d20\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u7ed9\\u5b9a nums = [3,2,2,3], val = 3,\\n\\n\\u51fd\\u6570\\u5e94\\u8be5\\u8fd4\\u56de\\u65b0\\u7684\\u957f\\u5ea6 2, \\u5e76\\u4e14 nums \\u4e2d\\u7684\\u524d\\u4e24\\u4e2a\\u5143\\u7d20\\u5747\\u4e3a 2\\u3002\\n\\n\\u4f60\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u6570\\u7ec4\\u4e2d\\u8d85\\u51fa\\u65b0\\u957f\\u5ea6\\u540e\\u9762\\u7684\\u5143\\u7d20\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u7ed9\\u5b9a nums = [0,1,2,2,3,0,4,2], val = 2,\\n\\n\\u51fd\\u6570\\u5e94\\u8be5\\u8fd4\\u56de\\u65b0\\u7684\\u957f\\u5ea6 5, \\u5e76\\u4e14 nums \\u4e2d\\u7684\\u524d\\u4e94\\u4e2a\\u5143\\u7d20\\u4e3a 0, 1, 3, 0, 4\\u3002\\n\\n\\u6ce8\\u610f\\u8fd9\\u4e94\\u4e2a\\u5143\\u7d20\\u53ef\\u4e3a\\u4efb\\u610f\\u987a\\u5e8f\\u3002\\n\\n\\u4f60\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u6570\\u7ec4\\u4e2d\\u8d85\\u51fa\\u65b0\\u957f\\u5ea6\\u540e\\u9762\\u7684\\u5143\\u7d20\\u3002\\n```\\n\\n \\n\\n**\\u8bf4\\u660e:**\\n\\n\\u4e3a\\u4ec0\\u4e48\\u8fd4\\u56de\\u6570\\u503c\\u662f\\u6574\\u6570\\uff0c\\u4f46\\u8f93\\u51fa\\u7684\\u7b54\\u6848\\u662f\\u6570\\u7ec4\\u5462?\\n\\n\\u8bf7\\u6ce8\\u610f\\uff0c\\u8f93\\u5165\\u6570\\u7ec4\\u662f\\u4ee5**\\u300c\\u5f15\\u7528\\u300d**\\u65b9\\u5f0f\\u4f20\\u9012\\u7684\\uff0c\\u8fd9\\u610f\\u5473\\u7740\\u5728\\u51fd\\u6570\\u91cc\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4\\u5bf9\\u4e8e\\u8c03\\u7528\\u8005\\u662f\\u53ef\\u89c1\\u7684\\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u60f3\\u8c61\\u5185\\u90e8\\u64cd\\u4f5c\\u5982\\u4e0b:\\n\\n```\\n// nums \\u662f\\u4ee5\\u201c\\u5f15\\u7528\\u201d\\u65b9\\u5f0f\\u4f20\\u9012\\u7684\\u3002\\u4e5f\\u5c31\\u662f\\u8bf4\\uff0c\\u4e0d\\u5bf9\\u5b9e\\u53c2\\u4f5c\\u4efb\\u4f55\\u62f7\\u8d1d\\nint len = removeElement(nums, val);\\n\\n// \\u5728\\u51fd\\u6570\\u91cc\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4\\u5bf9\\u4e8e\\u8c03\\u7528\\u8005\\u662f\\u53ef\\u89c1\\u7684\\u3002\\n// \\u6839\\u636e\\u4f60\\u7684\\u51fd\\u6570\\u8fd4\\u56de\\u7684\\u957f\\u5ea6, \\u5b83\\u4f1a\\u6253\\u5370\\u51fa\\u6570\\u7ec4\\u4e2d \\u8be5\\u957f\\u5ea6\\u8303\\u56f4\\u5185 \\u7684\\u6240\\u6709\\u5143\\u7d20\\u3002\\nfor (int i = 0; i < len; i++) {\\n    print(nums[i]);\\n}\\n```\\n\\n\\n\"}]}','green','2020-08-12 12:49:14'),(75,'26. 删除排序数组中的重复项','\n给定一个排序数组，你需要在**[ 原地](http://baike.baidu.com/item/原地算法)** 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须在 **[原地 ](https://baike.baidu.com/item/原地算法)修改输入数组** 并在使用 O(1) 额外空间的条件下完成。\n\n \n\n**示例 1:**\n\n```\n给定数组 nums = [1,1,2], \n\n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 \n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n**示例 2:**\n\n```\n给定 nums = [0,0,1,1,1,2,2,3,3,4],\n\n函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n \n\n**说明:**\n\n为什么返回数值是整数，但输出的答案是数组呢?\n\n请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n\n你可以想象内部操作如下:\n\n```\n// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n```\n\n\n','<p><br></p><p>给定一个排序数组，你需要在**[ 原地](http://baike.baidu.com/item/原地算法)** 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p><br></p><p>不要使用额外的数组空间，你必须在 **[原地 ](https://baike.baidu.com/item/原地算法)修改输入数组** 并在使用 O(1) 额外空间的条件下完成。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>给定数组 nums = [1,1,2], </p><p><br></p><p>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </p><p><br></p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p><p><br></p><p>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</p><p><br></p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**说明:**</p><p><br></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p><br></p><p>请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p><br></p><p>你可以想象内部操作如下:</p><p><br></p><p>```</p><p>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</p><p>int len = removeDuplicates(nums);</p><p><br></p><p>// 在函数里修改输入数组对于调用者是可见的。</p><p>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</p><p>for (int i = 0; i &lt; len; i++) {</p><p>    print(nums[i]);</p><p>}</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6392\\u5e8f\\u6570\\u7ec4\\uff0c\\u4f60\\u9700\\u8981\\u5728**[ \\u539f\\u5730](http://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)** \\u5220\\u9664\\u91cd\\u590d\\u51fa\\u73b0\\u7684\\u5143\\u7d20\\uff0c\\u4f7f\\u5f97\\u6bcf\\u4e2a\\u5143\\u7d20\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\uff0c\\u8fd4\\u56de\\u79fb\\u9664\\u540e\\u6570\\u7ec4\\u7684\\u65b0\\u957f\\u5ea6\\u3002\\n\\n\\u4e0d\\u8981\\u4f7f\\u7528\\u989d\\u5916\\u7684\\u6570\\u7ec4\\u7a7a\\u95f4\\uff0c\\u4f60\\u5fc5\\u987b\\u5728 **[\\u539f\\u5730 ](https://baike.baidu.com/item/\\u539f\\u5730\\u7b97\\u6cd5)\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4** \\u5e76\\u5728\\u4f7f\\u7528 O(1) \\u989d\\u5916\\u7a7a\\u95f4\\u7684\\u6761\\u4ef6\\u4e0b\\u5b8c\\u6210\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u7ed9\\u5b9a\\u6570\\u7ec4 nums = [1,1,2], \\n\\n\\u51fd\\u6570\\u5e94\\u8be5\\u8fd4\\u56de\\u65b0\\u7684\\u957f\\u5ea6 2, \\u5e76\\u4e14\\u539f\\u6570\\u7ec4 nums \\u7684\\u524d\\u4e24\\u4e2a\\u5143\\u7d20\\u88ab\\u4fee\\u6539\\u4e3a 1, 2\\u3002 \\n\\n\\u4f60\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u6570\\u7ec4\\u4e2d\\u8d85\\u51fa\\u65b0\\u957f\\u5ea6\\u540e\\u9762\\u7684\\u5143\\u7d20\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u7ed9\\u5b9a nums = [0,0,1,1,1,2,2,3,3,4],\\n\\n\\u51fd\\u6570\\u5e94\\u8be5\\u8fd4\\u56de\\u65b0\\u7684\\u957f\\u5ea6 5, \\u5e76\\u4e14\\u539f\\u6570\\u7ec4 nums \\u7684\\u524d\\u4e94\\u4e2a\\u5143\\u7d20\\u88ab\\u4fee\\u6539\\u4e3a 0, 1, 2, 3, 4\\u3002\\n\\n\\u4f60\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u6570\\u7ec4\\u4e2d\\u8d85\\u51fa\\u65b0\\u957f\\u5ea6\\u540e\\u9762\\u7684\\u5143\\u7d20\\u3002\\n```\\n\\n \\n\\n**\\u8bf4\\u660e:**\\n\\n\\u4e3a\\u4ec0\\u4e48\\u8fd4\\u56de\\u6570\\u503c\\u662f\\u6574\\u6570\\uff0c\\u4f46\\u8f93\\u51fa\\u7684\\u7b54\\u6848\\u662f\\u6570\\u7ec4\\u5462?\\n\\n\\u8bf7\\u6ce8\\u610f\\uff0c\\u8f93\\u5165\\u6570\\u7ec4\\u662f\\u4ee5**\\u300c\\u5f15\\u7528\\u300d**\\u65b9\\u5f0f\\u4f20\\u9012\\u7684\\uff0c\\u8fd9\\u610f\\u5473\\u7740\\u5728\\u51fd\\u6570\\u91cc\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4\\u5bf9\\u4e8e\\u8c03\\u7528\\u8005\\u662f\\u53ef\\u89c1\\u7684\\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u60f3\\u8c61\\u5185\\u90e8\\u64cd\\u4f5c\\u5982\\u4e0b:\\n\\n```\\n// nums \\u662f\\u4ee5\\u201c\\u5f15\\u7528\\u201d\\u65b9\\u5f0f\\u4f20\\u9012\\u7684\\u3002\\u4e5f\\u5c31\\u662f\\u8bf4\\uff0c\\u4e0d\\u5bf9\\u5b9e\\u53c2\\u505a\\u4efb\\u4f55\\u62f7\\u8d1d\\nint len = removeDuplicates(nums);\\n\\n// \\u5728\\u51fd\\u6570\\u91cc\\u4fee\\u6539\\u8f93\\u5165\\u6570\\u7ec4\\u5bf9\\u4e8e\\u8c03\\u7528\\u8005\\u662f\\u53ef\\u89c1\\u7684\\u3002\\n// \\u6839\\u636e\\u4f60\\u7684\\u51fd\\u6570\\u8fd4\\u56de\\u7684\\u957f\\u5ea6, \\u5b83\\u4f1a\\u6253\\u5370\\u51fa\\u6570\\u7ec4\\u4e2d\\u8be5\\u957f\\u5ea6\\u8303\\u56f4\\u5185\\u7684\\u6240\\u6709\\u5143\\u7d20\\u3002\\nfor (int i = 0; i < len; i++) {\\n    print(nums[i]);\\n}\\n```\\n\\n\\n\"}]}','green','2020-08-12 12:49:37'),(76,'25. K 个一组翻转链表','\n给你一个链表，每 *k* 个节点一组进行翻转，请你返回翻转后的链表。\n\n*k* 是一个正整数，它的值小于或等于链表的长度。\n\n如果节点总数不是 *k* 的整数倍，那么请将最后剩余的节点保持原有顺序。\n\n \n\n**示例：**\n\n给你这个链表：`1->2->3->4->5`\n\n当 *k* = 2 时，应当返回: `2->1->4->3->5`\n\n当 *k* = 3 时，应当返回: `3->2->1->4->5`\n\n \n\n**说明：**\n\n- 你的算法只能使用常数的额外空间。\n- **你不能只是单纯的改变节点内部的值**，而是需要实际进行节点交换。\n\n\n\n','<p><br></p><p>给你一个链表，每 *k* 个节点一组进行翻转，请你返回翻转后的链表。</p><p><br></p><p>*k* 是一个正整数，它的值小于或等于链表的长度。</p><p><br></p><p>如果节点总数不是 *k* 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p><br></p><p> </p><p><br></p><p>**示例：**</p><p><br></p><p>给你这个链表：`1-&gt;2-&gt;3-&gt;4-&gt;5`</p><p><br></p><p>当 *k* = 2 时，应当返回: `2-&gt;1-&gt;4-&gt;3-&gt;5`</p><p><br></p><p>当 *k* = 3 时，应当返回: `3-&gt;2-&gt;1-&gt;4-&gt;5`</p><p><br></p><p> </p><p><br></p><p>**说明：**</p><p><br></p><p>- 你的算法只能使用常数的额外空间。</p><p>- **你不能只是单纯的改变节点内部的值**，而是需要实际进行节点交换。</p><p><br></p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u4f60\\u4e00\\u4e2a\\u94fe\\u8868\\uff0c\\u6bcf *k* \\u4e2a\\u8282\\u70b9\\u4e00\\u7ec4\\u8fdb\\u884c\\u7ffb\\u8f6c\\uff0c\\u8bf7\\u4f60\\u8fd4\\u56de\\u7ffb\\u8f6c\\u540e\\u7684\\u94fe\\u8868\\u3002\\n\\n*k* \\u662f\\u4e00\\u4e2a\\u6b63\\u6574\\u6570\\uff0c\\u5b83\\u7684\\u503c\\u5c0f\\u4e8e\\u6216\\u7b49\\u4e8e\\u94fe\\u8868\\u7684\\u957f\\u5ea6\\u3002\\n\\n\\u5982\\u679c\\u8282\\u70b9\\u603b\\u6570\\u4e0d\\u662f *k* \\u7684\\u6574\\u6570\\u500d\\uff0c\\u90a3\\u4e48\\u8bf7\\u5c06\\u6700\\u540e\\u5269\\u4f59\\u7684\\u8282\\u70b9\\u4fdd\\u6301\\u539f\\u6709\\u987a\\u5e8f\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n\\u7ed9\\u4f60\\u8fd9\\u4e2a\\u94fe\\u8868\\uff1a`1->2->3->4->5`\\n\\n\\u5f53 *k* = 2 \\u65f6\\uff0c\\u5e94\\u5f53\\u8fd4\\u56de: `2->1->4->3->5`\\n\\n\\u5f53 *k* = 3 \\u65f6\\uff0c\\u5e94\\u5f53\\u8fd4\\u56de: `3->2->1->4->5`\\n\\n \\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n- \\u4f60\\u7684\\u7b97\\u6cd5\\u53ea\\u80fd\\u4f7f\\u7528\\u5e38\\u6570\\u7684\\u989d\\u5916\\u7a7a\\u95f4\\u3002\\n- **\\u4f60\\u4e0d\\u80fd\\u53ea\\u662f\\u5355\\u7eaf\\u7684\\u6539\\u53d8\\u8282\\u70b9\\u5185\\u90e8\\u7684\\u503c**\\uff0c\\u800c\\u662f\\u9700\\u8981\\u5b9e\\u9645\\u8fdb\\u884c\\u8282\\u70b9\\u4ea4\\u6362\\u3002\\n\\n\\n\\n\"}]}','red','2020-08-12 12:50:01'),(77,'24. 两两交换链表中的节点','\n给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\n\n**你不能只是单纯的改变节点内部的值**，而是需要实际的进行节点交换。\n\n \n\n**示例:**\n\n```\n给定 1->2->3->4, 你应该返回 2->1->4->3.\n```\n','<p><br></p><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><br></p><p>**你不能只是单纯的改变节点内部的值**，而是需要实际的进行节点交换。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u94fe\\u8868\\uff0c\\u4e24\\u4e24\\u4ea4\\u6362\\u5176\\u4e2d\\u76f8\\u90bb\\u7684\\u8282\\u70b9\\uff0c\\u5e76\\u8fd4\\u56de\\u4ea4\\u6362\\u540e\\u7684\\u94fe\\u8868\\u3002\\n\\n**\\u4f60\\u4e0d\\u80fd\\u53ea\\u662f\\u5355\\u7eaf\\u7684\\u6539\\u53d8\\u8282\\u70b9\\u5185\\u90e8\\u7684\\u503c**\\uff0c\\u800c\\u662f\\u9700\\u8981\\u5b9e\\u9645\\u7684\\u8fdb\\u884c\\u8282\\u70b9\\u4ea4\\u6362\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u7ed9\\u5b9a 1->2->3->4, \\u4f60\\u5e94\\u8be5\\u8fd4\\u56de 2->1->4->3.\\n```\\n\"}]}','yellow','2020-08-12 12:50:38'),(78,'23. 合并K个排序链表','\n合并 *k* 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。\n\n**示例:**\n\n```\n输入:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n输出: 1->1->2->3->4->4->5->6\n```\n\n','<p><br></p><p>合并 *k* 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入:</p><p>[</p><p>  1-&gt;4-&gt;5,</p><p>  1-&gt;3-&gt;4,</p><p>  2-&gt;6</p><p>]</p><p>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5408\\u5e76 *k* \\u4e2a\\u6392\\u5e8f\\u94fe\\u8868\\uff0c\\u8fd4\\u56de\\u5408\\u5e76\\u540e\\u7684\\u6392\\u5e8f\\u94fe\\u8868\\u3002\\u8bf7\\u5206\\u6790\\u548c\\u63cf\\u8ff0\\u7b97\\u6cd5\\u7684\\u590d\\u6742\\u5ea6\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165:\\n[\\n  1->4->5,\\n  1->3->4,\\n  2->6\\n]\\n\\u8f93\\u51fa: 1->1->2->3->4->4->5->6\\n```\\n\\n\"}]}','red','2020-08-12 12:50:51'),(79,'22. 括号生成','\n数字 *n* 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 **有效的** 括号组合。\n\n \n\n**示例：**\n\n```\n输入：n = 3\n输出：[\n       \"((()))\",\n       \"(()())\",\n       \"(())()\",\n       \"()(())\",\n       \"()()()\"\n     ]\n```\n','<p><br></p><p>数字 *n* 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 **有效的** 括号组合。</p><p><br></p><p> </p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>输入：n = 3</p><p>输出：[</p><p>       \"((()))\",</p><p>       \"(()())\",</p><p>       \"(())()\",</p><p>       \"()(())\",</p><p>       \"()()()\"</p><p>     ]</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u6570\\u5b57 *n* \\u4ee3\\u8868\\u751f\\u6210\\u62ec\\u53f7\\u7684\\u5bf9\\u6570\\uff0c\\u8bf7\\u4f60\\u8bbe\\u8ba1\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u7528\\u4e8e\\u80fd\\u591f\\u751f\\u6210\\u6240\\u6709\\u53ef\\u80fd\\u7684\\u5e76\\u4e14 **\\u6709\\u6548\\u7684** \\u62ec\\u53f7\\u7ec4\\u5408\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 3\\n\\u8f93\\u51fa\\uff1a[\\n       \\\"((()))\\\",\\n       \\\"(()())\\\",\\n       \\\"(())()\\\",\\n       \\\"()(())\\\",\\n       \\\"()()()\\\"\\n     ]\\n```\\n\"}]}','yellow','2020-08-12 12:51:04'),(80,'21. 合并两个有序链表','\n将两个升序链表合并为一个新的 **升序** 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n\n \n\n**示例：**\n\n```\n输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n```\n\n','<p><br></p><p>将两个升序链表合并为一个新的 **升序** 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><br></p><p> </p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</p><p>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5c06\\u4e24\\u4e2a\\u5347\\u5e8f\\u94fe\\u8868\\u5408\\u5e76\\u4e3a\\u4e00\\u4e2a\\u65b0\\u7684 **\\u5347\\u5e8f** \\u94fe\\u8868\\u5e76\\u8fd4\\u56de\\u3002\\u65b0\\u94fe\\u8868\\u662f\\u901a\\u8fc7\\u62fc\\u63a5\\u7ed9\\u5b9a\\u7684\\u4e24\\u4e2a\\u94fe\\u8868\\u7684\\u6240\\u6709\\u8282\\u70b9\\u7ec4\\u6210\\u7684\\u3002 \\n\\n \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a1->2->4, 1->3->4\\n\\u8f93\\u51fa\\uff1a1->1->2->3->4->4\\n```\\n\\n\"}]}','green','2020-08-12 12:51:17'),(81,'20. 有效的括号','\n给定一个只包括 `\'(\'`，`\')\'`，`\'{\'`，`\'}\'`，`\'[\'`，`\']\'` 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n1. 左括号必须用相同类型的右括号闭合。\n2. 左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n\n**示例 1:**\n\n```\n输入: \"()\"\n输出: true\n```\n\n**示例 2:**\n\n```\n输入: \"()[]{}\"\n输出: true\n```\n\n**示例 3:**\n\n```\n输入: \"(]\"\n输出: false\n```\n\n**示例 4:**\n\n```\n输入: \"([)]\"\n输出: false\n```\n\n**示例 5:**\n\n```\n输入: \"{[]}\"\n输出: true\n```\n','<p><br></p><p>给定一个只包括 `\'(\'`，`\')\'`，`\'{\'`，`\'}\'`，`\'[\'`，`\']\'` 的字符串，判断字符串是否有效。</p><p><br></p><p>有效字符串需满足：</p><p><br></p><p>1. 左括号必须用相同类型的右括号闭合。</p><p>2. 左括号必须以正确的顺序闭合。</p><p><br></p><p>注意空字符串可被认为是有效字符串。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: \"()\"</p><p>输出: true</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: \"()[]{}\"</p><p>输出: true</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: \"(]\"</p><p>输出: false</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入: \"([)]\"</p><p>输出: false</p><p>```</p><p><br></p><p>**示例 5:**</p><p><br></p><p>```</p><p>输入: \"{[]}\"</p><p>输出: true</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u53ea\\u5305\\u62ec `\'(\'`\\uff0c`\')\'`\\uff0c`\'{\'`\\uff0c`\'}\'`\\uff0c`\'[\'`\\uff0c`\']\'` \\u7684\\u5b57\\u7b26\\u4e32\\uff0c\\u5224\\u65ad\\u5b57\\u7b26\\u4e32\\u662f\\u5426\\u6709\\u6548\\u3002\\n\\n\\u6709\\u6548\\u5b57\\u7b26\\u4e32\\u9700\\u6ee1\\u8db3\\uff1a\\n\\n1. \\u5de6\\u62ec\\u53f7\\u5fc5\\u987b\\u7528\\u76f8\\u540c\\u7c7b\\u578b\\u7684\\u53f3\\u62ec\\u53f7\\u95ed\\u5408\\u3002\\n2. \\u5de6\\u62ec\\u53f7\\u5fc5\\u987b\\u4ee5\\u6b63\\u786e\\u7684\\u987a\\u5e8f\\u95ed\\u5408\\u3002\\n\\n\\u6ce8\\u610f\\u7a7a\\u5b57\\u7b26\\u4e32\\u53ef\\u88ab\\u8ba4\\u4e3a\\u662f\\u6709\\u6548\\u5b57\\u7b26\\u4e32\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\\"()\\\"\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\\"()[]{}\\\"\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: \\\"(]\\\"\\n\\u8f93\\u51fa: false\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165: \\\"([)]\\\"\\n\\u8f93\\u51fa: false\\n```\\n\\n**\\u793a\\u4f8b 5:**\\n\\n```\\n\\u8f93\\u5165: \\\"{[]}\\\"\\n\\u8f93\\u51fa: true\\n```\\n\"}]}','green','2020-08-12 12:51:31'),(82,'19. 删除链表的倒数第N个节点','\n给定一个链表，删除链表的倒数第 *n* 个节点，并且返回链表的头结点。\n\n**示例：**\n\n```\n给定一个链表: 1->2->3->4->5, 和 n = 2.\n\n当删除了倒数第二个节点后，链表变为 1->2->3->5.\n```\n\n**说明：**\n\n给定的 *n* 保证是有效的。\n\n**进阶：**\n\n你能尝试使用一趟扫描实现吗？\n\n','<p><br></p><p>给定一个链表，删除链表的倒数第 *n* 个节点，并且返回链表的头结点。</p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</p><p><br></p><p>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p><p>```</p><p><br></p><p>**说明：**</p><p><br></p><p>给定的 *n* 保证是有效的。</p><p><br></p><p>**进阶：**</p><p><br></p><p>你能尝试使用一趟扫描实现吗？</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u94fe\\u8868\\uff0c\\u5220\\u9664\\u94fe\\u8868\\u7684\\u5012\\u6570\\u7b2c *n* \\u4e2a\\u8282\\u70b9\\uff0c\\u5e76\\u4e14\\u8fd4\\u56de\\u94fe\\u8868\\u7684\\u5934\\u7ed3\\u70b9\\u3002\\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u94fe\\u8868: 1->2->3->4->5, \\u548c n = 2.\\n\\n\\u5f53\\u5220\\u9664\\u4e86\\u5012\\u6570\\u7b2c\\u4e8c\\u4e2a\\u8282\\u70b9\\u540e\\uff0c\\u94fe\\u8868\\u53d8\\u4e3a 1->2->3->5.\\n```\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n\\u7ed9\\u5b9a\\u7684 *n* \\u4fdd\\u8bc1\\u662f\\u6709\\u6548\\u7684\\u3002\\n\\n**\\u8fdb\\u9636\\uff1a**\\n\\n\\u4f60\\u80fd\\u5c1d\\u8bd5\\u4f7f\\u7528\\u4e00\\u8d9f\\u626b\\u63cf\\u5b9e\\u73b0\\u5417\\uff1f\\n\\n\"}]}','yellow','2020-08-12 12:51:44'),(83,'18. 四数之和','\n给定一个包含 *n* 个整数的数组 `nums` 和一个目标值 `target`，判断 `nums` 中是否存在四个元素 *a，**b，c* 和 *d* ，使得 *a* + *b* + *c* + *d* 的值与 `target` 相等？找出所有满足条件且不重复的四元组。\n\n**注意：**\n\n答案中不可以包含重复的四元组。\n\n**示例：**\n\n```\n给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。\n\n满足要求的四元组集合为：\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n```\n','<p><br></p><p>给定一个包含 *n* 个整数的数组 `nums` 和一个目标值 `target`，判断 `nums` 中是否存在四个元素 *a，**b，c* 和 *d* ，使得 *a* + *b* + *c* + *d* 的值与 `target` 相等？找出所有满足条件且不重复的四元组。</p><p><br></p><p>**注意：**</p><p><br></p><p>答案中不可以包含重复的四元组。</p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</p><p><br></p><p>满足要求的四元组集合为：</p><p>[</p><p>  [-1,  0, 0, 1],</p><p>  [-2, -1, 1, 2],</p><p>  [-2,  0, 0, 2]</p><p>]</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5305\\u542b *n* \\u4e2a\\u6574\\u6570\\u7684\\u6570\\u7ec4 `nums` \\u548c\\u4e00\\u4e2a\\u76ee\\u6807\\u503c `target`\\uff0c\\u5224\\u65ad `nums` \\u4e2d\\u662f\\u5426\\u5b58\\u5728\\u56db\\u4e2a\\u5143\\u7d20 *a\\uff0c**b\\uff0cc* \\u548c *d* \\uff0c\\u4f7f\\u5f97 *a* + *b* + *c* + *d* \\u7684\\u503c\\u4e0e `target` \\u76f8\\u7b49\\uff1f\\u627e\\u51fa\\u6240\\u6709\\u6ee1\\u8db3\\u6761\\u4ef6\\u4e14\\u4e0d\\u91cd\\u590d\\u7684\\u56db\\u5143\\u7ec4\\u3002\\n\\n**\\u6ce8\\u610f\\uff1a**\\n\\n\\u7b54\\u6848\\u4e2d\\u4e0d\\u53ef\\u4ee5\\u5305\\u542b\\u91cd\\u590d\\u7684\\u56db\\u5143\\u7ec4\\u3002\\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u7ed9\\u5b9a\\u6570\\u7ec4 nums = [1, 0, -1, 0, -2, 2]\\uff0c\\u548c target = 0\\u3002\\n\\n\\u6ee1\\u8db3\\u8981\\u6c42\\u7684\\u56db\\u5143\\u7ec4\\u96c6\\u5408\\u4e3a\\uff1a\\n[\\n  [-1,  0, 0, 1],\\n  [-2, -1, 1, 2],\\n  [-2,  0, 0, 2]\\n]\\n```\\n\"}]}','yellow','2020-08-12 12:51:58'),(84,'17. 电话号码的字母组合','\n给定一个仅包含数字 `2-9` 的字符串，返回所有它能表示的字母组合。\n\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png)\n\n**示例:**\n\n```\n输入：\"23\"\n输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n```\n\n**说明:**\n尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。\n\n\n','<p><br></p><p>给定一个仅包含数字 `2-9` 的字符串，返回所有它能表示的字母组合。</p><p><br></p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><br></p><p>![img](https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png)</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入：\"23\"</p><p>输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].</p><p>```</p><p><br></p><p>**说明:**</p><p>尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u4ec5\\u5305\\u542b\\u6570\\u5b57 `2-9` \\u7684\\u5b57\\u7b26\\u4e32\\uff0c\\u8fd4\\u56de\\u6240\\u6709\\u5b83\\u80fd\\u8868\\u793a\\u7684\\u5b57\\u6bcd\\u7ec4\\u5408\\u3002\\n\\n\\u7ed9\\u51fa\\u6570\\u5b57\\u5230\\u5b57\\u6bcd\\u7684\\u6620\\u5c04\\u5982\\u4e0b\\uff08\\u4e0e\\u7535\\u8bdd\\u6309\\u952e\\u76f8\\u540c\\uff09\\u3002\\u6ce8\\u610f 1 \\u4e0d\\u5bf9\\u5e94\\u4efb\\u4f55\\u5b57\\u6bcd\\u3002\\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png)\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\\"23\\\"\\n\\u8f93\\u51fa\\uff1a[\\\"ad\\\", \\\"ae\\\", \\\"af\\\", \\\"bd\\\", \\\"be\\\", \\\"bf\\\", \\\"cd\\\", \\\"ce\\\", \\\"cf\\\"].\\n```\\n\\n**\\u8bf4\\u660e:**\\n\\u5c3d\\u7ba1\\u4e0a\\u9762\\u7684\\u7b54\\u6848\\u662f\\u6309\\u5b57\\u5178\\u5e8f\\u6392\\u5217\\u7684\\uff0c\\u4f46\\u662f\\u4f60\\u53ef\\u4ee5\\u4efb\\u610f\\u9009\\u62e9\\u7b54\\u6848\\u8f93\\u51fa\\u7684\\u987a\\u5e8f\\u3002\\n\\n\\n\"}]}','yellow','2020-08-12 12:52:14'),(85,'16. 最接近的三数之和','\n给定一个包括 *n* 个整数的数组 `nums` 和 一个目标值 `target`。找出 `nums` 中的三个整数，使得它们的和与 `target` 最接近。返回这三个数的和。假定每组输入只存在唯一答案。\n\n \n\n**示例：**\n\n```\n输入：nums = [-1,2,1,-4], target = 1\n输出：2\n解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。\n```\n\n \n\n**提示：**\n\n- `3 <= nums.length <= 10^3`\n- `-10^3 <= nums[i] <= 10^3`\n- `-10^4 <= target <= 10^4`\n\n\n','<p><br></p><p>给定一个包括 *n* 个整数的数组 `nums` 和 一个目标值 `target`。找出 `nums` 中的三个整数，使得它们的和与 `target` 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p><br></p><p> </p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>输入：nums = [-1,2,1,-4], target = 1</p><p>输出：2</p><p>解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `3 &lt;= nums.length &lt;= 10^3`</p><p>- `-10^3 &lt;= nums[i] &lt;= 10^3`</p><p>- `-10^4 &lt;= target &lt;= 10^4`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5305\\u62ec *n* \\u4e2a\\u6574\\u6570\\u7684\\u6570\\u7ec4 `nums` \\u548c \\u4e00\\u4e2a\\u76ee\\u6807\\u503c `target`\\u3002\\u627e\\u51fa `nums` \\u4e2d\\u7684\\u4e09\\u4e2a\\u6574\\u6570\\uff0c\\u4f7f\\u5f97\\u5b83\\u4eec\\u7684\\u548c\\u4e0e `target` \\u6700\\u63a5\\u8fd1\\u3002\\u8fd4\\u56de\\u8fd9\\u4e09\\u4e2a\\u6570\\u7684\\u548c\\u3002\\u5047\\u5b9a\\u6bcf\\u7ec4\\u8f93\\u5165\\u53ea\\u5b58\\u5728\\u552f\\u4e00\\u7b54\\u6848\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1anums = [-1,2,1,-4], target = 1\\n\\u8f93\\u51fa\\uff1a2\\n\\u89e3\\u91ca\\uff1a\\u4e0e target \\u6700\\u63a5\\u8fd1\\u7684\\u548c\\u662f 2 (-1 + 2 + 1 = 2) \\u3002\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `3 <= nums.length <= 10^3`\\n- `-10^3 <= nums[i] <= 10^3`\\n- `-10^4 <= target <= 10^4`\\n\\n\\n\"}]}','yellow','2020-08-12 12:52:27'),(86,'15. 三数之和','\n给你一个包含 *n* 个整数的数组 `nums`，判断 `nums` 中是否存在三个元素 *a，b，c ，*使得 *a + b + c =* 0 ？请你找出所有满足条件且不重复的三元组。\n\n**注意：**答案中不可以包含重复的三元组。\n\n \n\n**示例：**\n\n```\n给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n```\n\n','<p><br></p><p>给你一个包含 *n* 个整数的数组 `nums`，判断 `nums` 中是否存在三个元素 *a，b，c ，*使得 *a + b + c =* 0 ？请你找出所有满足条件且不重复的三元组。</p><p><br></p><p>**注意：**答案中不可以包含重复的三元组。</p><p><br></p><p> </p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p><br></p><p>满足要求的三元组集合为：</p><p>[</p><p>  [-1, 0, 1],</p><p>  [-1, -1, 2]</p><p>]</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u4f60\\u4e00\\u4e2a\\u5305\\u542b *n* \\u4e2a\\u6574\\u6570\\u7684\\u6570\\u7ec4 `nums`\\uff0c\\u5224\\u65ad `nums` \\u4e2d\\u662f\\u5426\\u5b58\\u5728\\u4e09\\u4e2a\\u5143\\u7d20 *a\\uff0cb\\uff0cc \\uff0c*\\u4f7f\\u5f97 *a + b + c =* 0 \\uff1f\\u8bf7\\u4f60\\u627e\\u51fa\\u6240\\u6709\\u6ee1\\u8db3\\u6761\\u4ef6\\u4e14\\u4e0d\\u91cd\\u590d\\u7684\\u4e09\\u5143\\u7ec4\\u3002\\n\\n**\\u6ce8\\u610f\\uff1a**\\u7b54\\u6848\\u4e2d\\u4e0d\\u53ef\\u4ee5\\u5305\\u542b\\u91cd\\u590d\\u7684\\u4e09\\u5143\\u7ec4\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u7ed9\\u5b9a\\u6570\\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\\uff0c\\n\\n\\u6ee1\\u8db3\\u8981\\u6c42\\u7684\\u4e09\\u5143\\u7ec4\\u96c6\\u5408\\u4e3a\\uff1a\\n[\\n  [-1, 0, 1],\\n  [-1, -1, 2]\\n]\\n```\\n\\n\"}]}','yellow','2020-08-12 12:52:39'),(87,'14. 最长公共前缀','\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 `\"\"`。\n\n**示例 1:**\n\n```\n输入: [\"flower\",\"flow\",\"flight\"]\n输出: \"fl\"\n```\n\n**示例 2:**\n\n```\n输入: [\"dog\",\"racecar\",\"car\"]\n输出: \"\"\n解释: 输入不存在公共前缀。\n```\n\n**说明:**\n\n所有输入只包含小写字母 `a-z` 。\n\n','<p><br></p><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p><br></p><p>如果不存在公共前缀，返回空字符串 `\"\"`。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [\"flower\",\"flow\",\"flight\"]</p><p>输出: \"fl\"</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [\"dog\",\"racecar\",\"car\"]</p><p>输出: \"\"</p><p>解释: 输入不存在公共前缀。</p><p>```</p><p><br></p><p>**说明:**</p><p><br></p><p>所有输入只包含小写字母 `a-z` 。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7f16\\u5199\\u4e00\\u4e2a\\u51fd\\u6570\\u6765\\u67e5\\u627e\\u5b57\\u7b26\\u4e32\\u6570\\u7ec4\\u4e2d\\u7684\\u6700\\u957f\\u516c\\u5171\\u524d\\u7f00\\u3002\\n\\n\\u5982\\u679c\\u4e0d\\u5b58\\u5728\\u516c\\u5171\\u524d\\u7f00\\uff0c\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32 `\\\"\\\"`\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [\\\"flower\\\",\\\"flow\\\",\\\"flight\\\"]\\n\\u8f93\\u51fa: \\\"fl\\\"\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [\\\"dog\\\",\\\"racecar\\\",\\\"car\\\"]\\n\\u8f93\\u51fa: \\\"\\\"\\n\\u89e3\\u91ca: \\u8f93\\u5165\\u4e0d\\u5b58\\u5728\\u516c\\u5171\\u524d\\u7f00\\u3002\\n```\\n\\n**\\u8bf4\\u660e:**\\n\\n\\u6240\\u6709\\u8f93\\u5165\\u53ea\\u5305\\u542b\\u5c0f\\u5199\\u5b57\\u6bcd `a-z` \\u3002\\n\\n\"}]}','green','2020-08-12 12:52:50'),(88,'13. 罗马数字转整数','\n罗马数字包含以下七种字符: `I`， `V`， `X`， `L`，`C`，`D` 和 `M`。\n\n```\n字符          数值\nI               1\nV              5\nX             10\nL              50\nC             100\nD              500\nM             1000\n```\n\n例如， 罗马数字 2 写做 `II` ，即为两个并列的 1。12 写做 `XII` ，即为 `X` + `II` 。 27 写做 `XXVII`, 即为 `XX` + `V` + `II` 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：\n\n- `I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。\n- `X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 \n- `C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。\n\n给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。\n\n**示例 1:**\n\n```\n输入: \"III\"\n输出: 3\n```\n\n**示例 2:**\n\n```\n输入: \"IV\"\n输出: 4\n```\n\n**示例 3:**\n\n```\n输入: \"IX\"\n输出: 9\n```\n\n**示例 4:**\n\n```\n输入: \"LVIII\"\n输出: 58\n解释: L = 50, V= 5, III = 3.\n```\n\n**示例 5:**\n\n```\n输入: \"MCMXCIV\"\n输出: 1994\n解释: M = 1000, CM = 900, XC = 90, IV = 4.\n```\n\n','<p><br></p><p>罗马数字包含以下七种字符: `I`， `V`， `X`， `L`，`C`，`D` 和 `M`。</p><p><br></p><p>```</p><p>字符          数值</p><p>I               1</p><p>V              5</p><p>X             10</p><p>L              50</p><p>C             100</p><p>D              500</p><p>M             1000</p><p>```</p><p><br></p><p>例如， 罗马数字 2 写做 `II` ，即为两个并列的 1。12 写做 `XII` ，即为 `X` + `II` 。 27 写做 `XXVII`, 即为 `XX` + `V` + `II` 。</p><p><br></p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：</p><p><br></p><p>- `I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。</p><p>- `X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 </p><p>- `C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。</p><p><br></p><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: \"III\"</p><p>输出: 3</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: \"IV\"</p><p>输出: 4</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: \"IX\"</p><p>输出: 9</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入: \"LVIII\"</p><p>输出: 58</p><p>解释: L = 50, V= 5, III = 3.</p><p>```</p><p><br></p><p>**示例 5:**</p><p><br></p><p>```</p><p>输入: \"MCMXCIV\"</p><p>输出: 1994</p><p>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7f57\\u9a6c\\u6570\\u5b57\\u5305\\u542b\\u4ee5\\u4e0b\\u4e03\\u79cd\\u5b57\\u7b26: `I`\\uff0c `V`\\uff0c `X`\\uff0c `L`\\uff0c`C`\\uff0c`D` \\u548c `M`\\u3002\\n\\n```\\n\\u5b57\\u7b26          \\u6570\\u503c\\nI               1\\nV              5\\nX             10\\nL              50\\nC             100\\nD              500\\nM             1000\\n```\\n\\n\\u4f8b\\u5982\\uff0c \\u7f57\\u9a6c\\u6570\\u5b57 2 \\u5199\\u505a `II` \\uff0c\\u5373\\u4e3a\\u4e24\\u4e2a\\u5e76\\u5217\\u7684 1\\u300212 \\u5199\\u505a `XII` \\uff0c\\u5373\\u4e3a `X` + `II` \\u3002 27 \\u5199\\u505a `XXVII`, \\u5373\\u4e3a `XX` + `V` + `II` \\u3002\\n\\n\\u901a\\u5e38\\u60c5\\u51b5\\u4e0b\\uff0c\\u7f57\\u9a6c\\u6570\\u5b57\\u4e2d\\u5c0f\\u7684\\u6570\\u5b57\\u5728\\u5927\\u7684\\u6570\\u5b57\\u7684\\u53f3\\u8fb9\\u3002\\u4f46\\u4e5f\\u5b58\\u5728\\u7279\\u4f8b\\uff0c\\u4f8b\\u5982 4 \\u4e0d\\u5199\\u505a `IIII`\\uff0c\\u800c\\u662f `IV`\\u3002\\u6570\\u5b57 1 \\u5728\\u6570\\u5b57 5 \\u7684\\u5de6\\u8fb9\\uff0c\\u6240\\u8868\\u793a\\u7684\\u6570\\u7b49\\u4e8e\\u5927\\u6570 5 \\u51cf\\u5c0f\\u6570 1 \\u5f97\\u5230\\u7684\\u6570\\u503c 4 \\u3002\\u540c\\u6837\\u5730\\uff0c\\u6570\\u5b57 9 \\u8868\\u793a\\u4e3a `IX`\\u3002\\u8fd9\\u4e2a\\u7279\\u6b8a\\u7684\\u89c4\\u5219\\u53ea\\u9002\\u7528\\u4e8e\\u4ee5\\u4e0b\\u516d\\u79cd\\u60c5\\u51b5\\uff1a\\n\\n- `I` \\u53ef\\u4ee5\\u653e\\u5728 `V` (5) \\u548c `X` (10) \\u7684\\u5de6\\u8fb9\\uff0c\\u6765\\u8868\\u793a 4 \\u548c 9\\u3002\\n- `X` \\u53ef\\u4ee5\\u653e\\u5728 `L` (50) \\u548c `C` (100) \\u7684\\u5de6\\u8fb9\\uff0c\\u6765\\u8868\\u793a 40 \\u548c 90\\u3002 \\n- `C` \\u53ef\\u4ee5\\u653e\\u5728 `D` (500) \\u548c `M` (1000) \\u7684\\u5de6\\u8fb9\\uff0c\\u6765\\u8868\\u793a 400 \\u548c 900\\u3002\\n\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u7f57\\u9a6c\\u6570\\u5b57\\uff0c\\u5c06\\u5176\\u8f6c\\u6362\\u6210\\u6574\\u6570\\u3002\\u8f93\\u5165\\u786e\\u4fdd\\u5728 1 \\u5230 3999 \\u7684\\u8303\\u56f4\\u5185\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\\"III\\\"\\n\\u8f93\\u51fa: 3\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\\"IV\\\"\\n\\u8f93\\u51fa: 4\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: \\\"IX\\\"\\n\\u8f93\\u51fa: 9\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165: \\\"LVIII\\\"\\n\\u8f93\\u51fa: 58\\n\\u89e3\\u91ca: L = 50, V= 5, III = 3.\\n```\\n\\n**\\u793a\\u4f8b 5:**\\n\\n```\\n\\u8f93\\u5165: \\\"MCMXCIV\\\"\\n\\u8f93\\u51fa: 1994\\n\\u89e3\\u91ca: M = 1000, CM = 900, XC = 90, IV = 4.\\n```\\n\\n\"}]}','green','2020-08-12 12:53:55'),(89,'12. 整数转罗马数字','\n罗马数字包含以下七种字符： `I`， `V`， `X`， `L`，`C`，`D` 和 `M`。\n\n```\n字符          数值\nI                1\nV               5\nX              10\nL               50\nC              100\nD              500\nM             1000\n```\n\n例如， 罗马数字 2 写做 `II` ，即为两个并列的 1。12 写做 `XII` ，即为 `X` + `II` 。 27 写做 `XXVII`, 即为 `XX` + `V` + `II` 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：\n\n- `I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。\n- `X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 \n- `C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。\n\n给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。\n\n**示例 1:**\n\n```\n输入: 3\n输出: \"III\"\n```\n\n**示例 2:**\n\n```\n输入: 4\n输出: \"IV\"\n```\n\n**示例 3:**\n\n```\n输入: 9\n输出: \"IX\"\n```\n\n**示例 4:**\n\n```\n输入: 58\n输出: \"LVIII\"\n解释: L = 50, V = 5, III = 3.\n```\n\n**示例 5:**\n\n```\n输入: 1994\n输出: \"MCMXCIV\"\n解释: M = 1000, CM = 900, XC = 90, IV = 4.\n```\n\n\n','<p><br></p><p>罗马数字包含以下七种字符： `I`， `V`， `X`， `L`，`C`，`D` 和 `M`。</p><p><br></p><p>```</p><p>字符          数值</p><p>I                1</p><p>V               5</p><p>X              10</p><p>L               50</p><p>C              100</p><p>D              500</p><p>M             1000</p><p>```</p><p><br></p><p>例如， 罗马数字 2 写做 `II` ，即为两个并列的 1。12 写做 `XII` ，即为 `X` + `II` 。 27 写做 `XXVII`, 即为 `XX` + `V` + `II` 。</p><p><br></p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：</p><p><br></p><p>- `I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。</p><p>- `X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 </p><p>- `C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。</p><p><br></p><p>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 3</p><p>输出: \"III\"</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: 4</p><p>输出: \"IV\"</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: 9</p><p>输出: \"IX\"</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入: 58</p><p>输出: \"LVIII\"</p><p>解释: L = 50, V = 5, III = 3.</p><p>```</p><p><br></p><p>**示例 5:**</p><p><br></p><p>```</p><p>输入: 1994</p><p>输出: \"MCMXCIV\"</p><p>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7f57\\u9a6c\\u6570\\u5b57\\u5305\\u542b\\u4ee5\\u4e0b\\u4e03\\u79cd\\u5b57\\u7b26\\uff1a `I`\\uff0c `V`\\uff0c `X`\\uff0c `L`\\uff0c`C`\\uff0c`D` \\u548c `M`\\u3002\\n\\n```\\n\\u5b57\\u7b26          \\u6570\\u503c\\nI                1\\nV               5\\nX              10\\nL               50\\nC              100\\nD              500\\nM             1000\\n```\\n\\n\\u4f8b\\u5982\\uff0c \\u7f57\\u9a6c\\u6570\\u5b57 2 \\u5199\\u505a `II` \\uff0c\\u5373\\u4e3a\\u4e24\\u4e2a\\u5e76\\u5217\\u7684 1\\u300212 \\u5199\\u505a `XII` \\uff0c\\u5373\\u4e3a `X` + `II` \\u3002 27 \\u5199\\u505a `XXVII`, \\u5373\\u4e3a `XX` + `V` + `II` \\u3002\\n\\n\\u901a\\u5e38\\u60c5\\u51b5\\u4e0b\\uff0c\\u7f57\\u9a6c\\u6570\\u5b57\\u4e2d\\u5c0f\\u7684\\u6570\\u5b57\\u5728\\u5927\\u7684\\u6570\\u5b57\\u7684\\u53f3\\u8fb9\\u3002\\u4f46\\u4e5f\\u5b58\\u5728\\u7279\\u4f8b\\uff0c\\u4f8b\\u5982 4 \\u4e0d\\u5199\\u505a `IIII`\\uff0c\\u800c\\u662f `IV`\\u3002\\u6570\\u5b57 1 \\u5728\\u6570\\u5b57 5 \\u7684\\u5de6\\u8fb9\\uff0c\\u6240\\u8868\\u793a\\u7684\\u6570\\u7b49\\u4e8e\\u5927\\u6570 5 \\u51cf\\u5c0f\\u6570 1 \\u5f97\\u5230\\u7684\\u6570\\u503c 4 \\u3002\\u540c\\u6837\\u5730\\uff0c\\u6570\\u5b57 9 \\u8868\\u793a\\u4e3a `IX`\\u3002\\u8fd9\\u4e2a\\u7279\\u6b8a\\u7684\\u89c4\\u5219\\u53ea\\u9002\\u7528\\u4e8e\\u4ee5\\u4e0b\\u516d\\u79cd\\u60c5\\u51b5\\uff1a\\n\\n- `I` \\u53ef\\u4ee5\\u653e\\u5728 `V` (5) \\u548c `X` (10) \\u7684\\u5de6\\u8fb9\\uff0c\\u6765\\u8868\\u793a 4 \\u548c 9\\u3002\\n- `X` \\u53ef\\u4ee5\\u653e\\u5728 `L` (50) \\u548c `C` (100) \\u7684\\u5de6\\u8fb9\\uff0c\\u6765\\u8868\\u793a 40 \\u548c 90\\u3002 \\n- `C` \\u53ef\\u4ee5\\u653e\\u5728 `D` (500) \\u548c `M` (1000) \\u7684\\u5de6\\u8fb9\\uff0c\\u6765\\u8868\\u793a 400 \\u548c 900\\u3002\\n\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6574\\u6570\\uff0c\\u5c06\\u5176\\u8f6c\\u4e3a\\u7f57\\u9a6c\\u6570\\u5b57\\u3002\\u8f93\\u5165\\u786e\\u4fdd\\u5728 1 \\u5230 3999 \\u7684\\u8303\\u56f4\\u5185\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 3\\n\\u8f93\\u51fa: \\\"III\\\"\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 4\\n\\u8f93\\u51fa: \\\"IV\\\"\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: 9\\n\\u8f93\\u51fa: \\\"IX\\\"\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165: 58\\n\\u8f93\\u51fa: \\\"LVIII\\\"\\n\\u89e3\\u91ca: L = 50, V = 5, III = 3.\\n```\\n\\n**\\u793a\\u4f8b 5:**\\n\\n```\\n\\u8f93\\u5165: 1994\\n\\u8f93\\u51fa: \\\"MCMXCIV\\\"\\n\\u89e3\\u91ca: M = 1000, CM = 900, XC = 90, IV = 4.\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:54:26'),(90,'11. 盛最多水的容器','\n给你 *n* 个非负整数 *a*1，*a*2，...，*a*n，每个数代表坐标中的一个点 (*i*, *ai*) 。在坐标内画 *n* 条垂直线，垂直线 *i* 的两个端点分别为 (*i*, *ai*) 和 (*i*, 0)。找出其中的两条线，使得它们与 *x* 轴共同构成的容器可以容纳最多的水。\n\n**说明：**你不能倾斜容器，且 *n* 的值至少为 2。\n\n \n\n![img](https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg)\n\n图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n\n \n\n**示例：**\n\n```\n输入：[1,8,6,2,5,4,8,3,7]\n输出：49\n```\n\n\n','<p><br></p><p>给你 *n* 个非负整数 *a*1，*a*2，...，*a*n，每个数代表坐标中的一个点 (*i*, *ai*) 。在坐标内画 *n* 条垂直线，垂直线 *i* 的两个端点分别为 (*i*, *ai*) 和 (*i*, 0)。找出其中的两条线，使得它们与 *x* 轴共同构成的容器可以容纳最多的水。</p><p><br></p><p>**说明：**你不能倾斜容器，且 *n* 的值至少为 2。</p><p><br></p><p> </p><p><br></p><p>![img](https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg)</p><p><br></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p><br></p><p> </p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>输入：[1,8,6,2,5,4,8,3,7]</p><p>输出：49</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u4f60 *n* \\u4e2a\\u975e\\u8d1f\\u6574\\u6570 *a*1\\uff0c*a*2\\uff0c...\\uff0c*a*n\\uff0c\\u6bcf\\u4e2a\\u6570\\u4ee3\\u8868\\u5750\\u6807\\u4e2d\\u7684\\u4e00\\u4e2a\\u70b9 (*i*, *ai*) \\u3002\\u5728\\u5750\\u6807\\u5185\\u753b *n* \\u6761\\u5782\\u76f4\\u7ebf\\uff0c\\u5782\\u76f4\\u7ebf *i* \\u7684\\u4e24\\u4e2a\\u7aef\\u70b9\\u5206\\u522b\\u4e3a (*i*, *ai*) \\u548c (*i*, 0)\\u3002\\u627e\\u51fa\\u5176\\u4e2d\\u7684\\u4e24\\u6761\\u7ebf\\uff0c\\u4f7f\\u5f97\\u5b83\\u4eec\\u4e0e *x* \\u8f74\\u5171\\u540c\\u6784\\u6210\\u7684\\u5bb9\\u5668\\u53ef\\u4ee5\\u5bb9\\u7eb3\\u6700\\u591a\\u7684\\u6c34\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\u4f60\\u4e0d\\u80fd\\u503e\\u659c\\u5bb9\\u5668\\uff0c\\u4e14 *n* \\u7684\\u503c\\u81f3\\u5c11\\u4e3a 2\\u3002\\n\\n \\n\\n![img](https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg)\\n\\n\\u56fe\\u4e2d\\u5782\\u76f4\\u7ebf\\u4ee3\\u8868\\u8f93\\u5165\\u6570\\u7ec4 [1,8,6,2,5,4,8,3,7]\\u3002\\u5728\\u6b64\\u60c5\\u51b5\\u4e0b\\uff0c\\u5bb9\\u5668\\u80fd\\u591f\\u5bb9\\u7eb3\\u6c34\\uff08\\u8868\\u793a\\u4e3a\\u84dd\\u8272\\u90e8\\u5206\\uff09\\u7684\\u6700\\u5927\\u503c\\u4e3a 49\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a[1,8,6,2,5,4,8,3,7]\\n\\u8f93\\u51fa\\uff1a49\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:54:40'),(91,'10. 正则表达式匹配','\n给你一个字符串 `s` 和一个字符规律 `p`，请你来实现一个支持 `\'.\'` 和 `\'*\'` 的正则表达式匹配。\n\n```\n\'.\' 匹配任意单个字符\n\'*\' 匹配零个或多个前面的那一个元素\n```\n\n所谓匹配，是要涵盖 **整个** 字符串 `s`的，而不是部分字符串。\n\n**说明:**\n\n- `s` 可能为空，且只包含从 `a-z` 的小写字母。\n- `p` 可能为空，且只包含从 `a-z` 的小写字母，以及字符 `.` 和 `*`。\n\n**示例 1:**\n\n```\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n**示例 2:**\n\n```\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 \'*\' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 \'a\'。因此，字符串 \"aa\" 可被视为 \'a\' 重复了一次。\n```\n\n**示例 3:**\n\n```\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（\'*\'）任意字符（\'.\'）。\n```\n\n**示例 4:**\n\n```\n输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: 因为 \'*\' 表示零个或多个，这里 \'c\' 为 0 个, \'a\' 被重复一次。因此可以匹配字符串 \"aab\"。\n```\n\n**示例 5:**\n\n```\n输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false\n```\n\n','<p><br></p><p>给你一个字符串 `s` 和一个字符规律 `p`，请你来实现一个支持 `\'.\'` 和 `\'*\'` 的正则表达式匹配。</p><p><br></p><p>```</p><p>\'.\' 匹配任意单个字符</p><p>\'*\' 匹配零个或多个前面的那一个元素</p><p>```</p><p><br></p><p>所谓匹配，是要涵盖 **整个** 字符串 `s`的，而不是部分字符串。</p><p><br></p><p>**说明:**</p><p><br></p><p>- `s` 可能为空，且只包含从 `a-z` 的小写字母。</p><p>- `p` 可能为空，且只包含从 `a-z` 的小写字母，以及字符 `.` 和 `*`。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"aa\"</p><p>p = \"a\"</p><p>输出: false</p><p>解释: \"a\" 无法匹配 \"aa\" 整个字符串。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"aa\"</p><p>p = \"a*\"</p><p>输出: true</p><p>解释: 因为 \'*\' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 \'a\'。因此，字符串 \"aa\" 可被视为 \'a\' 重复了一次。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"ab\"</p><p>p = \".*\"</p><p>输出: true</p><p>解释: \".*\" 表示可匹配零个或多个（\'*\'）任意字符（\'.\'）。</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"aab\"</p><p>p = \"c*a*b\"</p><p>输出: true</p><p>解释: 因为 \'*\' 表示零个或多个，这里 \'c\' 为 0 个, \'a\' 被重复一次。因此可以匹配字符串 \"aab\"。</p><p>```</p><p><br></p><p>**示例 5:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"mississippi\"</p><p>p = \"mis*is*p*.\"</p><p>输出: false</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u4f60\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32 `s` \\u548c\\u4e00\\u4e2a\\u5b57\\u7b26\\u89c4\\u5f8b `p`\\uff0c\\u8bf7\\u4f60\\u6765\\u5b9e\\u73b0\\u4e00\\u4e2a\\u652f\\u6301 `\'.\'` \\u548c `\'*\'` \\u7684\\u6b63\\u5219\\u8868\\u8fbe\\u5f0f\\u5339\\u914d\\u3002\\n\\n```\\n\'.\' \\u5339\\u914d\\u4efb\\u610f\\u5355\\u4e2a\\u5b57\\u7b26\\n\'*\' \\u5339\\u914d\\u96f6\\u4e2a\\u6216\\u591a\\u4e2a\\u524d\\u9762\\u7684\\u90a3\\u4e00\\u4e2a\\u5143\\u7d20\\n```\\n\\n\\u6240\\u8c13\\u5339\\u914d\\uff0c\\u662f\\u8981\\u6db5\\u76d6 **\\u6574\\u4e2a** \\u5b57\\u7b26\\u4e32 `s`\\u7684\\uff0c\\u800c\\u4e0d\\u662f\\u90e8\\u5206\\u5b57\\u7b26\\u4e32\\u3002\\n\\n**\\u8bf4\\u660e:**\\n\\n- `s` \\u53ef\\u80fd\\u4e3a\\u7a7a\\uff0c\\u4e14\\u53ea\\u5305\\u542b\\u4ece `a-z` \\u7684\\u5c0f\\u5199\\u5b57\\u6bcd\\u3002\\n- `p` \\u53ef\\u80fd\\u4e3a\\u7a7a\\uff0c\\u4e14\\u53ea\\u5305\\u542b\\u4ece `a-z` \\u7684\\u5c0f\\u5199\\u5b57\\u6bcd\\uff0c\\u4ee5\\u53ca\\u5b57\\u7b26 `.` \\u548c `*`\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"aa\\\"\\np = \\\"a\\\"\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \\\"a\\\" \\u65e0\\u6cd5\\u5339\\u914d \\\"aa\\\" \\u6574\\u4e2a\\u5b57\\u7b26\\u4e32\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"aa\\\"\\np = \\\"a*\\\"\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \\u56e0\\u4e3a \'*\' \\u4ee3\\u8868\\u53ef\\u4ee5\\u5339\\u914d\\u96f6\\u4e2a\\u6216\\u591a\\u4e2a\\u524d\\u9762\\u7684\\u90a3\\u4e00\\u4e2a\\u5143\\u7d20, \\u5728\\u8fd9\\u91cc\\u524d\\u9762\\u7684\\u5143\\u7d20\\u5c31\\u662f \'a\'\\u3002\\u56e0\\u6b64\\uff0c\\u5b57\\u7b26\\u4e32 \\\"aa\\\" \\u53ef\\u88ab\\u89c6\\u4e3a \'a\' \\u91cd\\u590d\\u4e86\\u4e00\\u6b21\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"ab\\\"\\np = \\\".*\\\"\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \\\".*\\\" \\u8868\\u793a\\u53ef\\u5339\\u914d\\u96f6\\u4e2a\\u6216\\u591a\\u4e2a\\uff08\'*\'\\uff09\\u4efb\\u610f\\u5b57\\u7b26\\uff08\'.\'\\uff09\\u3002\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"aab\\\"\\np = \\\"c*a*b\\\"\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \\u56e0\\u4e3a \'*\' \\u8868\\u793a\\u96f6\\u4e2a\\u6216\\u591a\\u4e2a\\uff0c\\u8fd9\\u91cc \'c\' \\u4e3a 0 \\u4e2a, \'a\' \\u88ab\\u91cd\\u590d\\u4e00\\u6b21\\u3002\\u56e0\\u6b64\\u53ef\\u4ee5\\u5339\\u914d\\u5b57\\u7b26\\u4e32 \\\"aab\\\"\\u3002\\n```\\n\\n**\\u793a\\u4f8b 5:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"mississippi\\\"\\np = \\\"mis*is*p*.\\\"\\n\\u8f93\\u51fa: false\\n```\\n\\n\"}]}','red','2020-08-12 12:55:19'),(92,'9. 回文数','\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n**示例 1:**\n\n```\n输入: 121\n输出: true\n```\n\n**示例 2:**\n\n```\n输入: -121\n输出: false\n解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n```\n\n**示例 3:**\n\n```\n输入: 10\n输出: false\n解释: 从右向左读, 为 01 。因此它不是一个回文数。\n```\n\n**进阶:**\n\n你能不将整数转为字符串来解决这个问题吗？\n\n\n','<p><br></p><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 121</p><p>输出: true</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: -121</p><p>输出: false</p><p>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: 10</p><p>输出: false</p><p>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p><p>```</p><p><br></p><p>**进阶:**</p><p><br></p><p>你能不将整数转为字符串来解决这个问题吗？</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5224\\u65ad\\u4e00\\u4e2a\\u6574\\u6570\\u662f\\u5426\\u662f\\u56de\\u6587\\u6570\\u3002\\u56de\\u6587\\u6570\\u662f\\u6307\\u6b63\\u5e8f\\uff08\\u4ece\\u5de6\\u5411\\u53f3\\uff09\\u548c\\u5012\\u5e8f\\uff08\\u4ece\\u53f3\\u5411\\u5de6\\uff09\\u8bfb\\u90fd\\u662f\\u4e00\\u6837\\u7684\\u6574\\u6570\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 121\\n\\u8f93\\u51fa: true\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: -121\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \\u4ece\\u5de6\\u5411\\u53f3\\u8bfb, \\u4e3a -121 \\u3002 \\u4ece\\u53f3\\u5411\\u5de6\\u8bfb, \\u4e3a 121- \\u3002\\u56e0\\u6b64\\u5b83\\u4e0d\\u662f\\u4e00\\u4e2a\\u56de\\u6587\\u6570\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: 10\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \\u4ece\\u53f3\\u5411\\u5de6\\u8bfb, \\u4e3a 01 \\u3002\\u56e0\\u6b64\\u5b83\\u4e0d\\u662f\\u4e00\\u4e2a\\u56de\\u6587\\u6570\\u3002\\n```\\n\\n**\\u8fdb\\u9636:**\\n\\n\\u4f60\\u80fd\\u4e0d\\u5c06\\u6574\\u6570\\u8f6c\\u4e3a\\u5b57\\u7b26\\u4e32\\u6765\\u89e3\\u51b3\\u8fd9\\u4e2a\\u95ee\\u9898\\u5417\\uff1f\\n\\n\\n\"}]}','green','2020-08-12 12:55:35'),(93,'8. 字符串转换整数 (atoi)','\n请你来实现一个 `atoi` 函数，使其能将字符串转换成整数。\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：\n\n- 如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。\n- 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。\n- 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0 。\n\n**提示：**\n\n- 本题中的空白字符只包括空格字符 `\' \'` 。\n- 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n \n\n**示例 1:**\n\n```\n输入: \"42\"\n输出: 42\n```\n\n**示例 2:**\n\n```\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 \'-\', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n```\n\n**示例 3:**\n\n```\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 \'3\' ，因为它的下一个字符不为数字。\n```\n\n**示例 4:**\n\n```\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 \'w\', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n```\n\n**示例 5:**\n\n```\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n```\n\n\n','<p><br></p><p>请你来实现一个 `atoi` 函数，使其能将字符串转换成整数。</p><p><br></p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p><p><br></p><p>- 如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</p><p>- 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</p><p>- 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</p><p><br></p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p><p><br></p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p><p><br></p><p>**提示：**</p><p><br></p><p>- 本题中的空白字符只包括空格字符 `\' \'` 。</p><p>- 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: \"42\"</p><p>输出: 42</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: \"   -42\"</p><p>输出: -42</p><p>解释: 第一个非空白字符为 \'-\', 它是一个负号。</p><p>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: \"4193 with words\"</p><p>输出: 4193</p><p>解释: 转换截止于数字 \'3\' ，因为它的下一个字符不为数字。</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入: \"words and 987\"</p><p>输出: 0</p><p>解释: 第一个非空字符是 \'w\', 但它不是数字或正、负号。</p><p>     因此无法执行有效的转换。</p><p>```</p><p><br></p><p>**示例 5:**</p><p><br></p><p>```</p><p>输入: \"-91283472332\"</p><p>输出: -2147483648</p><p>解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 </p><p>     因此返回 INT_MIN (−231) 。</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u4f60\\u6765\\u5b9e\\u73b0\\u4e00\\u4e2a `atoi` \\u51fd\\u6570\\uff0c\\u4f7f\\u5176\\u80fd\\u5c06\\u5b57\\u7b26\\u4e32\\u8f6c\\u6362\\u6210\\u6574\\u6570\\u3002\\n\\n\\u9996\\u5148\\uff0c\\u8be5\\u51fd\\u6570\\u4f1a\\u6839\\u636e\\u9700\\u8981\\u4e22\\u5f03\\u65e0\\u7528\\u7684\\u5f00\\u5934\\u7a7a\\u683c\\u5b57\\u7b26\\uff0c\\u76f4\\u5230\\u5bfb\\u627e\\u5230\\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u683c\\u7684\\u5b57\\u7b26\\u4e3a\\u6b62\\u3002\\u63a5\\u4e0b\\u6765\\u7684\\u8f6c\\u5316\\u89c4\\u5219\\u5982\\u4e0b\\uff1a\\n\\n- \\u5982\\u679c\\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u5b57\\u7b26\\u4e3a\\u6b63\\u6216\\u8005\\u8d1f\\u53f7\\u65f6\\uff0c\\u5219\\u5c06\\u8be5\\u7b26\\u53f7\\u4e0e\\u4e4b\\u540e\\u9762\\u5c3d\\u53ef\\u80fd\\u591a\\u7684\\u8fde\\u7eed\\u6570\\u5b57\\u5b57\\u7b26\\u7ec4\\u5408\\u8d77\\u6765\\uff0c\\u5f62\\u6210\\u4e00\\u4e2a\\u6709\\u7b26\\u53f7\\u6574\\u6570\\u3002\\n- \\u5047\\u5982\\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u5b57\\u7b26\\u662f\\u6570\\u5b57\\uff0c\\u5219\\u76f4\\u63a5\\u5c06\\u5176\\u4e0e\\u4e4b\\u540e\\u8fde\\u7eed\\u7684\\u6570\\u5b57\\u5b57\\u7b26\\u7ec4\\u5408\\u8d77\\u6765\\uff0c\\u5f62\\u6210\\u4e00\\u4e2a\\u6574\\u6570\\u3002\\n- \\u8be5\\u5b57\\u7b26\\u4e32\\u5728\\u6709\\u6548\\u7684\\u6574\\u6570\\u90e8\\u5206\\u4e4b\\u540e\\u4e5f\\u53ef\\u80fd\\u4f1a\\u5b58\\u5728\\u591a\\u4f59\\u7684\\u5b57\\u7b26\\uff0c\\u90a3\\u4e48\\u8fd9\\u4e9b\\u5b57\\u7b26\\u53ef\\u4ee5\\u88ab\\u5ffd\\u7565\\uff0c\\u5b83\\u4eec\\u5bf9\\u51fd\\u6570\\u4e0d\\u5e94\\u8be5\\u9020\\u6210\\u5f71\\u54cd\\u3002\\n\\n\\u6ce8\\u610f\\uff1a\\u5047\\u5982\\u8be5\\u5b57\\u7b26\\u4e32\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u683c\\u5b57\\u7b26\\u4e0d\\u662f\\u4e00\\u4e2a\\u6709\\u6548\\u6574\\u6570\\u5b57\\u7b26\\u3001\\u5b57\\u7b26\\u4e32\\u4e3a\\u7a7a\\u6216\\u5b57\\u7b26\\u4e32\\u4ec5\\u5305\\u542b\\u7a7a\\u767d\\u5b57\\u7b26\\u65f6\\uff0c\\u5219\\u4f60\\u7684\\u51fd\\u6570\\u4e0d\\u9700\\u8981\\u8fdb\\u884c\\u8f6c\\u6362\\uff0c\\u5373\\u65e0\\u6cd5\\u8fdb\\u884c\\u6709\\u6548\\u8f6c\\u6362\\u3002\\n\\n\\u5728\\u4efb\\u4f55\\u60c5\\u51b5\\u4e0b\\uff0c\\u82e5\\u51fd\\u6570\\u4e0d\\u80fd\\u8fdb\\u884c\\u6709\\u6548\\u7684\\u8f6c\\u6362\\u65f6\\uff0c\\u8bf7\\u8fd4\\u56de 0 \\u3002\\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- \\u672c\\u9898\\u4e2d\\u7684\\u7a7a\\u767d\\u5b57\\u7b26\\u53ea\\u5305\\u62ec\\u7a7a\\u683c\\u5b57\\u7b26 `\' \'` \\u3002\\n- \\u5047\\u8bbe\\u6211\\u4eec\\u7684\\u73af\\u5883\\u53ea\\u80fd\\u5b58\\u50a8 32 \\u4f4d\\u5927\\u5c0f\\u7684\\u6709\\u7b26\\u53f7\\u6574\\u6570\\uff0c\\u90a3\\u4e48\\u5176\\u6570\\u503c\\u8303\\u56f4\\u4e3a [\\u2212231, 231 \\u2212 1]\\u3002\\u5982\\u679c\\u6570\\u503c\\u8d85\\u8fc7\\u8fd9\\u4e2a\\u8303\\u56f4\\uff0c\\u8bf7\\u8fd4\\u56de  INT_MAX (231 \\u2212 1) \\u6216 INT_MIN (\\u2212231) \\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\\"42\\\"\\n\\u8f93\\u51fa: 42\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\\"   -42\\\"\\n\\u8f93\\u51fa: -42\\n\\u89e3\\u91ca: \\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u767d\\u5b57\\u7b26\\u4e3a \'-\', \\u5b83\\u662f\\u4e00\\u4e2a\\u8d1f\\u53f7\\u3002\\n     \\u6211\\u4eec\\u5c3d\\u53ef\\u80fd\\u5c06\\u8d1f\\u53f7\\u4e0e\\u540e\\u9762\\u6240\\u6709\\u8fde\\u7eed\\u51fa\\u73b0\\u7684\\u6570\\u5b57\\u7ec4\\u5408\\u8d77\\u6765\\uff0c\\u6700\\u540e\\u5f97\\u5230 -42 \\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: \\\"4193 with words\\\"\\n\\u8f93\\u51fa: 4193\\n\\u89e3\\u91ca: \\u8f6c\\u6362\\u622a\\u6b62\\u4e8e\\u6570\\u5b57 \'3\' \\uff0c\\u56e0\\u4e3a\\u5b83\\u7684\\u4e0b\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e0d\\u4e3a\\u6570\\u5b57\\u3002\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165: \\\"words and 987\\\"\\n\\u8f93\\u51fa: 0\\n\\u89e3\\u91ca: \\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u5b57\\u7b26\\u662f \'w\', \\u4f46\\u5b83\\u4e0d\\u662f\\u6570\\u5b57\\u6216\\u6b63\\u3001\\u8d1f\\u53f7\\u3002\\n     \\u56e0\\u6b64\\u65e0\\u6cd5\\u6267\\u884c\\u6709\\u6548\\u7684\\u8f6c\\u6362\\u3002\\n```\\n\\n**\\u793a\\u4f8b 5:**\\n\\n```\\n\\u8f93\\u5165: \\\"-91283472332\\\"\\n\\u8f93\\u51fa: -2147483648\\n\\u89e3\\u91ca: \\u6570\\u5b57 \\\"-91283472332\\\" \\u8d85\\u8fc7 32 \\u4f4d\\u6709\\u7b26\\u53f7\\u6574\\u6570\\u8303\\u56f4\\u3002 \\n     \\u56e0\\u6b64\\u8fd4\\u56de INT_MIN (\\u2212231) \\u3002\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:55:55'),(94,'7. 整数反转','\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n**示例 1:**\n\n```\n输入: 123\n输出: 321\n```\n\n **示例 2:**\n\n```\n输入: -123\n输出: -321\n```\n\n**示例 3:**\n\n```\n输入: 120\n输出: 21\n```\n\n**注意:**\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n','<p><br></p><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 123</p><p>输出: 321</p><p>```</p><p><br></p><p> **示例 2:**</p><p><br></p><p>```</p><p>输入: -123</p><p>输出: -321</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: 120</p><p>输出: 21</p><p>```</p><p><br></p><p>**注意:**</p><p><br></p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u51fa\\u4e00\\u4e2a 32 \\u4f4d\\u7684\\u6709\\u7b26\\u53f7\\u6574\\u6570\\uff0c\\u4f60\\u9700\\u8981\\u5c06\\u8fd9\\u4e2a\\u6574\\u6570\\u4e2d\\u6bcf\\u4f4d\\u4e0a\\u7684\\u6570\\u5b57\\u8fdb\\u884c\\u53cd\\u8f6c\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 123\\n\\u8f93\\u51fa: 321\\n```\\n\\n **\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: -123\\n\\u8f93\\u51fa: -321\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: 120\\n\\u8f93\\u51fa: 21\\n```\\n\\n**\\u6ce8\\u610f:**\\n\\n\\u5047\\u8bbe\\u6211\\u4eec\\u7684\\u73af\\u5883\\u53ea\\u80fd\\u5b58\\u50a8\\u5f97\\u4e0b 32 \\u4f4d\\u7684\\u6709\\u7b26\\u53f7\\u6574\\u6570\\uff0c\\u5219\\u5176\\u6570\\u503c\\u8303\\u56f4\\u4e3a [\\u2212231, 231 \\u2212 1]\\u3002\\u8bf7\\u6839\\u636e\\u8fd9\\u4e2a\\u5047\\u8bbe\\uff0c\\u5982\\u679c\\u53cd\\u8f6c\\u540e\\u6574\\u6570\\u6ea2\\u51fa\\u90a3\\u4e48\\u5c31\\u8fd4\\u56de 0\\u3002\\n\\n\"}]}','green','2020-08-12 12:56:14'),(95,'6. Z 字形变换','\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 `\"LEETCODEISHIRING\"` 行数为 3 时，排列如下：\n\n```\nL        C       I       R\nE  T   O  E  S   I   I    G\nE       D       H      N\n```\n\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：`\"LCIRETOESIIGEDHN\"`。\n\n请你实现这个将字符串进行指定行数变换的函数：\n\n```\nstring convert(string s, int numRows);\n```\n\n**示例 1:**\n\n```\n输入: s = \"LEETCODEISHIRING\", numRows = 3\n输出: \"LCIRETOESIIGEDHN\"\n```\n\n**示例 2:**\n\n```\n输入: s = \"LEETCODEISHIRING\", numRows = 4\n输出: \"LDREOEIIECIHNTSG\"\n解释:\n\nL       D       R\nE   O E    I   I\nE C   I   H    N\nT       S       G\n```\n\n',NULL,'{\"ops\": [{\"insert\": \"\\n\\u5c06\\u4e00\\u4e2a\\u7ed9\\u5b9a\\u5b57\\u7b26\\u4e32\\u6839\\u636e\\u7ed9\\u5b9a\\u7684\\u884c\\u6570\\uff0c\\u4ee5\\u4ece\\u4e0a\\u5f80\\u4e0b\\u3001\\u4ece\\u5de6\\u5230\\u53f3\\u8fdb\\u884c Z \\u5b57\\u5f62\\u6392\\u5217\\u3002\\n\\n\\u6bd4\\u5982\\u8f93\\u5165\\u5b57\\u7b26\\u4e32\\u4e3a `\\\"LEETCODEISHIRING\\\"` \\u884c\\u6570\\u4e3a 3 \\u65f6\\uff0c\\u6392\\u5217\\u5982\\u4e0b\\uff1a\\n\\n```\\nL        C       I       R\\nE  T   O  E  S   I   I    G\\nE       D       H      N\\n```\\n\\n\\u4e4b\\u540e\\uff0c\\u4f60\\u7684\\u8f93\\u51fa\\u9700\\u8981\\u4ece\\u5de6\\u5f80\\u53f3\\u9010\\u884c\\u8bfb\\u53d6\\uff0c\\u4ea7\\u751f\\u51fa\\u4e00\\u4e2a\\u65b0\\u7684\\u5b57\\u7b26\\u4e32\\uff0c\\u6bd4\\u5982\\uff1a`\\\"LCIRETOESIIGEDHN\\\"`\\u3002\\n\\n\\u8bf7\\u4f60\\u5b9e\\u73b0\\u8fd9\\u4e2a\\u5c06\\u5b57\\u7b26\\u4e32\\u8fdb\\u884c\\u6307\\u5b9a\\u884c\\u6570\\u53d8\\u6362\\u7684\\u51fd\\u6570\\uff1a\\n\\n```\\nstring convert(string s, int numRows);\\n```\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: s = \\\"LEETCODEISHIRING\\\", numRows = 3\\n\\u8f93\\u51fa: \\\"LCIRETOESIIGEDHN\\\"\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: s = \\\"LEETCODEISHIRING\\\", numRows = 4\\n\\u8f93\\u51fa: \\\"LDREOEIIECIHNTSG\\\"\\n\\u89e3\\u91ca:\\n\\nL       D       R\\nE   O E    I   I\\nE C   I   H    N\\nT       S       G\\n```\\n\\n\"}]}','yellow','2020-08-12 12:58:18'),(96,'5. 最长回文子串','\n给定一个字符串 `s`，找到 `s` 中最长的回文子串。你可以假设 `s` 的最大长度为 1000。\n\n**示例 1：**\n\n```\n输入: \"babad\"\n输出: \"bab\"\n注意: \"aba\" 也是一个有效答案。\n```\n\n**示例 2：**\n\n```\n输入: \"cbbd\"\n输出: \"bb\"\n```\n\n\n','<p><br></p><p>给定一个字符串 `s`，找到 `s` 中最长的回文子串。你可以假设 `s` 的最大长度为 1000。</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: \"babad\"</p><p>输出: \"bab\"</p><p>注意: \"aba\" 也是一个有效答案。</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入: \"cbbd\"</p><p>输出: \"bb\"</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32 `s`\\uff0c\\u627e\\u5230 `s` \\u4e2d\\u6700\\u957f\\u7684\\u56de\\u6587\\u5b50\\u4e32\\u3002\\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe `s` \\u7684\\u6700\\u5927\\u957f\\u5ea6\\u4e3a 1000\\u3002\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: \\\"babad\\\"\\n\\u8f93\\u51fa: \\\"bab\\\"\\n\\u6ce8\\u610f: \\\"aba\\\" \\u4e5f\\u662f\\u4e00\\u4e2a\\u6709\\u6548\\u7b54\\u6848\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165: \\\"cbbd\\\"\\n\\u8f93\\u51fa: \\\"bb\\\"\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:58:31'),(97,'4. 寻找两个正序数组的中位数','\n给定两个大小为 m 和 n 的正序（从小到大）数组 `nums1` 和 `nums2`。\n\n请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。\n\n你可以假设 `nums1` 和 `nums2` 不会同时为空。\n\n \n\n**示例 1:**\n\n```\nnums1 = [1, 3]\nnums2 = [2]\n\n则中位数是 2.0\n```\n\n**示例 2:**\n\n```\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n则中位数是 (2 + 3)/2 = 2.5\n```\n\n','<p><br></p><p>给定两个大小为 m 和 n 的正序（从小到大）数组 `nums1` 和 `nums2`。</p><p><br></p><p>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p><br></p><p>你可以假设 `nums1` 和 `nums2` 不会同时为空。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>nums1 = [1, 3]</p><p>nums2 = [2]</p><p><br></p><p>则中位数是 2.0</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>nums1 = [1, 2]</p><p>nums2 = [3, 4]</p><p><br></p><p>则中位数是 (2 + 3)/2 = 2.5</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e24\\u4e2a\\u5927\\u5c0f\\u4e3a m \\u548c n \\u7684\\u6b63\\u5e8f\\uff08\\u4ece\\u5c0f\\u5230\\u5927\\uff09\\u6570\\u7ec4 `nums1` \\u548c `nums2`\\u3002\\n\\n\\u8bf7\\u4f60\\u627e\\u51fa\\u8fd9\\u4e24\\u4e2a\\u6b63\\u5e8f\\u6570\\u7ec4\\u7684\\u4e2d\\u4f4d\\u6570\\uff0c\\u5e76\\u4e14\\u8981\\u6c42\\u7b97\\u6cd5\\u7684\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3a O(log(m + n))\\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe `nums1` \\u548c `nums2` \\u4e0d\\u4f1a\\u540c\\u65f6\\u4e3a\\u7a7a\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\nnums1 = [1, 3]\\nnums2 = [2]\\n\\n\\u5219\\u4e2d\\u4f4d\\u6570\\u662f 2.0\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\nnums1 = [1, 2]\\nnums2 = [3, 4]\\n\\n\\u5219\\u4e2d\\u4f4d\\u6570\\u662f (2 + 3)/2 = 2.5\\n```\\n\\n\"}]}','red','2020-08-12 12:58:42'),(98,'3. 无重复字符的最长子串','给定一个字符串，请你找出其中不含有重复字符的 **最长子串** 的长度。\n\n**示例 1:**\n\n```\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n**示例 2:**\n\n```\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n**示例 3:**\n\n```\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n\n','<p>给定一个字符串，请你找出其中不含有重复字符的 **最长子串** 的长度。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: \"abcabcbb\"</p><p>输出: 3 </p><p>解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: \"bbbbb\"</p><p>输出: 1</p><p>解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: \"pwwkew\"</p><p>输出: 3</p><p>解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。</p><p>     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\uff0c\\u8bf7\\u4f60\\u627e\\u51fa\\u5176\\u4e2d\\u4e0d\\u542b\\u6709\\u91cd\\u590d\\u5b57\\u7b26\\u7684 **\\u6700\\u957f\\u5b50\\u4e32** \\u7684\\u957f\\u5ea6\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\\"abcabcbb\\\"\\n\\u8f93\\u51fa: 3 \\n\\u89e3\\u91ca: \\u56e0\\u4e3a\\u65e0\\u91cd\\u590d\\u5b57\\u7b26\\u7684\\u6700\\u957f\\u5b50\\u4e32\\u662f \\\"abc\\\"\\uff0c\\u6240\\u4ee5\\u5176\\u957f\\u5ea6\\u4e3a 3\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\\"bbbbb\\\"\\n\\u8f93\\u51fa: 1\\n\\u89e3\\u91ca: \\u56e0\\u4e3a\\u65e0\\u91cd\\u590d\\u5b57\\u7b26\\u7684\\u6700\\u957f\\u5b50\\u4e32\\u662f \\\"b\\\"\\uff0c\\u6240\\u4ee5\\u5176\\u957f\\u5ea6\\u4e3a 1\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: \\\"pwwkew\\\"\\n\\u8f93\\u51fa: 3\\n\\u89e3\\u91ca: \\u56e0\\u4e3a\\u65e0\\u91cd\\u590d\\u5b57\\u7b26\\u7684\\u6700\\u957f\\u5b50\\u4e32\\u662f \\\"wke\\\"\\uff0c\\u6240\\u4ee5\\u5176\\u957f\\u5ea6\\u4e3a 3\\u3002\\n     \\u8bf7\\u6ce8\\u610f\\uff0c\\u4f60\\u7684\\u7b54\\u6848\\u5fc5\\u987b\\u662f \\u5b50\\u4e32 \\u7684\\u957f\\u5ea6\\uff0c\\\"pwke\\\" \\u662f\\u4e00\\u4e2a\\u5b50\\u5e8f\\u5217\\uff0c\\u4e0d\\u662f\\u5b50\\u4e32\\u3002\\n```\\n\\n\\n\"}]}','yellow','2020-08-12 12:58:56'),(99,'2. 两数相加','给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n示例：\n\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n\n',NULL,'{\"ops\": [{\"insert\": \"\\u7ed9\\u51fa\\u4e24\\u4e2a \\u975e\\u7a7a \\u7684\\u94fe\\u8868\\u7528\\u6765\\u8868\\u793a\\u4e24\\u4e2a\\u975e\\u8d1f\\u7684\\u6574\\u6570\\u3002\\u5176\\u4e2d\\uff0c\\u5b83\\u4eec\\u5404\\u81ea\\u7684\\u4f4d\\u6570\\u662f\\u6309\\u7167 \\u9006\\u5e8f \\u7684\\u65b9\\u5f0f\\u5b58\\u50a8\\u7684\\uff0c\\u5e76\\u4e14\\u5b83\\u4eec\\u7684\\u6bcf\\u4e2a\\u8282\\u70b9\\u53ea\\u80fd\\u5b58\\u50a8 \\u4e00\\u4f4d \\u6570\\u5b57\\u3002\\n\\n\\u5982\\u679c\\uff0c\\u6211\\u4eec\\u5c06\\u8fd9\\u4e24\\u4e2a\\u6570\\u76f8\\u52a0\\u8d77\\u6765\\uff0c\\u5219\\u4f1a\\u8fd4\\u56de\\u4e00\\u4e2a\\u65b0\\u7684\\u94fe\\u8868\\u6765\\u8868\\u793a\\u5b83\\u4eec\\u7684\\u548c\\u3002\\n\\n\\u60a8\\u53ef\\u4ee5\\u5047\\u8bbe\\u9664\\u4e86\\u6570\\u5b57 0 \\u4e4b\\u5916\\uff0c\\u8fd9\\u4e24\\u4e2a\\u6570\\u90fd\\u4e0d\\u4f1a\\u4ee5 0 \\u5f00\\u5934\\u3002\\n\\n\\u793a\\u4f8b\\uff1a\\n\\n\\u8f93\\u5165\\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4)\\n\\u8f93\\u51fa\\uff1a7 -> 0 -> 8\\n\\u539f\\u56e0\\uff1a342 + 465 = 807\\n\\n\"}]}','yellow','2020-08-12 12:59:16'),(100,'1. 两数之和','给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n \n\n示例:\n\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n','<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p><br></p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p><br></p><p> </p><p><br></p><p>示例:</p><p><br></p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p><br></p><p>因为 nums[0] + nums[1] = 2 + 7 = 9</p><p>所以返回 [0, 1]</p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6574\\u6570\\u6570\\u7ec4 nums \\u548c\\u4e00\\u4e2a\\u76ee\\u6807\\u503c target\\uff0c\\u8bf7\\u4f60\\u5728\\u8be5\\u6570\\u7ec4\\u4e2d\\u627e\\u51fa\\u548c\\u4e3a\\u76ee\\u6807\\u503c\\u7684\\u90a3 \\u4e24\\u4e2a \\u6574\\u6570\\uff0c\\u5e76\\u8fd4\\u56de\\u4ed6\\u4eec\\u7684\\u6570\\u7ec4\\u4e0b\\u6807\\u3002\\n\\n\\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe\\u6bcf\\u79cd\\u8f93\\u5165\\u53ea\\u4f1a\\u5bf9\\u5e94\\u4e00\\u4e2a\\u7b54\\u6848\\u3002\\u4f46\\u662f\\uff0c\\u6570\\u7ec4\\u4e2d\\u540c\\u4e00\\u4e2a\\u5143\\u7d20\\u4e0d\\u80fd\\u4f7f\\u7528\\u4e24\\u904d\\u3002\\n\\n \\n\\n\\u793a\\u4f8b:\\n\\n\\u7ed9\\u5b9a nums = [2, 7, 11, 15], target = 9\\n\\n\\u56e0\\u4e3a nums[0] + nums[1] = 2 + 7 = 9\\n\\u6240\\u4ee5\\u8fd4\\u56de [0, 1]\\n\"}]}','green','2020-08-12 12:59:31'),(101,'剑指 Offer 67. 把字符串转换成整数','\n写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。\n\n \n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。\n\n当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。\n\n该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0。\n\n**说明：**\n\n假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n**示例 1:**\n\n```\n输入: \"42\"\n输出: 42\n```\n\n**示例 2:**\n\n```\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 \'-\', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n```\n\n**示例 3:**\n\n```\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 \'3\' ，因为它的下一个字符不为数字。\n```\n\n**示例 4:**\n\n```\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 \'w\', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n```\n\n**示例 5:**\n\n```\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n```\n\n','<p><br></p><p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p><p><br></p><p> </p><p><br></p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p><br></p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p><br></p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p><br></p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p><br></p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p><br></p><p>**说明：**</p><p><br></p><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: \"42\"</p><p>输出: 42</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: \"   -42\"</p><p>输出: -42</p><p>解释: 第一个非空白字符为 \'-\', 它是一个负号。</p><p>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: \"4193 with words\"</p><p>输出: 4193</p><p>解释: 转换截止于数字 \'3\' ，因为它的下一个字符不为数字。</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入: \"words and 987\"</p><p>输出: 0</p><p>解释: 第一个非空字符是 \'w\', 但它不是数字或正、负号。</p><p>     因此无法执行有效的转换。</p><p>```</p><p><br></p><p>**示例 5:**</p><p><br></p><p>```</p><p>输入: \"-91283472332\"</p><p>输出: -2147483648</p><p>解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 </p><p>     因此返回 INT_MIN (−231) 。</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5199\\u4e00\\u4e2a\\u51fd\\u6570 StrToInt\\uff0c\\u5b9e\\u73b0\\u628a\\u5b57\\u7b26\\u4e32\\u8f6c\\u6362\\u6210\\u6574\\u6570\\u8fd9\\u4e2a\\u529f\\u80fd\\u3002\\u4e0d\\u80fd\\u4f7f\\u7528 atoi \\u6216\\u8005\\u5176\\u4ed6\\u7c7b\\u4f3c\\u7684\\u5e93\\u51fd\\u6570\\u3002\\n\\n \\n\\n\\u9996\\u5148\\uff0c\\u8be5\\u51fd\\u6570\\u4f1a\\u6839\\u636e\\u9700\\u8981\\u4e22\\u5f03\\u65e0\\u7528\\u7684\\u5f00\\u5934\\u7a7a\\u683c\\u5b57\\u7b26\\uff0c\\u76f4\\u5230\\u5bfb\\u627e\\u5230\\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u683c\\u7684\\u5b57\\u7b26\\u4e3a\\u6b62\\u3002\\n\\n\\u5f53\\u6211\\u4eec\\u5bfb\\u627e\\u5230\\u7684\\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u5b57\\u7b26\\u4e3a\\u6b63\\u6216\\u8005\\u8d1f\\u53f7\\u65f6\\uff0c\\u5219\\u5c06\\u8be5\\u7b26\\u53f7\\u4e0e\\u4e4b\\u540e\\u9762\\u5c3d\\u53ef\\u80fd\\u591a\\u7684\\u8fde\\u7eed\\u6570\\u5b57\\u7ec4\\u5408\\u8d77\\u6765\\uff0c\\u4f5c\\u4e3a\\u8be5\\u6574\\u6570\\u7684\\u6b63\\u8d1f\\u53f7\\uff1b\\u5047\\u5982\\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u5b57\\u7b26\\u662f\\u6570\\u5b57\\uff0c\\u5219\\u76f4\\u63a5\\u5c06\\u5176\\u4e0e\\u4e4b\\u540e\\u8fde\\u7eed\\u7684\\u6570\\u5b57\\u5b57\\u7b26\\u7ec4\\u5408\\u8d77\\u6765\\uff0c\\u5f62\\u6210\\u6574\\u6570\\u3002\\n\\n\\u8be5\\u5b57\\u7b26\\u4e32\\u9664\\u4e86\\u6709\\u6548\\u7684\\u6574\\u6570\\u90e8\\u5206\\u4e4b\\u540e\\u4e5f\\u53ef\\u80fd\\u4f1a\\u5b58\\u5728\\u591a\\u4f59\\u7684\\u5b57\\u7b26\\uff0c\\u8fd9\\u4e9b\\u5b57\\u7b26\\u53ef\\u4ee5\\u88ab\\u5ffd\\u7565\\uff0c\\u5b83\\u4eec\\u5bf9\\u4e8e\\u51fd\\u6570\\u4e0d\\u5e94\\u8be5\\u9020\\u6210\\u5f71\\u54cd\\u3002\\n\\n\\u6ce8\\u610f\\uff1a\\u5047\\u5982\\u8be5\\u5b57\\u7b26\\u4e32\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u683c\\u5b57\\u7b26\\u4e0d\\u662f\\u4e00\\u4e2a\\u6709\\u6548\\u6574\\u6570\\u5b57\\u7b26\\u3001\\u5b57\\u7b26\\u4e32\\u4e3a\\u7a7a\\u6216\\u5b57\\u7b26\\u4e32\\u4ec5\\u5305\\u542b\\u7a7a\\u767d\\u5b57\\u7b26\\u65f6\\uff0c\\u5219\\u4f60\\u7684\\u51fd\\u6570\\u4e0d\\u9700\\u8981\\u8fdb\\u884c\\u8f6c\\u6362\\u3002\\n\\n\\u5728\\u4efb\\u4f55\\u60c5\\u51b5\\u4e0b\\uff0c\\u82e5\\u51fd\\u6570\\u4e0d\\u80fd\\u8fdb\\u884c\\u6709\\u6548\\u7684\\u8f6c\\u6362\\u65f6\\uff0c\\u8bf7\\u8fd4\\u56de 0\\u3002\\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n\\u5047\\u8bbe\\u6211\\u4eec\\u7684\\u73af\\u5883\\u53ea\\u80fd\\u5b58\\u50a8 32 \\u4f4d\\u5927\\u5c0f\\u7684\\u6709\\u7b26\\u53f7\\u6574\\u6570\\uff0c\\u90a3\\u4e48\\u5176\\u6570\\u503c\\u8303\\u56f4\\u4e3a [\\u2212231, 231 \\u2212 1]\\u3002\\u5982\\u679c\\u6570\\u503c\\u8d85\\u8fc7\\u8fd9\\u4e2a\\u8303\\u56f4\\uff0c\\u8bf7\\u8fd4\\u56de  INT_MAX (231 \\u2212 1) \\u6216 INT_MIN (\\u2212231) \\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\\"42\\\"\\n\\u8f93\\u51fa: 42\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\\"   -42\\\"\\n\\u8f93\\u51fa: -42\\n\\u89e3\\u91ca: \\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u767d\\u5b57\\u7b26\\u4e3a \'-\', \\u5b83\\u662f\\u4e00\\u4e2a\\u8d1f\\u53f7\\u3002\\n     \\u6211\\u4eec\\u5c3d\\u53ef\\u80fd\\u5c06\\u8d1f\\u53f7\\u4e0e\\u540e\\u9762\\u6240\\u6709\\u8fde\\u7eed\\u51fa\\u73b0\\u7684\\u6570\\u5b57\\u7ec4\\u5408\\u8d77\\u6765\\uff0c\\u6700\\u540e\\u5f97\\u5230 -42 \\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: \\\"4193 with words\\\"\\n\\u8f93\\u51fa: 4193\\n\\u89e3\\u91ca: \\u8f6c\\u6362\\u622a\\u6b62\\u4e8e\\u6570\\u5b57 \'3\' \\uff0c\\u56e0\\u4e3a\\u5b83\\u7684\\u4e0b\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e0d\\u4e3a\\u6570\\u5b57\\u3002\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165: \\\"words and 987\\\"\\n\\u8f93\\u51fa: 0\\n\\u89e3\\u91ca: \\u7b2c\\u4e00\\u4e2a\\u975e\\u7a7a\\u5b57\\u7b26\\u662f \'w\', \\u4f46\\u5b83\\u4e0d\\u662f\\u6570\\u5b57\\u6216\\u6b63\\u3001\\u8d1f\\u53f7\\u3002\\n     \\u56e0\\u6b64\\u65e0\\u6cd5\\u6267\\u884c\\u6709\\u6548\\u7684\\u8f6c\\u6362\\u3002\\n```\\n\\n**\\u793a\\u4f8b 5:**\\n\\n```\\n\\u8f93\\u5165: \\\"-91283472332\\\"\\n\\u8f93\\u51fa: -2147483648\\n\\u89e3\\u91ca: \\u6570\\u5b57 \\\"-91283472332\\\" \\u8d85\\u8fc7 32 \\u4f4d\\u6709\\u7b26\\u53f7\\u6574\\u6570\\u8303\\u56f4\\u3002 \\n     \\u56e0\\u6b64\\u8fd4\\u56de INT_MIN (\\u2212231) \\u3002\\n```\\n\\n\"}]}','yellow','2020-08-12 13:09:11'),(102,'剑指 Offer 66. 构建乘积数组','给定一个数组 `A[0,1,…,n-1]`，请构建一个数组 `B[0,1,…,n-1]`，其中 `B` 中的元素 `B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]`。不能使用除法。\n\n \n\n**示例:**\n\n```\n输入: [1,2,3,4,5]\n输出: [120,60,40,30,24]\n```\n\n \n\n**提示：**\n\n- 所有元素乘积之和不会溢出 32 位整数\n- `a.length <= 100000`\n\n','<p>给定一个数组 `A[0,1,…,n-1]`，请构建一个数组 `B[0,1,…,n-1]`，其中 `B` 中的元素 `B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]`。不能使用除法。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: [1,2,3,4,5]</p><p>输出: [120,60,40,30,24]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- 所有元素乘积之和不会溢出 32 位整数</p><p>- `a.length &lt;= 100000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6570\\u7ec4 `A[0,1,\\u2026,n-1]`\\uff0c\\u8bf7\\u6784\\u5efa\\u4e00\\u4e2a\\u6570\\u7ec4 `B[0,1,\\u2026,n-1]`\\uff0c\\u5176\\u4e2d `B` \\u4e2d\\u7684\\u5143\\u7d20 `B[i]=A[0]\\u00d7A[1]\\u00d7\\u2026\\u00d7A[i-1]\\u00d7A[i+1]\\u00d7\\u2026\\u00d7A[n-1]`\\u3002\\u4e0d\\u80fd\\u4f7f\\u7528\\u9664\\u6cd5\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: [1,2,3,4,5]\\n\\u8f93\\u51fa: [120,60,40,30,24]\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- \\u6240\\u6709\\u5143\\u7d20\\u4e58\\u79ef\\u4e4b\\u548c\\u4e0d\\u4f1a\\u6ea2\\u51fa 32 \\u4f4d\\u6574\\u6570\\n- `a.length <= 100000`\\n\\n\"}]}','green','2020-08-12 13:09:28'),(103,'剑指 Offer 65. 不用加减乘除做加法','\n写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。\n\n \n\n**示例:**\n\n```\n输入: a = 1, b = 1\n输出: 2\n```\n\n \n\n**提示：**\n\n- `a`, `b` 均可能是负数或 0\n- 结果不会溢出 32 位整数\n\n\n','<p><br></p><p>写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: a = 1, b = 1</p><p>输出: 2</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `a`, `b` 均可能是负数或 0</p><p>- 结果不会溢出 32 位整数</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5199\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u6c42\\u4e24\\u4e2a\\u6574\\u6570\\u4e4b\\u548c\\uff0c\\u8981\\u6c42\\u5728\\u51fd\\u6570\\u4f53\\u5185\\u4e0d\\u5f97\\u4f7f\\u7528 \\u201c+\\u201d\\u3001\\u201c-\\u201d\\u3001\\u201c*\\u201d\\u3001\\u201c/\\u201d \\u56db\\u5219\\u8fd0\\u7b97\\u7b26\\u53f7\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: a = 1, b = 1\\n\\u8f93\\u51fa: 2\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `a`, `b` \\u5747\\u53ef\\u80fd\\u662f\\u8d1f\\u6570\\u6216 0\\n- \\u7ed3\\u679c\\u4e0d\\u4f1a\\u6ea2\\u51fa 32 \\u4f4d\\u6574\\u6570\\n\\n\\n\"}]}','green','2020-08-12 13:09:43'),(104,'剑指 Offer 64. 求1+2+…+n','\n求 `1+2+...+n` ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n\n \n\n**示例 1：**\n\n```\n输入: n = 3\n输出: 6\n```\n\n**示例 2：**\n\n```\n输入: n = 9\n输出: 45\n```\n\n \n\n**限制：**\n\n- `1 <= n <= 10000`\n\n','<p><br></p><p>求 `1+2+...+n` ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: n = 3</p><p>输出: 6</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入: n = 9</p><p>输出: 45</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= n &lt;= 10000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u6c42 `1+2+...+n` \\uff0c\\u8981\\u6c42\\u4e0d\\u80fd\\u4f7f\\u7528\\u4e58\\u9664\\u6cd5\\u3001for\\u3001while\\u3001if\\u3001else\\u3001switch\\u3001case\\u7b49\\u5173\\u952e\\u5b57\\u53ca\\u6761\\u4ef6\\u5224\\u65ad\\u8bed\\u53e5\\uff08A?B:C\\uff09\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: n = 3\\n\\u8f93\\u51fa: 6\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165: n = 9\\n\\u8f93\\u51fa: 45\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= n <= 10000`\\n\\n\"}]}','yellow','2020-08-12 13:09:55'),(105,'剑指 Offer 63. 股票的最大利润','\n假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？\n\n \n\n**示例 1:**\n\n```\n输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n```\n\n**示例 2:**\n\n```\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n \n\n**限制：**\n\n```\n0 <= 数组长度 <= 10^5\n```\n','<p><br></p><p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [7,1,5,3,6,4]</p><p>输出: 5</p><p>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</p><p>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [7,6,4,3,1]</p><p>输出: 0</p><p>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 数组长度 &lt;= 10^5</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u5047\\u8bbe\\u628a\\u67d0\\u80a1\\u7968\\u7684\\u4ef7\\u683c\\u6309\\u7167\\u65f6\\u95f4\\u5148\\u540e\\u987a\\u5e8f\\u5b58\\u50a8\\u5728\\u6570\\u7ec4\\u4e2d\\uff0c\\u8bf7\\u95ee\\u4e70\\u5356\\u8be5\\u80a1\\u7968\\u4e00\\u6b21\\u53ef\\u80fd\\u83b7\\u5f97\\u7684\\u6700\\u5927\\u5229\\u6da6\\u662f\\u591a\\u5c11\\uff1f\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [7,1,5,3,6,4]\\n\\u8f93\\u51fa: 5\\n\\u89e3\\u91ca: \\u5728\\u7b2c 2 \\u5929\\uff08\\u80a1\\u7968\\u4ef7\\u683c = 1\\uff09\\u7684\\u65f6\\u5019\\u4e70\\u5165\\uff0c\\u5728\\u7b2c 5 \\u5929\\uff08\\u80a1\\u7968\\u4ef7\\u683c = 6\\uff09\\u7684\\u65f6\\u5019\\u5356\\u51fa\\uff0c\\u6700\\u5927\\u5229\\u6da6 = 6-1 = 5 \\u3002\\n     \\u6ce8\\u610f\\u5229\\u6da6\\u4e0d\\u80fd\\u662f 7-1 = 6, \\u56e0\\u4e3a\\u5356\\u51fa\\u4ef7\\u683c\\u9700\\u8981\\u5927\\u4e8e\\u4e70\\u5165\\u4ef7\\u683c\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [7,6,4,3,1]\\n\\u8f93\\u51fa: 0\\n\\u89e3\\u91ca: \\u5728\\u8fd9\\u79cd\\u60c5\\u51b5\\u4e0b, \\u6ca1\\u6709\\u4ea4\\u6613\\u5b8c\\u6210, \\u6240\\u4ee5\\u6700\\u5927\\u5229\\u6da6\\u4e3a 0\\u3002\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u6570\\u7ec4\\u957f\\u5ea6 <= 10^5\\n```\\n\"}]}','yellow','2020-08-12 13:10:13'),(106,'剑指 Offer 62. 圆圈中最后剩下的数字','\n0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n \n\n**示例 1：**\n\n```\n输入: n = 5, m = 3\n输出: 3\n```\n\n**示例 2：**\n\n```\n输入: n = 10, m = 17\n输出: 2\n```\n\n \n\n**限制：**\n\n- `1 <= n <= 10^5`\n- `1 <= m <= 10^6`\n\n','<p><br></p><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p><p><br></p><p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: n = 5, m = 3</p><p>输出: 3</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入: n = 10, m = 17</p><p>输出: 2</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= n &lt;= 10^5`</p><p>- `1 &lt;= m &lt;= 10^6`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n0,1,,n-1\\u8fd9n\\u4e2a\\u6570\\u5b57\\u6392\\u6210\\u4e00\\u4e2a\\u5706\\u5708\\uff0c\\u4ece\\u6570\\u5b570\\u5f00\\u59cb\\uff0c\\u6bcf\\u6b21\\u4ece\\u8fd9\\u4e2a\\u5706\\u5708\\u91cc\\u5220\\u9664\\u7b2cm\\u4e2a\\u6570\\u5b57\\u3002\\u6c42\\u51fa\\u8fd9\\u4e2a\\u5706\\u5708\\u91cc\\u5269\\u4e0b\\u7684\\u6700\\u540e\\u4e00\\u4e2a\\u6570\\u5b57\\u3002\\n\\n\\u4f8b\\u5982\\uff0c0\\u30011\\u30012\\u30013\\u30014\\u8fd95\\u4e2a\\u6570\\u5b57\\u7ec4\\u6210\\u4e00\\u4e2a\\u5706\\u5708\\uff0c\\u4ece\\u6570\\u5b570\\u5f00\\u59cb\\u6bcf\\u6b21\\u5220\\u9664\\u7b2c3\\u4e2a\\u6570\\u5b57\\uff0c\\u5219\\u5220\\u9664\\u7684\\u524d4\\u4e2a\\u6570\\u5b57\\u4f9d\\u6b21\\u662f2\\u30010\\u30014\\u30011\\uff0c\\u56e0\\u6b64\\u6700\\u540e\\u5269\\u4e0b\\u7684\\u6570\\u5b57\\u662f3\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: n = 5, m = 3\\n\\u8f93\\u51fa: 3\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165: n = 10, m = 17\\n\\u8f93\\u51fa: 2\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= n <= 10^5`\\n- `1 <= m <= 10^6`\\n\\n\"}]}','green','2020-08-12 13:10:29'),(107,'剑指 Offer 61. 扑克牌中的顺子','\n从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。\n\n \n\n**示例 1:**\n\n```\n输入: [1,2,3,4,5]\n输出: True\n```\n\n \n\n**示例 2:**\n\n```\n输入: [0,0,1,2,5]\n输出: True\n```\n\n \n\n**限制：**\n\n数组长度为 5 \n\n数组的数取值为 [0, 13] .\n\n','<p><br></p><p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [1,2,3,4,5]</p><p>输出: True</p><p>```</p><p><br></p><p> </p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [0,0,1,2,5]</p><p>输出: True</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>数组长度为 5 </p><p><br></p><p>数组的数取值为 [0, 13] .</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u4ece\\u6251\\u514b\\u724c\\u4e2d\\u968f\\u673a\\u62bd5\\u5f20\\u724c\\uff0c\\u5224\\u65ad\\u662f\\u4e0d\\u662f\\u4e00\\u4e2a\\u987a\\u5b50\\uff0c\\u5373\\u8fd95\\u5f20\\u724c\\u662f\\u4e0d\\u662f\\u8fde\\u7eed\\u7684\\u30022\\uff5e10\\u4e3a\\u6570\\u5b57\\u672c\\u8eab\\uff0cA\\u4e3a1\\uff0cJ\\u4e3a11\\uff0cQ\\u4e3a12\\uff0cK\\u4e3a13\\uff0c\\u800c\\u5927\\u3001\\u5c0f\\u738b\\u4e3a 0 \\uff0c\\u53ef\\u4ee5\\u770b\\u6210\\u4efb\\u610f\\u6570\\u5b57\\u3002A \\u4e0d\\u80fd\\u89c6\\u4e3a 14\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [1,2,3,4,5]\\n\\u8f93\\u51fa: True\\n```\\n\\n \\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [0,0,1,2,5]\\n\\u8f93\\u51fa: True\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n\\u6570\\u7ec4\\u957f\\u5ea6\\u4e3a 5 \\n\\n\\u6570\\u7ec4\\u7684\\u6570\\u53d6\\u503c\\u4e3a [0, 13] .\\n\\n\"}]}','green','2020-08-12 13:10:39'),(108,'剑指 Offer 60. n个骰子的点数','\n把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。\n\n \n\n你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。\n\n \n\n**示例 1:**\n\n```\n输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n```\n\n**示例 2:**\n\n```\n输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n```\n\n \n\n**限制：**\n\n```\n1 <= n <= 11\n```\n\n\n','<p><br></p><p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p><p><br></p><p> </p><p><br></p><p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 1</p><p>输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: 2</p><p>输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>1 &lt;= n &lt;= 11</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u628an\\u4e2a\\u9ab0\\u5b50\\u6254\\u5728\\u5730\\u4e0a\\uff0c\\u6240\\u6709\\u9ab0\\u5b50\\u671d\\u4e0a\\u4e00\\u9762\\u7684\\u70b9\\u6570\\u4e4b\\u548c\\u4e3as\\u3002\\u8f93\\u5165n\\uff0c\\u6253\\u5370\\u51fas\\u7684\\u6240\\u6709\\u53ef\\u80fd\\u7684\\u503c\\u51fa\\u73b0\\u7684\\u6982\\u7387\\u3002\\n\\n \\n\\n\\u4f60\\u9700\\u8981\\u7528\\u4e00\\u4e2a\\u6d6e\\u70b9\\u6570\\u6570\\u7ec4\\u8fd4\\u56de\\u7b54\\u6848\\uff0c\\u5176\\u4e2d\\u7b2c i \\u4e2a\\u5143\\u7d20\\u4ee3\\u8868\\u8fd9 n \\u4e2a\\u9ab0\\u5b50\\u6240\\u80fd\\u63b7\\u51fa\\u7684\\u70b9\\u6570\\u96c6\\u5408\\u4e2d\\u7b2c i \\u5c0f\\u7684\\u90a3\\u4e2a\\u7684\\u6982\\u7387\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 1\\n\\u8f93\\u51fa: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 2\\n\\u8f93\\u51fa: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n1 <= n <= 11\\n```\\n\\n\\n\"}]}','green','2020-08-12 13:10:53'),(109,'剑指 Offer 59 - II. 队列的最大值','\n请定义一个队列并实现函数 `max_value` 得到队列里的最大值，要求函数`max_value`、`push_back` 和 `pop_front` 的**均摊**时间复杂度都是O(1)。\n\n若队列为空，`pop_front` 和 `max_value` 需要返回 -1\n\n**示例 1：**\n\n```\n输入: \n[\"MaxQueue\",\"push_back\",\"push_back\",\"max_value\",\"pop_front\",\"max_value\"]\n[[],[1],[2],[],[],[]]\n输出: [null,null,null,2,1,2]\n```\n\n**示例 2：**\n\n```\n输入: \n[\"MaxQueue\",\"pop_front\",\"max_value\"]\n[[],[],[]]\n输出: [null,-1,-1]\n```\n\n \n\n**限制：**\n\n- `1 <= push_back,pop_front,max_value的总操作数 <= 10000`\n- `1 <= value <= 10^5`\n\n','<p><br></p><p>请定义一个队列并实现函数 `max_value` 得到队列里的最大值，要求函数`max_value`、`push_back` 和 `pop_front` 的**均摊**时间复杂度都是O(1)。</p><p><br></p><p>若队列为空，`pop_front` 和 `max_value` 需要返回 -1</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: </p><p>[\"MaxQueue\",\"push_back\",\"push_back\",\"max_value\",\"pop_front\",\"max_value\"]</p><p>[[],[1],[2],[],[],[]]</p><p>输出: [null,null,null,2,1,2]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入: </p><p>[\"MaxQueue\",\"pop_front\",\"max_value\"]</p><p>[[],[],[]]</p><p>输出: [null,-1,-1]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= push_back,pop_front,max_value的总操作数 &lt;= 10000`</p><p>- `1 &lt;= value &lt;= 10^5`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u5b9a\\u4e49\\u4e00\\u4e2a\\u961f\\u5217\\u5e76\\u5b9e\\u73b0\\u51fd\\u6570 `max_value` \\u5f97\\u5230\\u961f\\u5217\\u91cc\\u7684\\u6700\\u5927\\u503c\\uff0c\\u8981\\u6c42\\u51fd\\u6570`max_value`\\u3001`push_back` \\u548c `pop_front` \\u7684**\\u5747\\u644a**\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u90fd\\u662fO(1)\\u3002\\n\\n\\u82e5\\u961f\\u5217\\u4e3a\\u7a7a\\uff0c`pop_front` \\u548c `max_value` \\u9700\\u8981\\u8fd4\\u56de -1\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: \\n[\\\"MaxQueue\\\",\\\"push_back\\\",\\\"push_back\\\",\\\"max_value\\\",\\\"pop_front\\\",\\\"max_value\\\"]\\n[[],[1],[2],[],[],[]]\\n\\u8f93\\u51fa: [null,null,null,2,1,2]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165: \\n[\\\"MaxQueue\\\",\\\"pop_front\\\",\\\"max_value\\\"]\\n[[],[],[]]\\n\\u8f93\\u51fa: [null,-1,-1]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= push_back,pop_front,max_value\\u7684\\u603b\\u64cd\\u4f5c\\u6570 <= 10000`\\n- `1 <= value <= 10^5`\\n\\n\"}]}','green','2020-08-12 13:11:05'),(110,'[剑指 Offer 59 - I. 滑动窗口的最大值','\n给定一个数组 `nums` 和滑动窗口的大小 `k`，请找出所有滑动窗口里的最大值。\n\n**示例:**\n\n```\n输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n```\n\n \n\n**提示：**\n\n你可以假设 *k* 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。\n\n注意：本题与主站 239 题相同：https://leetcode-cn.com/problems/sliding-window-maximum/\n\n\n\n','<p><br></p><p>给定一个数组 `nums` 和滑动窗口的大小 `k`，请找出所有滑动窗口里的最大值。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3</p><p>输出: [3,3,5,5,6,7] </p><p>解释: </p><p><br></p><p>  滑动窗口的位置                最大值</p><p>---------------               -----</p><p>[1  3  -1] -3  5  3  6  7       3</p><p> 1 [3  -1  -3] 5  3  6  7       3</p><p> 1  3 [-1  -3  5] 3  6  7       5</p><p> 1  3  -1 [-3  5  3] 6  7       5</p><p> 1  3  -1  -3 [5  3  6] 7       6</p><p> 1  3  -1  -3  5 [3  6  7]      7</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>你可以假设 *k* 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p><p><br></p><p>注意：本题与主站 239 题相同：https://leetcode-cn.com/problems/sliding-window-maximum/</p><p><br></p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6570\\u7ec4 `nums` \\u548c\\u6ed1\\u52a8\\u7a97\\u53e3\\u7684\\u5927\\u5c0f `k`\\uff0c\\u8bf7\\u627e\\u51fa\\u6240\\u6709\\u6ed1\\u52a8\\u7a97\\u53e3\\u91cc\\u7684\\u6700\\u5927\\u503c\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: nums = [1,3,-1,-3,5,3,6,7], \\u548c k = 3\\n\\u8f93\\u51fa: [3,3,5,5,6,7] \\n\\u89e3\\u91ca: \\n\\n  \\u6ed1\\u52a8\\u7a97\\u53e3\\u7684\\u4f4d\\u7f6e                \\u6700\\u5927\\u503c\\n---------------               -----\\n[1  3  -1] -3  5  3  6  7       3\\n 1 [3  -1  -3] 5  3  6  7       3\\n 1  3 [-1  -3  5] 3  6  7       5\\n 1  3  -1 [-3  5  3] 6  7       5\\n 1  3  -1  -3 [5  3  6] 7       6\\n 1  3  -1  -3  5 [3  6  7]      7\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n\\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe *k* \\u603b\\u662f\\u6709\\u6548\\u7684\\uff0c\\u5728\\u8f93\\u5165\\u6570\\u7ec4\\u4e0d\\u4e3a\\u7a7a\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c1 \\u2264 k \\u2264 \\u8f93\\u5165\\u6570\\u7ec4\\u7684\\u5927\\u5c0f\\u3002\\n\\n\\u6ce8\\u610f\\uff1a\\u672c\\u9898\\u4e0e\\u4e3b\\u7ad9 239 \\u9898\\u76f8\\u540c\\uff1ahttps://leetcode-cn.com/problems/sliding-window-maximum/\\n\\n\\n\\n\"}]}','green','2020-08-12 13:11:18'),(111,'剑指 Offer 58 - II. 左旋转字符串','\n字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串\"abcdefg\"和数字2，该函数将返回左旋转两位得到的结果\"cdefgab\"。\n\n \n\n**示例 1：**\n\n```\n输入: s = \"abcdefg\", k = 2\n输出: \"cdefgab\"\n```\n\n**示例 2：**\n\n```\n输入: s = \"lrloseumgh\", k = 6\n输出: \"umghlrlose\"\n```\n\n \n\n**限制：**\n\n- `1 <= k < s.length <= 10000`\n\n\n','<p><br></p><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串\"abcdefg\"和数字2，该函数将返回左旋转两位得到的结果\"cdefgab\"。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: s = \"abcdefg\", k = 2</p><p>输出: \"cdefgab\"</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入: s = \"lrloseumgh\", k = 6</p><p>输出: \"umghlrlose\"</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= k &lt; s.length &lt;= 10000`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5b57\\u7b26\\u4e32\\u7684\\u5de6\\u65cb\\u8f6c\\u64cd\\u4f5c\\u662f\\u628a\\u5b57\\u7b26\\u4e32\\u524d\\u9762\\u7684\\u82e5\\u5e72\\u4e2a\\u5b57\\u7b26\\u8f6c\\u79fb\\u5230\\u5b57\\u7b26\\u4e32\\u7684\\u5c3e\\u90e8\\u3002\\u8bf7\\u5b9a\\u4e49\\u4e00\\u4e2a\\u51fd\\u6570\\u5b9e\\u73b0\\u5b57\\u7b26\\u4e32\\u5de6\\u65cb\\u8f6c\\u64cd\\u4f5c\\u7684\\u529f\\u80fd\\u3002\\u6bd4\\u5982\\uff0c\\u8f93\\u5165\\u5b57\\u7b26\\u4e32\\\"abcdefg\\\"\\u548c\\u6570\\u5b572\\uff0c\\u8be5\\u51fd\\u6570\\u5c06\\u8fd4\\u56de\\u5de6\\u65cb\\u8f6c\\u4e24\\u4f4d\\u5f97\\u5230\\u7684\\u7ed3\\u679c\\\"cdefgab\\\"\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: s = \\\"abcdefg\\\", k = 2\\n\\u8f93\\u51fa: \\\"cdefgab\\\"\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165: s = \\\"lrloseumgh\\\", k = 6\\n\\u8f93\\u51fa: \\\"umghlrlose\\\"\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= k < s.length <= 10000`\\n\\n\\n\"}]}','green','2020-08-12 13:11:32'),(112,'剑指 Offer 58 - I. 翻转单词顺序','\n输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。\n\n \n\n**示例 1：**\n\n```\n输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n```\n\n**示例 2：**\n\n```\n输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n```\n\n**示例 3：**\n\n```\n输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n```\n\n \n\n**说明：**\n\n- 无空格字符构成一个单词。\n- 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n- 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n\n','<p><br></p><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: \"the sky is blue\"</p><p>输出: \"blue is sky the\"</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入: \"  hello world!  \"</p><p>输出: \"world! hello\"</p><p>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</p><p>```</p><p><br></p><p>**示例 3：**</p><p><br></p><p>```</p><p>输入: \"a good   example\"</p><p>输出: \"example good a\"</p><p>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**说明：**</p><p><br></p><p>- 无空格字符构成一个单词。</p><p>- 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</p><p>- 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u82f1\\u6587\\u53e5\\u5b50\\uff0c\\u7ffb\\u8f6c\\u53e5\\u5b50\\u4e2d\\u5355\\u8bcd\\u7684\\u987a\\u5e8f\\uff0c\\u4f46\\u5355\\u8bcd\\u5185\\u5b57\\u7b26\\u7684\\u987a\\u5e8f\\u4e0d\\u53d8\\u3002\\u4e3a\\u7b80\\u5355\\u8d77\\u89c1\\uff0c\\u6807\\u70b9\\u7b26\\u53f7\\u548c\\u666e\\u901a\\u5b57\\u6bcd\\u4e00\\u6837\\u5904\\u7406\\u3002\\u4f8b\\u5982\\u8f93\\u5165\\u5b57\\u7b26\\u4e32\\\"I am a student. \\\"\\uff0c\\u5219\\u8f93\\u51fa\\\"student. a am I\\\"\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: \\\"the sky is blue\\\"\\n\\u8f93\\u51fa: \\\"blue is sky the\\\"\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165: \\\"  hello world!  \\\"\\n\\u8f93\\u51fa: \\\"world! hello\\\"\\n\\u89e3\\u91ca: \\u8f93\\u5165\\u5b57\\u7b26\\u4e32\\u53ef\\u4ee5\\u5728\\u524d\\u9762\\u6216\\u8005\\u540e\\u9762\\u5305\\u542b\\u591a\\u4f59\\u7684\\u7a7a\\u683c\\uff0c\\u4f46\\u662f\\u53cd\\u8f6c\\u540e\\u7684\\u5b57\\u7b26\\u4e0d\\u80fd\\u5305\\u62ec\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3\\uff1a**\\n\\n```\\n\\u8f93\\u5165: \\\"a good   example\\\"\\n\\u8f93\\u51fa: \\\"example good a\\\"\\n\\u89e3\\u91ca: \\u5982\\u679c\\u4e24\\u4e2a\\u5355\\u8bcd\\u95f4\\u6709\\u591a\\u4f59\\u7684\\u7a7a\\u683c\\uff0c\\u5c06\\u53cd\\u8f6c\\u540e\\u5355\\u8bcd\\u95f4\\u7684\\u7a7a\\u683c\\u51cf\\u5c11\\u5230\\u53ea\\u542b\\u4e00\\u4e2a\\u3002\\n```\\n\\n \\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n- \\u65e0\\u7a7a\\u683c\\u5b57\\u7b26\\u6784\\u6210\\u4e00\\u4e2a\\u5355\\u8bcd\\u3002\\n- \\u8f93\\u5165\\u5b57\\u7b26\\u4e32\\u53ef\\u4ee5\\u5728\\u524d\\u9762\\u6216\\u8005\\u540e\\u9762\\u5305\\u542b\\u591a\\u4f59\\u7684\\u7a7a\\u683c\\uff0c\\u4f46\\u662f\\u53cd\\u8f6c\\u540e\\u7684\\u5b57\\u7b26\\u4e0d\\u80fd\\u5305\\u62ec\\u3002\\n- \\u5982\\u679c\\u4e24\\u4e2a\\u5355\\u8bcd\\u95f4\\u6709\\u591a\\u4f59\\u7684\\u7a7a\\u683c\\uff0c\\u5c06\\u53cd\\u8f6c\\u540e\\u5355\\u8bcd\\u95f4\\u7684\\u7a7a\\u683c\\u51cf\\u5c11\\u5230\\u53ea\\u542b\\u4e00\\u4e2a\\u3002\\n\\n\"}]}','green','2020-08-12 13:11:56'),(113,'剑指 Offer 57 - II. 和为s的连续正数序列','\n输入一个正整数 `target` ，输出所有和为 `target` 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n\n \n\n**示例 1：**\n\n```\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n```\n\n**示例 2：**\n\n```\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n```\n\n \n\n**限制：**\n\n- `1 <= target <= 10^5`\n\n','<p><br></p><p>输入一个正整数 `target` ，输出所有和为 `target` 的连续正整数序列（至少含有两个数）。</p><p><br></p><p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：target = 9</p><p>输出：[[2,3,4],[4,5]]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：target = 15</p><p>输出：[[1,2,3,4,5],[4,5,6],[7,8]]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= target &lt;= 10^5`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u6b63\\u6574\\u6570 `target` \\uff0c\\u8f93\\u51fa\\u6240\\u6709\\u548c\\u4e3a `target` \\u7684\\u8fde\\u7eed\\u6b63\\u6574\\u6570\\u5e8f\\u5217\\uff08\\u81f3\\u5c11\\u542b\\u6709\\u4e24\\u4e2a\\u6570\\uff09\\u3002\\n\\n\\u5e8f\\u5217\\u5185\\u7684\\u6570\\u5b57\\u7531\\u5c0f\\u5230\\u5927\\u6392\\u5217\\uff0c\\u4e0d\\u540c\\u5e8f\\u5217\\u6309\\u7167\\u9996\\u4e2a\\u6570\\u5b57\\u4ece\\u5c0f\\u5230\\u5927\\u6392\\u5217\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1atarget = 9\\n\\u8f93\\u51fa\\uff1a[[2,3,4],[4,5]]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1atarget = 15\\n\\u8f93\\u51fa\\uff1a[[1,2,3,4,5],[4,5,6],[7,8]]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= target <= 10^5`\\n\\n\"}]}','green','2020-08-12 13:12:17'),(114,'剑指 Offer 57. 和为s的两个数字','\n输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[2,7] 或者 [7,2]\n```\n\n**示例 2：**\n\n```\n输入：nums = [10,26,30,31,47,60], target = 40\n输出：[10,30] 或者 [30,10]\n```\n\n \n\n**限制：**\n\n- `1 <= nums.length <= 10^5`\n- `1 <= nums[i] <= 10^6`\n\n\n\n','<p><br></p><p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：nums = [2,7,11,15], target = 9</p><p>输出：[2,7] 或者 [7,2]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：nums = [10,26,30,31,47,60], target = 40</p><p>输出：[10,30] 或者 [30,10]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= nums.length &lt;= 10^5`</p><p>- `1 &lt;= nums[i] &lt;= 10^6`</p><p><br></p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u9012\\u589e\\u6392\\u5e8f\\u7684\\u6570\\u7ec4\\u548c\\u4e00\\u4e2a\\u6570\\u5b57s\\uff0c\\u5728\\u6570\\u7ec4\\u4e2d\\u67e5\\u627e\\u4e24\\u4e2a\\u6570\\uff0c\\u4f7f\\u5f97\\u5b83\\u4eec\\u7684\\u548c\\u6b63\\u597d\\u662fs\\u3002\\u5982\\u679c\\u6709\\u591a\\u5bf9\\u6570\\u5b57\\u7684\\u548c\\u7b49\\u4e8es\\uff0c\\u5219\\u8f93\\u51fa\\u4efb\\u610f\\u4e00\\u5bf9\\u5373\\u53ef\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1anums = [2,7,11,15], target = 9\\n\\u8f93\\u51fa\\uff1a[2,7] \\u6216\\u8005 [7,2]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1anums = [10,26,30,31,47,60], target = 40\\n\\u8f93\\u51fa\\uff1a[10,30] \\u6216\\u8005 [30,10]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= nums.length <= 10^5`\\n- `1 <= nums[i] <= 10^6`\\n\\n\\n\\n\"}]}','green','2020-08-12 13:12:31'),(115,'剑指 Offer 56 - II. 数组中数字出现的次数 II','\n在一个数组 `nums` 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [3,4,3,3]\n输出：4\n```\n\n**示例 2：**\n\n```\n输入：nums = [9,1,7,9,7,9,7]\n输出：1\n```\n\n \n\n**限制：**\n\n- `1 <= nums.length <= 10000`\n- `1 <= nums[i] < 2^31`\n\n \n','<p><br></p><p>在一个数组 `nums` 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：nums = [3,4,3,3]</p><p>输出：4</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：nums = [9,1,7,9,7,9,7]</p><p>输出：1</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= nums.length &lt;= 10000`</p><p>- `1 &lt;= nums[i] &lt; 2^31`</p><p><br></p><p> </p>','{\"ops\": [{\"insert\": \"\\n\\u5728\\u4e00\\u4e2a\\u6570\\u7ec4 `nums` \\u4e2d\\u9664\\u4e00\\u4e2a\\u6570\\u5b57\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u4e4b\\u5916\\uff0c\\u5176\\u4ed6\\u6570\\u5b57\\u90fd\\u51fa\\u73b0\\u4e86\\u4e09\\u6b21\\u3002\\u8bf7\\u627e\\u51fa\\u90a3\\u4e2a\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u6570\\u5b57\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1anums = [3,4,3,3]\\n\\u8f93\\u51fa\\uff1a4\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1anums = [9,1,7,9,7,9,7]\\n\\u8f93\\u51fa\\uff1a1\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= nums.length <= 10000`\\n- `1 <= nums[i] < 2^31`\\n\\n \\n\"}]}','yellow','2020-08-12 13:12:47'),(116,'剑指 Offer 56 - I. 数组中数字出现的次数','\n一个整型数组 `nums` 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [4,1,4,6]\n输出：[1,6] 或 [6,1]\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,10,4,1,4,3,3]\n输出：[2,10] 或 [10,2]\n```\n\n \n\n**限制：**\n\n- `2 <= nums.length <= 10000`\n\n \n\n','<p><br></p><p>一个整型数组 `nums` 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：nums = [4,1,4,6]</p><p>输出：[1,6] 或 [6,1]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：nums = [1,2,10,4,1,4,3,3]</p><p>输出：[2,10] 或 [10,2]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `2 &lt;= nums.length &lt;= 10000`</p><p><br></p><p> </p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u4e00\\u4e2a\\u6574\\u578b\\u6570\\u7ec4 `nums` \\u91cc\\u9664\\u4e24\\u4e2a\\u6570\\u5b57\\u4e4b\\u5916\\uff0c\\u5176\\u4ed6\\u6570\\u5b57\\u90fd\\u51fa\\u73b0\\u4e86\\u4e24\\u6b21\\u3002\\u8bf7\\u5199\\u7a0b\\u5e8f\\u627e\\u51fa\\u8fd9\\u4e24\\u4e2a\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u6570\\u5b57\\u3002\\u8981\\u6c42\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u662fO(n)\\uff0c\\u7a7a\\u95f4\\u590d\\u6742\\u5ea6\\u662fO(1)\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1anums = [4,1,4,6]\\n\\u8f93\\u51fa\\uff1a[1,6] \\u6216 [6,1]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1anums = [1,2,10,4,1,4,3,3]\\n\\u8f93\\u51fa\\uff1a[2,10] \\u6216 [10,2]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `2 <= nums.length <= 10000`\\n\\n \\n\\n\"}]}','yellow','2020-08-12 13:12:59'),(117,'剑指 Offer 55 - II. 平衡二叉树','\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n \n\n**示例 1:**\n\n给定二叉树 `[3,9,20,null,null,15,7]`\n\n```\n    3\n   / \\\n  9  20\n     /  \\\n   15   7\n```\n\n返回 `true` 。\n\n**示例 2:**\n\n给定二叉树 `[1,2,2,3,3,null,null,4,4]`\n\n```\n       1\n      /  \\\n     2   2\n    /  \\\n   3   3\n  /  \\\n 4   4\n```\n\n返回 `false` 。\n\n \n\n**限制：**\n\n- `1 <= 树的结点个数 <= 10000`\n\n','<p><br></p><p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>给定二叉树 `[3,9,20,null,null,15,7]`</p><p><br></p><p>```</p><p>    3</p><p>   / \\</p><p>  9  20</p><p>     /  \\</p><p>   15   7</p><p>```</p><p><br></p><p>返回 `true` 。</p><p><br></p><p>**示例 2:**</p><p><br></p><p>给定二叉树 `[1,2,2,3,3,null,null,4,4]`</p><p><br></p><p>```</p><p>       1</p><p>      /  \\</p><p>     2   2</p><p>    /  \\</p><p>   3   3</p><p>  /  \\</p><p> 4   4</p><p>```</p><p><br></p><p>返回 `false` 。</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= 树的结点个数 &lt;= 10000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u68f5\\u4e8c\\u53c9\\u6811\\u7684\\u6839\\u8282\\u70b9\\uff0c\\u5224\\u65ad\\u8be5\\u6811\\u662f\\u4e0d\\u662f\\u5e73\\u8861\\u4e8c\\u53c9\\u6811\\u3002\\u5982\\u679c\\u67d0\\u4e8c\\u53c9\\u6811\\u4e2d\\u4efb\\u610f\\u8282\\u70b9\\u7684\\u5de6\\u53f3\\u5b50\\u6811\\u7684\\u6df1\\u5ea6\\u76f8\\u5dee\\u4e0d\\u8d85\\u8fc71\\uff0c\\u90a3\\u4e48\\u5b83\\u5c31\\u662f\\u4e00\\u68f5\\u5e73\\u8861\\u4e8c\\u53c9\\u6811\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n\\u7ed9\\u5b9a\\u4e8c\\u53c9\\u6811 `[3,9,20,null,null,15,7]`\\n\\n```\\n    3\\n   / \\\\\\n  9  20\\n     /  \\\\\\n   15   7\\n```\\n\\n\\u8fd4\\u56de `true` \\u3002\\n\\n**\\u793a\\u4f8b 2:**\\n\\n\\u7ed9\\u5b9a\\u4e8c\\u53c9\\u6811 `[1,2,2,3,3,null,null,4,4]`\\n\\n```\\n       1\\n      /  \\\\\\n     2   2\\n    /  \\\\\\n   3   3\\n  /  \\\\\\n 4   4\\n```\\n\\n\\u8fd4\\u56de `false` \\u3002\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= \\u6811\\u7684\\u7ed3\\u70b9\\u4e2a\\u6570 <= 10000`\\n\\n\"}]}','green','2020-08-12 13:13:45'),(118,'剑指 Offer 55 - I. 二叉树的深度','\n输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。\n\n例如：\n\n给定二叉树 `[3,9,20,null,null,15,7]`，\n\n```\n    3\n   /  \\\n  9  20\n      /  \\\n    15   7\n```\n\n返回它的最大深度 3 。\n\n \n\n**提示：**\n\n1. `节点总数 <= 10000`\n','<p><br></p><p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p><p><br></p><p>例如：</p><p><br></p><p>给定二叉树 `[3,9,20,null,null,15,7]`，</p><p><br></p><p>```</p><p>    3</p><p>   /  \\</p><p>  9  20</p><p>      /  \\</p><p>    15   7</p><p>```</p><p><br></p><p>返回它的最大深度 3 。</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. `节点总数 &lt;= 10000`</p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u68f5\\u4e8c\\u53c9\\u6811\\u7684\\u6839\\u8282\\u70b9\\uff0c\\u6c42\\u8be5\\u6811\\u7684\\u6df1\\u5ea6\\u3002\\u4ece\\u6839\\u8282\\u70b9\\u5230\\u53f6\\u8282\\u70b9\\u4f9d\\u6b21\\u7ecf\\u8fc7\\u7684\\u8282\\u70b9\\uff08\\u542b\\u6839\\u3001\\u53f6\\u8282\\u70b9\\uff09\\u5f62\\u6210\\u6811\\u7684\\u4e00\\u6761\\u8def\\u5f84\\uff0c\\u6700\\u957f\\u8def\\u5f84\\u7684\\u957f\\u5ea6\\u4e3a\\u6811\\u7684\\u6df1\\u5ea6\\u3002\\n\\n\\u4f8b\\u5982\\uff1a\\n\\n\\u7ed9\\u5b9a\\u4e8c\\u53c9\\u6811 `[3,9,20,null,null,15,7]`\\uff0c\\n\\n```\\n    3\\n   /  \\\\\\n  9  20\\n      /  \\\\\\n    15   7\\n```\\n\\n\\u8fd4\\u56de\\u5b83\\u7684\\u6700\\u5927\\u6df1\\u5ea6 3 \\u3002\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. `\\u8282\\u70b9\\u603b\\u6570 <= 10000`\\n\"}]}','green','2020-08-12 13:14:03'),(119,'剑指 Offer 54. 二叉搜索树的第k大节点','\n给定一棵二叉搜索树，请找出其中第k大的节点。\n\n \n\n**示例 1:**\n\n```\n输入: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n   2\n输出: 4\n```\n\n**示例 2:**\n\n```\n输入: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n输出: 4\n```\n\n \n\n**限制：**\n\n1 ≤ k ≤ 二叉搜索树元素个数\n\n','<p><br></p><p>给定一棵二叉搜索树，请找出其中第k大的节点。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: root = [3,1,4,null,2], k = 1</p><p>   3</p><p>  / \\</p><p> 1   4</p><p>  \\</p><p>   2</p><p>输出: 4</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: root = [5,3,6,2,4,null,null,1], k = 3</p><p>       5</p><p>      / \\</p><p>     3   6</p><p>    / \\</p><p>   2   4</p><p>  /</p><p> 1</p><p>输出: 4</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>1 ≤ k ≤ 二叉搜索树元素个数</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u68f5\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\uff0c\\u8bf7\\u627e\\u51fa\\u5176\\u4e2d\\u7b2ck\\u5927\\u7684\\u8282\\u70b9\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: root = [3,1,4,null,2], k = 1\\n   3\\n  / \\\\\\n 1   4\\n  \\\\\\n   2\\n\\u8f93\\u51fa: 4\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: root = [5,3,6,2,4,null,null,1], k = 3\\n       5\\n      / \\\\\\n     3   6\\n    / \\\\\\n   2   4\\n  /\\n 1\\n\\u8f93\\u51fa: 4\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n1 \\u2264 k \\u2264 \\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u5143\\u7d20\\u4e2a\\u6570\\n\\n\"}]}','green','2020-08-12 13:14:46'),(120,'剑指 Offer 53 - II. 0～n-1中缺失的数字]','\n一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。\n\n \n\n**示例 1:**\n\n```\n输入: [0,1,3]\n输出: 2\n```\n\n**示例 2:**\n\n```\n输入: [0,1,2,3,4,5,6,7,9]\n输出: 8\n```\n\n \n\n**限制：**\n\n```\n1 <= 数组长度 <= 10000\n```\n\n\n','<p><br></p><p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [0,1,3]</p><p>输出: 2</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [0,1,2,3,4,5,6,7,9]</p><p>输出: 8</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>1 &lt;= 数组长度 &lt;= 10000</p><p>```</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u4e00\\u4e2a\\u957f\\u5ea6\\u4e3an-1\\u7684\\u9012\\u589e\\u6392\\u5e8f\\u6570\\u7ec4\\u4e2d\\u7684\\u6240\\u6709\\u6570\\u5b57\\u90fd\\u662f\\u552f\\u4e00\\u7684\\uff0c\\u5e76\\u4e14\\u6bcf\\u4e2a\\u6570\\u5b57\\u90fd\\u5728\\u8303\\u56f40\\uff5en-1\\u4e4b\\u5185\\u3002\\u5728\\u8303\\u56f40\\uff5en-1\\u5185\\u7684n\\u4e2a\\u6570\\u5b57\\u4e2d\\u6709\\u4e14\\u53ea\\u6709\\u4e00\\u4e2a\\u6570\\u5b57\\u4e0d\\u5728\\u8be5\\u6570\\u7ec4\\u4e2d\\uff0c\\u8bf7\\u627e\\u51fa\\u8fd9\\u4e2a\\u6570\\u5b57\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [0,1,3]\\n\\u8f93\\u51fa: 2\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [0,1,2,3,4,5,6,7,9]\\n\\u8f93\\u51fa: 8\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n1 <= \\u6570\\u7ec4\\u957f\\u5ea6 <= 10000\\n```\\n\\n\\n\"}]}','green','2020-08-12 13:15:01'),(121,'剑指 Offer 53 - I. 在排序数组中查找数字 I','\n统计一个数字在排序数组中出现的次数。\n\n \n\n**示例 1:**\n\n```\n输入: nums = [5,7,7,8,8,10], target = 8\n输出: 2\n```\n\n**示例 2:**\n\n```\n输入: nums = [5,7,7,8,8,10], target = 6\n输出: 0\n```\n\n \n\n**限制：**\n\n```\n0 <= 数组长度 <= 50000\n```\n\n \n','<p><br></p><p>统计一个数字在排序数组中出现的次数。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: nums = [5,7,7,8,8,10], target = 8</p><p>输出: 2</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: nums = [5,7,7,8,8,10], target = 6</p><p>输出: 0</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 数组长度 &lt;= 50000</p><p>```</p><p><br></p><p> </p>','{\"ops\": [{\"insert\": \"\\n\\u7edf\\u8ba1\\u4e00\\u4e2a\\u6570\\u5b57\\u5728\\u6392\\u5e8f\\u6570\\u7ec4\\u4e2d\\u51fa\\u73b0\\u7684\\u6b21\\u6570\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: nums = [5,7,7,8,8,10], target = 8\\n\\u8f93\\u51fa: 2\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: nums = [5,7,7,8,8,10], target = 6\\n\\u8f93\\u51fa: 0\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u6570\\u7ec4\\u957f\\u5ea6 <= 50000\\n```\\n\\n \\n\"}]}','green','2020-08-12 13:15:20'),(122,'剑指 Offer 52. 两个链表的第一个公共节点','输入两个链表，找出它们的第一个公共节点。\n\n如下面的两个链表**：**\n\n[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)\n\n在节点 c1 开始相交。\n\n \n\n**示例 1：**\n\n[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png)\n\n```\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Reference of the node with value = 8\n输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n```\n\n \n\n**示例 2：**\n\n[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png)\n\n```\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Reference of the node with value = 2\n输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n```\n\n \n\n**示例 3：**\n\n[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png)\n\n```\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n解释：这两个链表不相交，因此返回 null。\n```\n\n \n\n**注意：**\n\n- 如果两个链表没有交点，返回 `null`.\n- 在返回结果后，两个链表仍须保持原有的结构。\n- 可假定整个链表结构中没有循环。\n- 程序尽量满足 O(*n*) 时间复杂度，且仅用 O(*1*) 内存。\n- 本题与主站 160 题相同：https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\n\n','<p>输入两个链表，找出它们的第一个公共节点。</p><p><br></p><p>如下面的两个链表**：**</p><p><br></p><p>[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)</p><p><br></p><p>在节点 c1 开始相交。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png)</p><p><br></p><p>```</p><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</p><p>输出：Reference of the node with value = 8</p><p>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**示例 2：**</p><p><br></p><p>[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png)</p><p><br></p><p>```</p><p>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</p><p>输出：Reference of the node with value = 2</p><p>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**示例 3：**</p><p><br></p><p>[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png)</p><p><br></p><p>```</p><p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</p><p>输出：null</p><p>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</p><p>解释：这两个链表不相交，因此返回 null。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**注意：**</p><p><br></p><p>- 如果两个链表没有交点，返回 `null`.</p><p>- 在返回结果后，两个链表仍须保持原有的结构。</p><p>- 可假定整个链表结构中没有循环。</p><p>- 程序尽量满足 O(*n*) 时间复杂度，且仅用 O(*1*) 内存。</p><p>- 本题与主站 160 题相同：https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u8f93\\u5165\\u4e24\\u4e2a\\u94fe\\u8868\\uff0c\\u627e\\u51fa\\u5b83\\u4eec\\u7684\\u7b2c\\u4e00\\u4e2a\\u516c\\u5171\\u8282\\u70b9\\u3002\\n\\n\\u5982\\u4e0b\\u9762\\u7684\\u4e24\\u4e2a\\u94fe\\u8868**\\uff1a**\\n\\n[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)\\n\\n\\u5728\\u8282\\u70b9 c1 \\u5f00\\u59cb\\u76f8\\u4ea4\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png)\\n\\n```\\n\\u8f93\\u5165\\uff1aintersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\\n\\u8f93\\u51fa\\uff1aReference of the node with value = 8\\n\\u8f93\\u5165\\u89e3\\u91ca\\uff1a\\u76f8\\u4ea4\\u8282\\u70b9\\u7684\\u503c\\u4e3a 8 \\uff08\\u6ce8\\u610f\\uff0c\\u5982\\u679c\\u4e24\\u4e2a\\u5217\\u8868\\u76f8\\u4ea4\\u5219\\u4e0d\\u80fd\\u4e3a 0\\uff09\\u3002\\u4ece\\u5404\\u81ea\\u7684\\u8868\\u5934\\u5f00\\u59cb\\u7b97\\u8d77\\uff0c\\u94fe\\u8868 A \\u4e3a [4,1,8,4,5]\\uff0c\\u94fe\\u8868 B \\u4e3a [5,0,1,8,4,5]\\u3002\\u5728 A \\u4e2d\\uff0c\\u76f8\\u4ea4\\u8282\\u70b9\\u524d\\u6709 2 \\u4e2a\\u8282\\u70b9\\uff1b\\u5728 B \\u4e2d\\uff0c\\u76f8\\u4ea4\\u8282\\u70b9\\u524d\\u6709 3 \\u4e2a\\u8282\\u70b9\\u3002\\n```\\n\\n \\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png)\\n\\n```\\n\\u8f93\\u5165\\uff1aintersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\\n\\u8f93\\u51fa\\uff1aReference of the node with value = 2\\n\\u8f93\\u5165\\u89e3\\u91ca\\uff1a\\u76f8\\u4ea4\\u8282\\u70b9\\u7684\\u503c\\u4e3a 2 \\uff08\\u6ce8\\u610f\\uff0c\\u5982\\u679c\\u4e24\\u4e2a\\u5217\\u8868\\u76f8\\u4ea4\\u5219\\u4e0d\\u80fd\\u4e3a 0\\uff09\\u3002\\u4ece\\u5404\\u81ea\\u7684\\u8868\\u5934\\u5f00\\u59cb\\u7b97\\u8d77\\uff0c\\u94fe\\u8868 A \\u4e3a [0,9,1,2,4]\\uff0c\\u94fe\\u8868 B \\u4e3a [3,2,4]\\u3002\\u5728 A \\u4e2d\\uff0c\\u76f8\\u4ea4\\u8282\\u70b9\\u524d\\u6709 3 \\u4e2a\\u8282\\u70b9\\uff1b\\u5728 B \\u4e2d\\uff0c\\u76f8\\u4ea4\\u8282\\u70b9\\u524d\\u6709 1 \\u4e2a\\u8282\\u70b9\\u3002\\n```\\n\\n \\n\\n**\\u793a\\u4f8b 3\\uff1a**\\n\\n[![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png)](https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png)\\n\\n```\\n\\u8f93\\u5165\\uff1aintersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\\n\\u8f93\\u51fa\\uff1anull\\n\\u8f93\\u5165\\u89e3\\u91ca\\uff1a\\u4ece\\u5404\\u81ea\\u7684\\u8868\\u5934\\u5f00\\u59cb\\u7b97\\u8d77\\uff0c\\u94fe\\u8868 A \\u4e3a [2,6,4]\\uff0c\\u94fe\\u8868 B \\u4e3a [1,5]\\u3002\\u7531\\u4e8e\\u8fd9\\u4e24\\u4e2a\\u94fe\\u8868\\u4e0d\\u76f8\\u4ea4\\uff0c\\u6240\\u4ee5 intersectVal \\u5fc5\\u987b\\u4e3a 0\\uff0c\\u800c skipA \\u548c skipB \\u53ef\\u4ee5\\u662f\\u4efb\\u610f\\u503c\\u3002\\n\\u89e3\\u91ca\\uff1a\\u8fd9\\u4e24\\u4e2a\\u94fe\\u8868\\u4e0d\\u76f8\\u4ea4\\uff0c\\u56e0\\u6b64\\u8fd4\\u56de null\\u3002\\n```\\n\\n \\n\\n**\\u6ce8\\u610f\\uff1a**\\n\\n- \\u5982\\u679c\\u4e24\\u4e2a\\u94fe\\u8868\\u6ca1\\u6709\\u4ea4\\u70b9\\uff0c\\u8fd4\\u56de `null`.\\n- \\u5728\\u8fd4\\u56de\\u7ed3\\u679c\\u540e\\uff0c\\u4e24\\u4e2a\\u94fe\\u8868\\u4ecd\\u987b\\u4fdd\\u6301\\u539f\\u6709\\u7684\\u7ed3\\u6784\\u3002\\n- \\u53ef\\u5047\\u5b9a\\u6574\\u4e2a\\u94fe\\u8868\\u7ed3\\u6784\\u4e2d\\u6ca1\\u6709\\u5faa\\u73af\\u3002\\n- \\u7a0b\\u5e8f\\u5c3d\\u91cf\\u6ee1\\u8db3 O(*n*) \\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\uff0c\\u4e14\\u4ec5\\u7528 O(*1*) \\u5185\\u5b58\\u3002\\n- \\u672c\\u9898\\u4e0e\\u4e3b\\u7ad9 160 \\u9898\\u76f8\\u540c\\uff1ahttps://leetcode-cn.com/problems/intersection-of-two-linked-lists/\\n\\n\"}]}','green','2020-08-12 13:15:58'),(123,'剑指 Offer 51. 数组中的逆序对','\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。\n\n \n\n**示例 1:**\n\n```\n输入: [7,5,6,4]\n输出: 5\n```\n\n \n\n**限制：**\n\n```\n0 <= 数组长度 <= 50000\n```\n\n','<p><br></p><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [7,5,6,4]</p><p>输出: 5</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 数组长度 &lt;= 50000</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5728\\u6570\\u7ec4\\u4e2d\\u7684\\u4e24\\u4e2a\\u6570\\u5b57\\uff0c\\u5982\\u679c\\u524d\\u9762\\u4e00\\u4e2a\\u6570\\u5b57\\u5927\\u4e8e\\u540e\\u9762\\u7684\\u6570\\u5b57\\uff0c\\u5219\\u8fd9\\u4e24\\u4e2a\\u6570\\u5b57\\u7ec4\\u6210\\u4e00\\u4e2a\\u9006\\u5e8f\\u5bf9\\u3002\\u8f93\\u5165\\u4e00\\u4e2a\\u6570\\u7ec4\\uff0c\\u6c42\\u51fa\\u8fd9\\u4e2a\\u6570\\u7ec4\\u4e2d\\u7684\\u9006\\u5e8f\\u5bf9\\u7684\\u603b\\u6570\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [7,5,6,4]\\n\\u8f93\\u51fa: 5\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u6570\\u7ec4\\u957f\\u5ea6 <= 50000\\n```\\n\\n\"}]}','red','2020-08-12 13:16:13'),(124,'剑指 Offer 50. 第一个只出现一次的字符','\n在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。\n\n**示例:**\n\n```\ns = \"abaccdeff\"\n返回 \"b\"\n\ns = \"\" \n返回 \" \"\n```\n\n \n\n**限制：**\n\n```\n0 <= s 的长度 <= 50000\n```\n\n','<p><br></p><p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>s = \"abaccdeff\"</p><p>返回 \"b\"</p><p><br></p><p>s = \"\" </p><p>返回 \" \"</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= s 的长度 &lt;= 50000</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5728\\u5b57\\u7b26\\u4e32 s \\u4e2d\\u627e\\u51fa\\u7b2c\\u4e00\\u4e2a\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u5b57\\u7b26\\u3002\\u5982\\u679c\\u6ca1\\u6709\\uff0c\\u8fd4\\u56de\\u4e00\\u4e2a\\u5355\\u7a7a\\u683c\\u3002 s \\u53ea\\u5305\\u542b\\u5c0f\\u5199\\u5b57\\u6bcd\\u3002\\n\\n**\\u793a\\u4f8b:**\\n\\n```\\ns = \\\"abaccdeff\\\"\\n\\u8fd4\\u56de \\\"b\\\"\\n\\ns = \\\"\\\" \\n\\u8fd4\\u56de \\\" \\\"\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= s \\u7684\\u957f\\u5ea6 <= 50000\\n```\\n\\n\"}]}','green','2020-08-12 13:16:24'),(125,'剑指 Offer 49. 丑数','\n我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。\n\n \n\n**示例:**\n\n```\n输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n```\n\n**说明:** \n\n1. `1` 是丑数。\n2. `n` **不超过**1690。\n','<p><br></p><p>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: n = 10</p><p>输出: 12</p><p>解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。</p><p>```</p><p><br></p><p>**说明:** </p><p><br></p><p>1. `1` 是丑数。</p><p>2. `n` **不超过**1690。</p>','{\"ops\": [{\"insert\": \"\\n\\u6211\\u4eec\\u628a\\u53ea\\u5305\\u542b\\u8d28\\u56e0\\u5b50 2\\u30013 \\u548c 5 \\u7684\\u6570\\u79f0\\u4f5c\\u4e11\\u6570\\uff08Ugly Number\\uff09\\u3002\\u6c42\\u6309\\u4ece\\u5c0f\\u5230\\u5927\\u7684\\u987a\\u5e8f\\u7684\\u7b2c n \\u4e2a\\u4e11\\u6570\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: n = 10\\n\\u8f93\\u51fa: 12\\n\\u89e3\\u91ca: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 \\u662f\\u524d 10 \\u4e2a\\u4e11\\u6570\\u3002\\n```\\n\\n**\\u8bf4\\u660e:** \\n\\n1. `1` \\u662f\\u4e11\\u6570\\u3002\\n2. `n` **\\u4e0d\\u8d85\\u8fc7**1690\\u3002\\n\"}]}','yellow','2020-08-12 13:16:38'),(126,'剑指 Offer 48. 最长不含重复字符的子字符串','请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。\n\n \n\n**示例 1:**\n\n```\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n**示例 2:**\n\n```\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n**示例 3:**\n\n```\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n \n\n提示：\n\n- `s.length <= 40000`\n\n','<p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: \"abcabcbb\"</p><p>输出: 3 </p><p>解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: \"bbbbb\"</p><p>输出: 1</p><p>解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: \"pwwkew\"</p><p>输出: 3</p><p>解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。</p><p>     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。</p><p>```</p><p><br></p><p> </p><p><br></p><p>提示：</p><p><br></p><p>- `s.length &lt;= 40000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u8bf7\\u4ece\\u5b57\\u7b26\\u4e32\\u4e2d\\u627e\\u51fa\\u4e00\\u4e2a\\u6700\\u957f\\u7684\\u4e0d\\u5305\\u542b\\u91cd\\u590d\\u5b57\\u7b26\\u7684\\u5b50\\u5b57\\u7b26\\u4e32\\uff0c\\u8ba1\\u7b97\\u8be5\\u6700\\u957f\\u5b50\\u5b57\\u7b26\\u4e32\\u7684\\u957f\\u5ea6\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\\"abcabcbb\\\"\\n\\u8f93\\u51fa: 3 \\n\\u89e3\\u91ca: \\u56e0\\u4e3a\\u65e0\\u91cd\\u590d\\u5b57\\u7b26\\u7684\\u6700\\u957f\\u5b50\\u4e32\\u662f \\\"abc\\\"\\uff0c\\u6240\\u4ee5\\u5176\\u957f\\u5ea6\\u4e3a 3\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: \\\"bbbbb\\\"\\n\\u8f93\\u51fa: 1\\n\\u89e3\\u91ca: \\u56e0\\u4e3a\\u65e0\\u91cd\\u590d\\u5b57\\u7b26\\u7684\\u6700\\u957f\\u5b50\\u4e32\\u662f \\\"b\\\"\\uff0c\\u6240\\u4ee5\\u5176\\u957f\\u5ea6\\u4e3a 1\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: \\\"pwwkew\\\"\\n\\u8f93\\u51fa: 3\\n\\u89e3\\u91ca: \\u56e0\\u4e3a\\u65e0\\u91cd\\u590d\\u5b57\\u7b26\\u7684\\u6700\\u957f\\u5b50\\u4e32\\u662f \\\"wke\\\"\\uff0c\\u6240\\u4ee5\\u5176\\u957f\\u5ea6\\u4e3a 3\\u3002\\n     \\u8bf7\\u6ce8\\u610f\\uff0c\\u4f60\\u7684\\u7b54\\u6848\\u5fc5\\u987b\\u662f \\u5b50\\u4e32 \\u7684\\u957f\\u5ea6\\uff0c\\\"pwke\\\" \\u662f\\u4e00\\u4e2a\\u5b50\\u5e8f\\u5217\\uff0c\\u4e0d\\u662f\\u5b50\\u4e32\\u3002\\n```\\n\\n \\n\\n\\u63d0\\u793a\\uff1a\\n\\n- `s.length <= 40000`\\n\\n\"}]}','yellow','2020-08-12 13:16:55'),(127,'剑指 Offer 47. 礼物的最大价值','\n在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？\n\n \n\n**示例 1:**\n\n```\n输入: \n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n```\n\n \n\n提示：\n\n- `0 < grid.length <= 200`\n- `0 < grid[0].length <= 200`\n\n\n','<p><br></p><p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: </p><p>[</p><p>  [1,3,1],</p><p>  [1,5,1],</p><p>  [4,2,1]</p><p>]</p><p>输出: 12</p><p>解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物</p><p>```</p><p><br></p><p> </p><p><br></p><p>提示：</p><p><br></p><p>- `0 &lt; grid.length &lt;= 200`</p><p>- `0 &lt; grid[0].length &lt;= 200`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5728\\u4e00\\u4e2a m*n \\u7684\\u68cb\\u76d8\\u7684\\u6bcf\\u4e00\\u683c\\u90fd\\u653e\\u6709\\u4e00\\u4e2a\\u793c\\u7269\\uff0c\\u6bcf\\u4e2a\\u793c\\u7269\\u90fd\\u6709\\u4e00\\u5b9a\\u7684\\u4ef7\\u503c\\uff08\\u4ef7\\u503c\\u5927\\u4e8e 0\\uff09\\u3002\\u4f60\\u53ef\\u4ee5\\u4ece\\u68cb\\u76d8\\u7684\\u5de6\\u4e0a\\u89d2\\u5f00\\u59cb\\u62ff\\u683c\\u5b50\\u91cc\\u7684\\u793c\\u7269\\uff0c\\u5e76\\u6bcf\\u6b21\\u5411\\u53f3\\u6216\\u8005\\u5411\\u4e0b\\u79fb\\u52a8\\u4e00\\u683c\\u3001\\u76f4\\u5230\\u5230\\u8fbe\\u68cb\\u76d8\\u7684\\u53f3\\u4e0b\\u89d2\\u3002\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u68cb\\u76d8\\u53ca\\u5176\\u4e0a\\u9762\\u7684\\u793c\\u7269\\u7684\\u4ef7\\u503c\\uff0c\\u8bf7\\u8ba1\\u7b97\\u4f60\\u6700\\u591a\\u80fd\\u62ff\\u5230\\u591a\\u5c11\\u4ef7\\u503c\\u7684\\u793c\\u7269\\uff1f\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: \\n[\\n  [1,3,1],\\n  [1,5,1],\\n  [4,2,1]\\n]\\n\\u8f93\\u51fa: 12\\n\\u89e3\\u91ca: \\u8def\\u5f84 1\\u21923\\u21925\\u21922\\u21921 \\u53ef\\u4ee5\\u62ff\\u5230\\u6700\\u591a\\u4ef7\\u503c\\u7684\\u793c\\u7269\\n```\\n\\n \\n\\n\\u63d0\\u793a\\uff1a\\n\\n- `0 < grid.length <= 200`\\n- `0 < grid[0].length <= 200`\\n\\n\\n\"}]}','yellow','2020-08-12 13:17:07'),(128,'剑指 Offer 46. 把数字翻译成字符串','\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n \n\n**示例 1:**\n\n```\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n```\n\n \n\n**提示：**\n\n- `0 <= num < 231`\n','<p><br></p><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 12258</p><p>输出: 5</p><p>解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `0 &lt;= num &lt; 231`</p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u6570\\u5b57\\uff0c\\u6211\\u4eec\\u6309\\u7167\\u5982\\u4e0b\\u89c4\\u5219\\u628a\\u5b83\\u7ffb\\u8bd1\\u4e3a\\u5b57\\u7b26\\u4e32\\uff1a0 \\u7ffb\\u8bd1\\u6210 \\u201ca\\u201d \\uff0c1 \\u7ffb\\u8bd1\\u6210 \\u201cb\\u201d\\uff0c\\u2026\\u2026\\uff0c11 \\u7ffb\\u8bd1\\u6210 \\u201cl\\u201d\\uff0c\\u2026\\u2026\\uff0c25 \\u7ffb\\u8bd1\\u6210 \\u201cz\\u201d\\u3002\\u4e00\\u4e2a\\u6570\\u5b57\\u53ef\\u80fd\\u6709\\u591a\\u4e2a\\u7ffb\\u8bd1\\u3002\\u8bf7\\u7f16\\u7a0b\\u5b9e\\u73b0\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u7528\\u6765\\u8ba1\\u7b97\\u4e00\\u4e2a\\u6570\\u5b57\\u6709\\u591a\\u5c11\\u79cd\\u4e0d\\u540c\\u7684\\u7ffb\\u8bd1\\u65b9\\u6cd5\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 12258\\n\\u8f93\\u51fa: 5\\n\\u89e3\\u91ca: 12258\\u67095\\u79cd\\u4e0d\\u540c\\u7684\\u7ffb\\u8bd1\\uff0c\\u5206\\u522b\\u662f\\\"bccfi\\\", \\\"bwfi\\\", \\\"bczi\\\", \\\"mcfi\\\"\\u548c\\\"mzi\\\"\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `0 <= num < 231`\\n\"}]}','yellow','2020-08-12 13:17:21'),(129,'剑指 Offer 45. 把数组排成最小的数','\n输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。\n\n \n\n**示例 1:**\n\n```\n输入: [10,2]\n输出: \"102\"\n```\n\n**示例 2:**\n\n```\n输入: [3,30,34,5,9]\n输出: \"3033459\"\n```\n\n \n\n**提示:**\n\n- `0 < nums.length <= 100`\n\n**说明:**\n\n- 输出结果可能非常大，所以你需要返回一个字符串而不是整数\n- 拼接起来的数字可能会有前导 0，最后结果不需要去掉前导 0\n\n\n','<p><br></p><p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [10,2]</p><p>输出: \"102\"</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: [3,30,34,5,9]</p><p>输出: \"3033459\"</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示:**</p><p><br></p><p>- `0 &lt; nums.length &lt;= 100`</p><p><br></p><p>**说明:**</p><p><br></p><p>- 输出结果可能非常大，所以你需要返回一个字符串而不是整数</p><p>- 拼接起来的数字可能会有前导 0，最后结果不需要去掉前导 0</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u975e\\u8d1f\\u6574\\u6570\\u6570\\u7ec4\\uff0c\\u628a\\u6570\\u7ec4\\u91cc\\u6240\\u6709\\u6570\\u5b57\\u62fc\\u63a5\\u8d77\\u6765\\u6392\\u6210\\u4e00\\u4e2a\\u6570\\uff0c\\u6253\\u5370\\u80fd\\u62fc\\u63a5\\u51fa\\u7684\\u6240\\u6709\\u6570\\u5b57\\u4e2d\\u6700\\u5c0f\\u7684\\u4e00\\u4e2a\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [10,2]\\n\\u8f93\\u51fa: \\\"102\\\"\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: [3,30,34,5,9]\\n\\u8f93\\u51fa: \\\"3033459\\\"\\n```\\n\\n \\n\\n**\\u63d0\\u793a:**\\n\\n- `0 < nums.length <= 100`\\n\\n**\\u8bf4\\u660e:**\\n\\n- \\u8f93\\u51fa\\u7ed3\\u679c\\u53ef\\u80fd\\u975e\\u5e38\\u5927\\uff0c\\u6240\\u4ee5\\u4f60\\u9700\\u8981\\u8fd4\\u56de\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\u800c\\u4e0d\\u662f\\u6574\\u6570\\n- \\u62fc\\u63a5\\u8d77\\u6765\\u7684\\u6570\\u5b57\\u53ef\\u80fd\\u4f1a\\u6709\\u524d\\u5bfc 0\\uff0c\\u6700\\u540e\\u7ed3\\u679c\\u4e0d\\u9700\\u8981\\u53bb\\u6389\\u524d\\u5bfc 0\\n\\n\\n\"}]}','yellow','2020-08-12 13:17:33'),(130,'剑指 Offer 44. 数字序列中某一位的数字','\n数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。\n\n请写一个函数，求任意第n位对应的数字。\n\n \n\n**示例 1：**\n\n```\n输入：n = 3\n输出：3\n```\n\n**示例 2：**\n\n```\n输入：n = 11\n输出：0\n```\n\n \n\n**限制：**\n\n- `0 <= n < 2^31`\n\n','<p><br></p><p>数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。</p><p><br></p><p>请写一个函数，求任意第n位对应的数字。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：n = 3</p><p>输出：3</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：n = 11</p><p>输出：0</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `0 &lt;= n &lt; 2^31`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u6570\\u5b57\\u4ee50123456789101112131415\\u2026\\u7684\\u683c\\u5f0f\\u5e8f\\u5217\\u5316\\u5230\\u4e00\\u4e2a\\u5b57\\u7b26\\u5e8f\\u5217\\u4e2d\\u3002\\u5728\\u8fd9\\u4e2a\\u5e8f\\u5217\\u4e2d\\uff0c\\u7b2c5\\u4f4d\\uff08\\u4ece\\u4e0b\\u68070\\u5f00\\u59cb\\u8ba1\\u6570\\uff09\\u662f5\\uff0c\\u7b2c13\\u4f4d\\u662f1\\uff0c\\u7b2c19\\u4f4d\\u662f4\\uff0c\\u7b49\\u7b49\\u3002\\n\\n\\u8bf7\\u5199\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u6c42\\u4efb\\u610f\\u7b2cn\\u4f4d\\u5bf9\\u5e94\\u7684\\u6570\\u5b57\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 3\\n\\u8f93\\u51fa\\uff1a3\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 11\\n\\u8f93\\u51fa\\uff1a0\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `0 <= n < 2^31`\\n\\n\"}]}','yellow','2020-08-12 13:17:48'),(131,'剑指 Offer 43. 1～n整数中1出现的次数','\n输入一个整数 `n` ，求1～n这n个整数的十进制表示中1出现的次数。\n\n例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。\n\n \n\n**示例 1：**\n\n```\n输入：n = 12\n输出：5\n```\n\n**示例 2：**\n\n```\n输入：n = 13\n输出：6\n```\n\n \n\n**限制：**\n\n- `1 <= n < 2^31`\n\n','<p><br></p><p>输入一个整数 `n` ，求1～n这n个整数的十进制表示中1出现的次数。</p><p><br></p><p>例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：n = 12</p><p>输出：5</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：n = 13</p><p>输出：6</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `1 &lt;= n &lt; 2^31`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u6574\\u6570 `n` \\uff0c\\u6c421\\uff5en\\u8fd9n\\u4e2a\\u6574\\u6570\\u7684\\u5341\\u8fdb\\u5236\\u8868\\u793a\\u4e2d1\\u51fa\\u73b0\\u7684\\u6b21\\u6570\\u3002\\n\\n\\u4f8b\\u5982\\uff0c\\u8f93\\u516512\\uff0c1\\uff5e12\\u8fd9\\u4e9b\\u6574\\u6570\\u4e2d\\u5305\\u542b1 \\u7684\\u6570\\u5b57\\u67091\\u300110\\u300111\\u548c12\\uff0c1\\u4e00\\u5171\\u51fa\\u73b0\\u4e865\\u6b21\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 12\\n\\u8f93\\u51fa\\uff1a5\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 13\\n\\u8f93\\u51fa\\uff1a6\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `1 <= n < 2^31`\\n\\n\"}]}','yellow','2020-08-12 13:18:04'),(132,'剑指 Offer 42. 连续子数组的最大和','\n输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。\n\n要求时间复杂度为O(n)。\n\n \n\n**示例1:**\n\n```\n输入: nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n```\n\n \n\n**提示：**\n\n- `1 <= arr.length <= 10^5`\n- `-100 <= arr[i] <= 100`\n\n','<p><br></p><p>输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。</p><p><br></p><p>要求时间复杂度为O(n)。</p><p><br></p><p> </p><p><br></p><p>**示例1:**</p><p><br></p><p>```</p><p>输入: nums = [-2,1,-3,4,-1,2,1,-5,4]</p><p>输出: 6</p><p>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `1 &lt;= arr.length &lt;= 10^5`</p><p>- `-100 &lt;= arr[i] &lt;= 100`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u6574\\u578b\\u6570\\u7ec4\\uff0c\\u6570\\u7ec4\\u91cc\\u6709\\u6b63\\u6570\\u4e5f\\u6709\\u8d1f\\u6570\\u3002\\u6570\\u7ec4\\u4e2d\\u7684\\u4e00\\u4e2a\\u6216\\u8fde\\u7eed\\u591a\\u4e2a\\u6574\\u6570\\u7ec4\\u6210\\u4e00\\u4e2a\\u5b50\\u6570\\u7ec4\\u3002\\u6c42\\u6240\\u6709\\u5b50\\u6570\\u7ec4\\u7684\\u548c\\u7684\\u6700\\u5927\\u503c\\u3002\\n\\n\\u8981\\u6c42\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3aO(n)\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b1:**\\n\\n```\\n\\u8f93\\u5165: nums = [-2,1,-3,4,-1,2,1,-5,4]\\n\\u8f93\\u51fa: 6\\n\\u89e3\\u91ca: \\u8fde\\u7eed\\u5b50\\u6570\\u7ec4 [4,-1,2,1] \\u7684\\u548c\\u6700\\u5927\\uff0c\\u4e3a 6\\u3002\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `1 <= arr.length <= 10^5`\\n- `-100 <= arr[i] <= 100`\\n\\n\"}]}','green','2020-08-12 13:18:18'),(133,'剑指 Offer 41. 数据流中的中位数','\n如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。\n\n例如，\n\n[2,3,4] 的中位数是 3\n\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n\n设计一个支持以下两种操作的数据结构：\n\n- void addNum(int num) - 从数据流中添加一个整数到数据结构中。\n- double findMedian() - 返回目前所有元素的中位数。\n\n**示例 1：**\n\n```\n输入：\n[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n输出：[null,null,null,1.50000,null,2.00000]\n```\n\n**示例 2：**\n\n```\n输入：\n[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n输出：[null,null,2.00000,null,2.50000]\n```\n\n \n\n**限制：**\n\n- 最多会对 `addNum、findMedia`进行 `50000` 次调用。\n\n','<p><br></p><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p><p><br></p><p>例如，</p><p><br></p><p>[2,3,4] 的中位数是 3</p><p><br></p><p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p><p><br></p><p>设计一个支持以下两种操作的数据结构：</p><p><br></p><p>- void addNum(int num) - 从数据流中添加一个整数到数据结构中。</p><p>- double findMedian() - 返回目前所有元素的中位数。</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：</p><p>[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]</p><p>[[],[1],[2],[],[3],[]]</p><p>输出：[null,null,null,1.50000,null,2.00000]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：</p><p>[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]</p><p>[[],[2],[],[3],[]]</p><p>输出：[null,null,2.00000,null,2.50000]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- 最多会对 `addNum、findMedia`进行 `50000` 次调用。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5982\\u4f55\\u5f97\\u5230\\u4e00\\u4e2a\\u6570\\u636e\\u6d41\\u4e2d\\u7684\\u4e2d\\u4f4d\\u6570\\uff1f\\u5982\\u679c\\u4ece\\u6570\\u636e\\u6d41\\u4e2d\\u8bfb\\u51fa\\u5947\\u6570\\u4e2a\\u6570\\u503c\\uff0c\\u90a3\\u4e48\\u4e2d\\u4f4d\\u6570\\u5c31\\u662f\\u6240\\u6709\\u6570\\u503c\\u6392\\u5e8f\\u4e4b\\u540e\\u4f4d\\u4e8e\\u4e2d\\u95f4\\u7684\\u6570\\u503c\\u3002\\u5982\\u679c\\u4ece\\u6570\\u636e\\u6d41\\u4e2d\\u8bfb\\u51fa\\u5076\\u6570\\u4e2a\\u6570\\u503c\\uff0c\\u90a3\\u4e48\\u4e2d\\u4f4d\\u6570\\u5c31\\u662f\\u6240\\u6709\\u6570\\u503c\\u6392\\u5e8f\\u4e4b\\u540e\\u4e2d\\u95f4\\u4e24\\u4e2a\\u6570\\u7684\\u5e73\\u5747\\u503c\\u3002\\n\\n\\u4f8b\\u5982\\uff0c\\n\\n[2,3,4] \\u7684\\u4e2d\\u4f4d\\u6570\\u662f 3\\n\\n[2,3] \\u7684\\u4e2d\\u4f4d\\u6570\\u662f (2 + 3) / 2 = 2.5\\n\\n\\u8bbe\\u8ba1\\u4e00\\u4e2a\\u652f\\u6301\\u4ee5\\u4e0b\\u4e24\\u79cd\\u64cd\\u4f5c\\u7684\\u6570\\u636e\\u7ed3\\u6784\\uff1a\\n\\n- void addNum(int num) - \\u4ece\\u6570\\u636e\\u6d41\\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a\\u6574\\u6570\\u5230\\u6570\\u636e\\u7ed3\\u6784\\u4e2d\\u3002\\n- double findMedian() - \\u8fd4\\u56de\\u76ee\\u524d\\u6240\\u6709\\u5143\\u7d20\\u7684\\u4e2d\\u4f4d\\u6570\\u3002\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\n[\\\"MedianFinder\\\",\\\"addNum\\\",\\\"addNum\\\",\\\"findMedian\\\",\\\"addNum\\\",\\\"findMedian\\\"]\\n[[],[1],[2],[],[3],[]]\\n\\u8f93\\u51fa\\uff1a[null,null,null,1.50000,null,2.00000]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\n[\\\"MedianFinder\\\",\\\"addNum\\\",\\\"findMedian\\\",\\\"addNum\\\",\\\"findMedian\\\"]\\n[[],[2],[],[3],[]]\\n\\u8f93\\u51fa\\uff1a[null,null,2.00000,null,2.50000]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- \\u6700\\u591a\\u4f1a\\u5bf9 `addNum\\u3001findMedia`\\u8fdb\\u884c `50000` \\u6b21\\u8c03\\u7528\\u3002\\n\\n\"}]}','red','2020-08-12 13:18:42'),(134,'剑指 Offer 40. 最小的k个数','\n输入整数数组 `arr` ，找出其中最小的 `k` 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。\n\n \n\n**示例 1：**\n\n```\n输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]\n```\n\n**示例 2：**\n\n```\n输入：arr = [0,1,2,1], k = 1\n输出：[0]\n```\n\n \n\n**限制：**\n\n- `0 <= k <= arr.length <= 10000`\n- `0 <= arr[i] <= 10000`\n\n','<p><br></p><p>输入整数数组 `arr` ，找出其中最小的 `k` 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：arr = [3,2,1], k = 2</p><p>输出：[1,2] 或者 [2,1]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：arr = [0,1,2,1], k = 1</p><p>输出：[0]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `0 &lt;= k &lt;= arr.length &lt;= 10000`</p><p>- `0 &lt;= arr[i] &lt;= 10000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u6574\\u6570\\u6570\\u7ec4 `arr` \\uff0c\\u627e\\u51fa\\u5176\\u4e2d\\u6700\\u5c0f\\u7684 `k` \\u4e2a\\u6570\\u3002\\u4f8b\\u5982\\uff0c\\u8f93\\u51654\\u30015\\u30011\\u30016\\u30012\\u30017\\u30013\\u30018\\u8fd98\\u4e2a\\u6570\\u5b57\\uff0c\\u5219\\u6700\\u5c0f\\u76844\\u4e2a\\u6570\\u5b57\\u662f1\\u30012\\u30013\\u30014\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aarr = [3,2,1], k = 2\\n\\u8f93\\u51fa\\uff1a[1,2] \\u6216\\u8005 [2,1]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aarr = [0,1,2,1], k = 1\\n\\u8f93\\u51fa\\uff1a[0]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `0 <= k <= arr.length <= 10000`\\n- `0 <= arr[i] <= 10000`\\n\\n\"}]}','green','2020-08-12 13:18:57'),(135,'剑指 Offer 39. 数组中出现次数超过一半的数字','\n数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。\n\n \n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n \n\n**示例 1:**\n\n```\n输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2\n```\n\n \n\n**限制：**\n\n```\n1 <= 数组长度 <= 50000\n```\n\n \n','<p><br></p><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p><p><br></p><p> </p><p><br></p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]</p><p>输出: 2</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>1 &lt;= 数组长度 &lt;= 50000</p><p>```</p><p><br></p><p> </p>','{\"ops\": [{\"insert\": \"\\n\\u6570\\u7ec4\\u4e2d\\u6709\\u4e00\\u4e2a\\u6570\\u5b57\\u51fa\\u73b0\\u7684\\u6b21\\u6570\\u8d85\\u8fc7\\u6570\\u7ec4\\u957f\\u5ea6\\u7684\\u4e00\\u534a\\uff0c\\u8bf7\\u627e\\u51fa\\u8fd9\\u4e2a\\u6570\\u5b57\\u3002\\n\\n \\n\\n\\u4f60\\u53ef\\u4ee5\\u5047\\u8bbe\\u6570\\u7ec4\\u662f\\u975e\\u7a7a\\u7684\\uff0c\\u5e76\\u4e14\\u7ed9\\u5b9a\\u7684\\u6570\\u7ec4\\u603b\\u662f\\u5b58\\u5728\\u591a\\u6570\\u5143\\u7d20\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: [1, 2, 3, 2, 2, 2, 5, 4, 2]\\n\\u8f93\\u51fa: 2\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n1 <= \\u6570\\u7ec4\\u957f\\u5ea6 <= 50000\\n```\\n\\n \\n\"}]}','green','2020-08-12 13:19:15'),(136,'剑指 Offer 38. 字符串的排列','\n输入一个字符串，打印出该字符串中字符的所有排列。\n\n \n\n你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。\n\n \n\n**示例:**\n\n```\n输入：s = \"abc\"\n输出：[\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\n```\n\n \n\n**限制：**\n\n```\n1 <= s 的长度 <= 8\n```\n','<p><br></p><p>输入一个字符串，打印出该字符串中字符的所有排列。</p><p><br></p><p> </p><p><br></p><p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入：s = \"abc\"</p><p>输出：[\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>1 &lt;= s 的长度 &lt;= 8</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\uff0c\\u6253\\u5370\\u51fa\\u8be5\\u5b57\\u7b26\\u4e32\\u4e2d\\u5b57\\u7b26\\u7684\\u6240\\u6709\\u6392\\u5217\\u3002\\n\\n \\n\\n\\u4f60\\u53ef\\u4ee5\\u4ee5\\u4efb\\u610f\\u987a\\u5e8f\\u8fd4\\u56de\\u8fd9\\u4e2a\\u5b57\\u7b26\\u4e32\\u6570\\u7ec4\\uff0c\\u4f46\\u91cc\\u9762\\u4e0d\\u80fd\\u6709\\u91cd\\u590d\\u5143\\u7d20\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165\\uff1as = \\\"abc\\\"\\n\\u8f93\\u51fa\\uff1a[\\\"abc\\\",\\\"acb\\\",\\\"bac\\\",\\\"bca\\\",\\\"cab\\\",\\\"cba\\\"]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n1 <= s \\u7684\\u957f\\u5ea6 <= 8\\n```\\n\"}]}','yellow','2020-08-12 13:19:26'),(137,'剑指 Offer 37. 序列化二叉树','\n请实现两个函数，分别用来序列化和反序列化二叉树。\n\n**示例:** \n\n```\n你可以将以下二叉树：\n\n    1\n   /  \\\n  2   3\n      /  \\\n     4   5\n\n序列化为 \"[1,2,3,null,null,4,5]\"\n```\n','<p><br></p><p>请实现两个函数，分别用来序列化和反序列化二叉树。</p><p><br></p><p>**示例:** </p><p><br></p><p>```</p><p>你可以将以下二叉树：</p><p><br></p><p>    1</p><p>   /  \\</p><p>  2   3</p><p>      /  \\</p><p>     4   5</p><p><br></p><p>序列化为 \"[1,2,3,null,null,4,5]\"</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u5b9e\\u73b0\\u4e24\\u4e2a\\u51fd\\u6570\\uff0c\\u5206\\u522b\\u7528\\u6765\\u5e8f\\u5217\\u5316\\u548c\\u53cd\\u5e8f\\u5217\\u5316\\u4e8c\\u53c9\\u6811\\u3002\\n\\n**\\u793a\\u4f8b:** \\n\\n```\\n\\u4f60\\u53ef\\u4ee5\\u5c06\\u4ee5\\u4e0b\\u4e8c\\u53c9\\u6811\\uff1a\\n\\n    1\\n   /  \\\\\\n  2   3\\n      /  \\\\\\n     4   5\\n\\n\\u5e8f\\u5217\\u5316\\u4e3a \\\"[1,2,3,null,null,4,5]\\\"\\n```\\n\"}]}','red','2020-08-12 13:20:11'),(138,'剑指 Offer 36. 二叉搜索树与双向链表','输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。\n\n \n\n为了让您更好地理解问题，以下面的二叉搜索树为例：\n\n \n\n![img](https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png)\n\n \n\n我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。\n\n下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。\n\n \n\n![img](https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png)\n\n \n\n特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。\n\n \n','<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p><p><br></p><p> </p><p><br></p><p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p><p><br></p><p> </p><p><br></p><p>![img](https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png)</p><p><br></p><p> </p><p><br></p><p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p><p><br></p><p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p><p><br></p><p> </p><p><br></p><p>![img](https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png)</p><p><br></p><p> </p><p><br></p><p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p><p><br></p><p> </p>','{\"ops\": [{\"insert\": \"\\u8f93\\u5165\\u4e00\\u68f5\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\uff0c\\u5c06\\u8be5\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u8f6c\\u6362\\u6210\\u4e00\\u4e2a\\u6392\\u5e8f\\u7684\\u5faa\\u73af\\u53cc\\u5411\\u94fe\\u8868\\u3002\\u8981\\u6c42\\u4e0d\\u80fd\\u521b\\u5efa\\u4efb\\u4f55\\u65b0\\u7684\\u8282\\u70b9\\uff0c\\u53ea\\u80fd\\u8c03\\u6574\\u6811\\u4e2d\\u8282\\u70b9\\u6307\\u9488\\u7684\\u6307\\u5411\\u3002\\n\\n \\n\\n\\u4e3a\\u4e86\\u8ba9\\u60a8\\u66f4\\u597d\\u5730\\u7406\\u89e3\\u95ee\\u9898\\uff0c\\u4ee5\\u4e0b\\u9762\\u7684\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u4e3a\\u4f8b\\uff1a\\n\\n \\n\\n![img](https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png)\\n\\n \\n\\n\\u6211\\u4eec\\u5e0c\\u671b\\u5c06\\u8fd9\\u4e2a\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u8f6c\\u5316\\u4e3a\\u53cc\\u5411\\u5faa\\u73af\\u94fe\\u8868\\u3002\\u94fe\\u8868\\u4e2d\\u7684\\u6bcf\\u4e2a\\u8282\\u70b9\\u90fd\\u6709\\u4e00\\u4e2a\\u524d\\u9a71\\u548c\\u540e\\u7ee7\\u6307\\u9488\\u3002\\u5bf9\\u4e8e\\u53cc\\u5411\\u5faa\\u73af\\u94fe\\u8868\\uff0c\\u7b2c\\u4e00\\u4e2a\\u8282\\u70b9\\u7684\\u524d\\u9a71\\u662f\\u6700\\u540e\\u4e00\\u4e2a\\u8282\\u70b9\\uff0c\\u6700\\u540e\\u4e00\\u4e2a\\u8282\\u70b9\\u7684\\u540e\\u7ee7\\u662f\\u7b2c\\u4e00\\u4e2a\\u8282\\u70b9\\u3002\\n\\n\\u4e0b\\u56fe\\u5c55\\u793a\\u4e86\\u4e0a\\u9762\\u7684\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u8f6c\\u5316\\u6210\\u7684\\u94fe\\u8868\\u3002\\u201chead\\u201d \\u8868\\u793a\\u6307\\u5411\\u94fe\\u8868\\u4e2d\\u6709\\u6700\\u5c0f\\u5143\\u7d20\\u7684\\u8282\\u70b9\\u3002\\n\\n \\n\\n![img](https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png)\\n\\n \\n\\n\\u7279\\u522b\\u5730\\uff0c\\u6211\\u4eec\\u5e0c\\u671b\\u53ef\\u4ee5\\u5c31\\u5730\\u5b8c\\u6210\\u8f6c\\u6362\\u64cd\\u4f5c\\u3002\\u5f53\\u8f6c\\u5316\\u5b8c\\u6210\\u4ee5\\u540e\\uff0c\\u6811\\u4e2d\\u8282\\u70b9\\u7684\\u5de6\\u6307\\u9488\\u9700\\u8981\\u6307\\u5411\\u524d\\u9a71\\uff0c\\u6811\\u4e2d\\u8282\\u70b9\\u7684\\u53f3\\u6307\\u9488\\u9700\\u8981\\u6307\\u5411\\u540e\\u7ee7\\u3002\\u8fd8\\u9700\\u8981\\u8fd4\\u56de\\u94fe\\u8868\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u8282\\u70b9\\u7684\\u6307\\u9488\\u3002\\n\\n \\n\"}]}','yellow','2020-08-12 13:20:43'),(139,'剑指 Offer 35. 复杂链表的复制','\n请实现 `copyRandomList` 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 `next` 指针指向下一个节点，还有一个 `random` 指针指向链表中的任意节点或者 `null`。\n\n \n\n**示例 1：**\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png)\n\n```\n输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]\n```\n\n**示例 2：**\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png)\n\n```\n输入：head = [[1,1],[2,1]]\n输出：[[1,1],[2,1]]\n```\n\n**示例 3：**\n\n**![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png)**\n\n```\n输入：head = [[3,null],[3,0],[3,null]]\n输出：[[3,null],[3,0],[3,null]]\n```\n\n**示例 4：**\n\n```\n输入：head = []\n输出：[]\n解释：给定的链表为空（空指针），因此返回 null。\n```\n\n \n\n**提示：**\n\n- `-10000 <= Node.val <= 10000`\n- `Node.random` 为空（null）或指向链表中的节点。\n- 节点数目不超过 1000 。\n\n','<p><br></p><p>请实现 `copyRandomList` 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 `next` 指针指向下一个节点，还有一个 `random` 指针指向链表中的任意节点或者 `null`。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png)</p><p><br></p><p>```</p><p>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</p><p>输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png)</p><p><br></p><p>```</p><p>输入：head = [[1,1],[2,1]]</p><p>输出：[[1,1],[2,1]]</p><p>```</p><p><br></p><p>**示例 3：**</p><p><br></p><p>**![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png)**</p><p><br></p><p>```</p><p>输入：head = [[3,null],[3,0],[3,null]]</p><p>输出：[[3,null],[3,0],[3,null]]</p><p>```</p><p><br></p><p>**示例 4：**</p><p><br></p><p>```</p><p>输入：head = []</p><p>输出：[]</p><p>解释：给定的链表为空（空指针），因此返回 null。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `-10000 &lt;= Node.val &lt;= 10000`</p><p>- `Node.random` 为空（null）或指向链表中的节点。</p><p>- 节点数目不超过 1000 。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u5b9e\\u73b0 `copyRandomList` \\u51fd\\u6570\\uff0c\\u590d\\u5236\\u4e00\\u4e2a\\u590d\\u6742\\u94fe\\u8868\\u3002\\u5728\\u590d\\u6742\\u94fe\\u8868\\u4e2d\\uff0c\\u6bcf\\u4e2a\\u8282\\u70b9\\u9664\\u4e86\\u6709\\u4e00\\u4e2a `next` \\u6307\\u9488\\u6307\\u5411\\u4e0b\\u4e00\\u4e2a\\u8282\\u70b9\\uff0c\\u8fd8\\u6709\\u4e00\\u4e2a `random` \\u6307\\u9488\\u6307\\u5411\\u94fe\\u8868\\u4e2d\\u7684\\u4efb\\u610f\\u8282\\u70b9\\u6216\\u8005 `null`\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png)\\n\\n```\\n\\u8f93\\u5165\\uff1ahead = [[7,null],[13,0],[11,4],[10,2],[1,0]]\\n\\u8f93\\u51fa\\uff1a[[7,null],[13,0],[11,4],[10,2],[1,0]]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png)\\n\\n```\\n\\u8f93\\u5165\\uff1ahead = [[1,1],[2,1]]\\n\\u8f93\\u51fa\\uff1a[[1,1],[2,1]]\\n```\\n\\n**\\u793a\\u4f8b 3\\uff1a**\\n\\n**![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png)**\\n\\n```\\n\\u8f93\\u5165\\uff1ahead = [[3,null],[3,0],[3,null]]\\n\\u8f93\\u51fa\\uff1a[[3,null],[3,0],[3,null]]\\n```\\n\\n**\\u793a\\u4f8b 4\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1ahead = []\\n\\u8f93\\u51fa\\uff1a[]\\n\\u89e3\\u91ca\\uff1a\\u7ed9\\u5b9a\\u7684\\u94fe\\u8868\\u4e3a\\u7a7a\\uff08\\u7a7a\\u6307\\u9488\\uff09\\uff0c\\u56e0\\u6b64\\u8fd4\\u56de null\\u3002\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `-10000 <= Node.val <= 10000`\\n- `Node.random` \\u4e3a\\u7a7a\\uff08null\\uff09\\u6216\\u6307\\u5411\\u94fe\\u8868\\u4e2d\\u7684\\u8282\\u70b9\\u3002\\n- \\u8282\\u70b9\\u6570\\u76ee\\u4e0d\\u8d85\\u8fc7 1000 \\u3002\\n\\n\"}]}','yellow','2020-08-12 13:20:57'),(140,'剑指 Offer 34. 二叉树中和为某一值的路径','输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。\n\n \n\n**示例:**\n给定如下二叉树，以及目标和 `sum = 22`，\n\n```\n              5\n             /   \\\n           4      8\n          /      /   \\\n        11   13   4\n        /  \\         /  \\\n      7    2      5   1\n```\n\n返回:\n\n```\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n```\n\n \n\n**提示：**\n\n1. `节点总数 <= 10000`\n\n','<p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p>给定如下二叉树，以及目标和 `sum = 22`，</p><p><br></p><p>```</p><p>              5</p><p>             /   \\</p><p>           4      8</p><p>          /      /   \\</p><p>        11   13   4</p><p>        /  \\         /  \\</p><p>      7    2      5   1</p><p>```</p><p><br></p><p>返回:</p><p><br></p><p>```</p><p>[</p><p>   [5,4,11,2],</p><p>   [5,8,4,5]</p><p>]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. `节点总数 &lt;= 10000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u8f93\\u5165\\u4e00\\u68f5\\u4e8c\\u53c9\\u6811\\u548c\\u4e00\\u4e2a\\u6574\\u6570\\uff0c\\u6253\\u5370\\u51fa\\u4e8c\\u53c9\\u6811\\u4e2d\\u8282\\u70b9\\u503c\\u7684\\u548c\\u4e3a\\u8f93\\u5165\\u6574\\u6570\\u7684\\u6240\\u6709\\u8def\\u5f84\\u3002\\u4ece\\u6811\\u7684\\u6839\\u8282\\u70b9\\u5f00\\u59cb\\u5f80\\u4e0b\\u4e00\\u76f4\\u5230\\u53f6\\u8282\\u70b9\\u6240\\u7ecf\\u8fc7\\u7684\\u8282\\u70b9\\u5f62\\u6210\\u4e00\\u6761\\u8def\\u5f84\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\u7ed9\\u5b9a\\u5982\\u4e0b\\u4e8c\\u53c9\\u6811\\uff0c\\u4ee5\\u53ca\\u76ee\\u6807\\u548c `sum = 22`\\uff0c\\n\\n```\\n              5\\n             /   \\\\\\n           4      8\\n          /      /   \\\\\\n        11   13   4\\n        /  \\\\         /  \\\\\\n      7    2      5   1\\n```\\n\\n\\u8fd4\\u56de:\\n\\n```\\n[\\n   [5,4,11,2],\\n   [5,8,4,5]\\n]\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. `\\u8282\\u70b9\\u603b\\u6570 <= 10000`\\n\\n\"}]}','yellow','2020-08-12 13:22:31'),(141,'剑指 Offer 33. 二叉搜索树的后序遍历序列','\n输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 `true`，否则返回 `false`。假设输入的数组的任意两个数字都互不相同。\n\n \n\n参考以下这颗二叉搜索树：\n\n```\n     5\n    /  \\\n   2   6\n  /  \\\n 1   3\n```\n\n**示例 1：**\n\n```\n输入: [1,6,3,2,5]\n输出: false\n```\n\n**示例 2：**\n\n```\n输入: [1,3,2,6,5]\n输出: true\n```\n\n \n\n**提示：**\n\n1. `数组长度 <= 1000`\n\n','<p><br></p><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 `true`，否则返回 `false`。假设输入的数组的任意两个数字都互不相同。</p><p><br></p><p> </p><p><br></p><p>参考以下这颗二叉搜索树：</p><p><br></p><p>```</p><p>     5</p><p>    /  \\</p><p>   2   6</p><p>  /  \\</p><p> 1   3</p><p>```</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: [1,6,3,2,5]</p><p>输出: false</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入: [1,3,2,6,5]</p><p>输出: true</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. `数组长度 &lt;= 1000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u6574\\u6570\\u6570\\u7ec4\\uff0c\\u5224\\u65ad\\u8be5\\u6570\\u7ec4\\u662f\\u4e0d\\u662f\\u67d0\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\u7684\\u540e\\u5e8f\\u904d\\u5386\\u7ed3\\u679c\\u3002\\u5982\\u679c\\u662f\\u5219\\u8fd4\\u56de `true`\\uff0c\\u5426\\u5219\\u8fd4\\u56de `false`\\u3002\\u5047\\u8bbe\\u8f93\\u5165\\u7684\\u6570\\u7ec4\\u7684\\u4efb\\u610f\\u4e24\\u4e2a\\u6570\\u5b57\\u90fd\\u4e92\\u4e0d\\u76f8\\u540c\\u3002\\n\\n \\n\\n\\u53c2\\u8003\\u4ee5\\u4e0b\\u8fd9\\u9897\\u4e8c\\u53c9\\u641c\\u7d22\\u6811\\uff1a\\n\\n```\\n     5\\n    /  \\\\\\n   2   6\\n  /  \\\\\\n 1   3\\n```\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: [1,6,3,2,5]\\n\\u8f93\\u51fa: false\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165: [1,3,2,6,5]\\n\\u8f93\\u51fa: true\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. `\\u6570\\u7ec4\\u957f\\u5ea6 <= 1000`\\n\\n\"}]}','yellow','2020-08-12 13:23:00'),(142,'剑指 Offer 32 - III. 从上到下打印二叉树 III','请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。\n\n \n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   /  \\\n  9  20\n      /   \\\n    15   7\n```\n\n返回其层次遍历结果：\n\n```\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n```\n\n \n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n\n','<p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p><p><br></p><p> </p><p><br></p><p>例如:</p><p>给定二叉树: `[3,9,20,null,null,15,7]`,</p><p><br></p><p>```</p><p>    3</p><p>   /  \\</p><p>  9  20</p><p>      /   \\</p><p>    15   7</p><p>```</p><p><br></p><p>返回其层次遍历结果：</p><p><br></p><p>```</p><p>[</p><p>  [3],</p><p>  [20,9],</p><p>  [15,7]</p><p>]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. `节点总数 &lt;= 1000`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u8bf7\\u5b9e\\u73b0\\u4e00\\u4e2a\\u51fd\\u6570\\u6309\\u7167\\u4e4b\\u5b57\\u5f62\\u987a\\u5e8f\\u6253\\u5370\\u4e8c\\u53c9\\u6811\\uff0c\\u5373\\u7b2c\\u4e00\\u884c\\u6309\\u7167\\u4ece\\u5de6\\u5230\\u53f3\\u7684\\u987a\\u5e8f\\u6253\\u5370\\uff0c\\u7b2c\\u4e8c\\u5c42\\u6309\\u7167\\u4ece\\u53f3\\u5230\\u5de6\\u7684\\u987a\\u5e8f\\u6253\\u5370\\uff0c\\u7b2c\\u4e09\\u884c\\u518d\\u6309\\u7167\\u4ece\\u5de6\\u5230\\u53f3\\u7684\\u987a\\u5e8f\\u6253\\u5370\\uff0c\\u5176\\u4ed6\\u884c\\u4ee5\\u6b64\\u7c7b\\u63a8\\u3002\\n\\n \\n\\n\\u4f8b\\u5982:\\n\\u7ed9\\u5b9a\\u4e8c\\u53c9\\u6811: `[3,9,20,null,null,15,7]`,\\n\\n```\\n    3\\n   /  \\\\\\n  9  20\\n      /   \\\\\\n    15   7\\n```\\n\\n\\u8fd4\\u56de\\u5176\\u5c42\\u6b21\\u904d\\u5386\\u7ed3\\u679c\\uff1a\\n\\n```\\n[\\n  [3],\\n  [20,9],\\n  [15,7]\\n]\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. `\\u8282\\u70b9\\u603b\\u6570 <= 1000`\\n\\n\\n\"}]}','yellow','2020-08-12 13:23:26'),(143,'剑指 Offer 32 - II. 从上到下打印二叉树 II','\n从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。\n\n \n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   /  \\\n  9  20\n     /   \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n```\n\n \n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n','<p><br></p><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p><p><br></p><p> </p><p><br></p><p>例如:</p><p>给定二叉树: `[3,9,20,null,null,15,7]`,</p><p><br></p><p>```</p><p>    3</p><p>   /  \\</p><p>  9  20</p><p>     /   \\</p><p>   15   7</p><p>```</p><p><br></p><p>返回其层次遍历结果：</p><p><br></p><p>```</p><p>[</p><p>  [3],</p><p>  [9,20],</p><p>  [15,7]</p><p>]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. `节点总数 &lt;= 1000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u4ece\\u4e0a\\u5230\\u4e0b\\u6309\\u5c42\\u6253\\u5370\\u4e8c\\u53c9\\u6811\\uff0c\\u540c\\u4e00\\u5c42\\u7684\\u8282\\u70b9\\u6309\\u4ece\\u5de6\\u5230\\u53f3\\u7684\\u987a\\u5e8f\\u6253\\u5370\\uff0c\\u6bcf\\u4e00\\u5c42\\u6253\\u5370\\u5230\\u4e00\\u884c\\u3002\\n\\n \\n\\n\\u4f8b\\u5982:\\n\\u7ed9\\u5b9a\\u4e8c\\u53c9\\u6811: `[3,9,20,null,null,15,7]`,\\n\\n```\\n    3\\n   /  \\\\\\n  9  20\\n     /   \\\\\\n   15   7\\n```\\n\\n\\u8fd4\\u56de\\u5176\\u5c42\\u6b21\\u904d\\u5386\\u7ed3\\u679c\\uff1a\\n\\n```\\n[\\n  [3],\\n  [9,20],\\n  [15,7]\\n]\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. `\\u8282\\u70b9\\u603b\\u6570 <= 1000`\\n\\n\"}]}','green','2020-08-12 13:23:55'),(144,'剑指 Offer 32 - I. 从上到下打印二叉树','从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。\n\n \n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   /  \\\n  9  20\n     /   \\\n   15   7\n```\n\n返回：\n\n```\n[3,9,20,15,7]\n```\n\n \n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n\n','<p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p><p><br></p><p> </p><p><br></p><p>例如:</p><p>给定二叉树: `[3,9,20,null,null,15,7]`,</p><p><br></p><p>```</p><p>    3</p><p>   /  \\</p><p>  9  20</p><p>     /   \\</p><p>   15   7</p><p>```</p><p><br></p><p>返回：</p><p><br></p><p>```</p><p>[3,9,20,15,7]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. `节点总数 &lt;= 1000`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\u4ece\\u4e0a\\u5230\\u4e0b\\u6253\\u5370\\u51fa\\u4e8c\\u53c9\\u6811\\u7684\\u6bcf\\u4e2a\\u8282\\u70b9\\uff0c\\u540c\\u4e00\\u5c42\\u7684\\u8282\\u70b9\\u6309\\u7167\\u4ece\\u5de6\\u5230\\u53f3\\u7684\\u987a\\u5e8f\\u6253\\u5370\\u3002\\n\\n \\n\\n\\u4f8b\\u5982:\\n\\u7ed9\\u5b9a\\u4e8c\\u53c9\\u6811: `[3,9,20,null,null,15,7]`,\\n\\n```\\n    3\\n   /  \\\\\\n  9  20\\n     /   \\\\\\n   15   7\\n```\\n\\n\\u8fd4\\u56de\\uff1a\\n\\n```\\n[3,9,20,15,7]\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. `\\u8282\\u70b9\\u603b\\u6570 <= 1000`\\n\\n\\n\"}]}','yellow','2020-08-12 13:24:17'),(145,'剑指 Offer 31. 栈的压入、弹出序列','\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。\n\n \n\n**示例 1：**\n\n```\n输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n```\n\n**示例 2：**\n\n```\n输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出：false\n解释：1 不能在 2 之前弹出。\n```\n\n \n\n**提示：**\n\n1. `0 <= pushed.length == popped.length <= 1000`\n2. `0 <= pushed[i], popped[i] < 1000`\n3. `pushed` 是 `popped` 的排列。\n','<p><br></p><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</p><p>输出：true</p><p>解释：我们可以按以下顺序执行：</p><p>push(1), push(2), push(3), push(4), pop() -&gt; 4,</p><p>push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]</p><p>输出：false</p><p>解释：1 不能在 2 之前弹出。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. `0 &lt;= pushed.length == popped.length &lt;= 1000`</p><p>2. `0 &lt;= pushed[i], popped[i] &lt; 1000`</p><p>3. `pushed` 是 `popped` 的排列。</p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e24\\u4e2a\\u6574\\u6570\\u5e8f\\u5217\\uff0c\\u7b2c\\u4e00\\u4e2a\\u5e8f\\u5217\\u8868\\u793a\\u6808\\u7684\\u538b\\u5165\\u987a\\u5e8f\\uff0c\\u8bf7\\u5224\\u65ad\\u7b2c\\u4e8c\\u4e2a\\u5e8f\\u5217\\u662f\\u5426\\u4e3a\\u8be5\\u6808\\u7684\\u5f39\\u51fa\\u987a\\u5e8f\\u3002\\u5047\\u8bbe\\u538b\\u5165\\u6808\\u7684\\u6240\\u6709\\u6570\\u5b57\\u5747\\u4e0d\\u76f8\\u7b49\\u3002\\u4f8b\\u5982\\uff0c\\u5e8f\\u5217 {1,2,3,4,5} \\u662f\\u67d0\\u6808\\u7684\\u538b\\u6808\\u5e8f\\u5217\\uff0c\\u5e8f\\u5217 {4,5,3,2,1} \\u662f\\u8be5\\u538b\\u6808\\u5e8f\\u5217\\u5bf9\\u5e94\\u7684\\u4e00\\u4e2a\\u5f39\\u51fa\\u5e8f\\u5217\\uff0c\\u4f46 {4,3,5,1,2} \\u5c31\\u4e0d\\u53ef\\u80fd\\u662f\\u8be5\\u538b\\u6808\\u5e8f\\u5217\\u7684\\u5f39\\u51fa\\u5e8f\\u5217\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1apushed = [1,2,3,4,5], popped = [4,5,3,2,1]\\n\\u8f93\\u51fa\\uff1atrue\\n\\u89e3\\u91ca\\uff1a\\u6211\\u4eec\\u53ef\\u4ee5\\u6309\\u4ee5\\u4e0b\\u987a\\u5e8f\\u6267\\u884c\\uff1a\\npush(1), push(2), push(3), push(4), pop() -> 4,\\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1apushed = [1,2,3,4,5], popped = [4,3,5,1,2]\\n\\u8f93\\u51fa\\uff1afalse\\n\\u89e3\\u91ca\\uff1a1 \\u4e0d\\u80fd\\u5728 2 \\u4e4b\\u524d\\u5f39\\u51fa\\u3002\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. `0 <= pushed.length == popped.length <= 1000`\\n2. `0 <= pushed[i], popped[i] < 1000`\\n3. `pushed` \\u662f `popped` \\u7684\\u6392\\u5217\\u3002\\n\"}]}','yellow','2020-08-12 13:24:42'),(146,'剑指 Offer 30. 包含min函数的栈','\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n \n\n**示例:**\n\n```\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();      --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n \n\n**提示：**\n\n1. 各函数的调用总次数不超过 20000 次\n\n \n','<p><br></p><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>MinStack minStack = new MinStack();</p><p>minStack.push(-2);</p><p>minStack.push(0);</p><p>minStack.push(-3);</p><p>minStack.min();   --&gt; 返回 -3.</p><p>minStack.pop();</p><p>minStack.top();      --&gt; 返回 0.</p><p>minStack.min();   --&gt; 返回 -2.</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. 各函数的调用总次数不超过 20000 次</p><p><br></p><p> </p>','{\"ops\": [{\"insert\": \"\\n\\u5b9a\\u4e49\\u6808\\u7684\\u6570\\u636e\\u7ed3\\u6784\\uff0c\\u8bf7\\u5728\\u8be5\\u7c7b\\u578b\\u4e2d\\u5b9e\\u73b0\\u4e00\\u4e2a\\u80fd\\u591f\\u5f97\\u5230\\u6808\\u7684\\u6700\\u5c0f\\u5143\\u7d20\\u7684 min \\u51fd\\u6570\\u5728\\u8be5\\u6808\\u4e2d\\uff0c\\u8c03\\u7528 min\\u3001push \\u53ca pop \\u7684\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u90fd\\u662f O(1)\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\nMinStack minStack = new MinStack();\\nminStack.push(-2);\\nminStack.push(0);\\nminStack.push(-3);\\nminStack.min();   --> \\u8fd4\\u56de -3.\\nminStack.pop();\\nminStack.top();      --> \\u8fd4\\u56de 0.\\nminStack.min();   --> \\u8fd4\\u56de -2.\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. \\u5404\\u51fd\\u6570\\u7684\\u8c03\\u7528\\u603b\\u6b21\\u6570\\u4e0d\\u8d85\\u8fc7 20000 \\u6b21\\n\\n \\n\"}]}','green','2020-08-12 13:24:52'),(147,'剑指 Offer 29. 顺时针打印矩阵','\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n\n \n\n**示例 1：**\n\n```\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[1,2,3,6,9,8,7,4,5]\n```\n\n**示例 2：**\n\n```\n输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n```\n\n \n\n**限制：**\n\n- `0 <= matrix.length <= 100`\n- `0 <= matrix[i].length <= 100`\n\n','<p><br></p><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</p><p>输出：[1,2,3,6,9,8,7,4,5]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</p><p>输出：[1,2,3,4,8,12,11,10,9,5,6,7]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>- `0 &lt;= matrix.length &lt;= 100`</p><p>- `0 &lt;= matrix[i].length &lt;= 100`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u77e9\\u9635\\uff0c\\u6309\\u7167\\u4ece\\u5916\\u5411\\u91cc\\u4ee5\\u987a\\u65f6\\u9488\\u7684\\u987a\\u5e8f\\u4f9d\\u6b21\\u6253\\u5370\\u51fa\\u6bcf\\u4e00\\u4e2a\\u6570\\u5b57\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1amatrix = [[1,2,3],[4,5,6],[7,8,9]]\\n\\u8f93\\u51fa\\uff1a[1,2,3,6,9,8,7,4,5]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1amatrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\\n\\u8f93\\u51fa\\uff1a[1,2,3,4,8,12,11,10,9,5,6,7]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n- `0 <= matrix.length <= 100`\\n- `0 <= matrix[i].length <= 100`\\n\\n\"}]}','green','2020-08-12 13:25:05'),(148,'剑指 Offer 28. 对称的二叉树','请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。\n\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n```\n    1\n   /   \\\n  2      2\n / \\      / \\\n3  4   4  3\n```\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n```\n    1\n   /  \\\n  2   2\n   \\    \\\n   3    3\n\n```\n\n**示例 1：**\n\n```\n输入：root = [1,2,2,3,4,4,3]\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：root = [1,2,2,null,3,null,3]\n输出：false\n```\n\n \n\n**限制：**\n\n```\n0 <= 节点个数 <= 1000\n```\n','<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p><p><br></p><p>例如，二叉树&nbsp;[1,2,2,3,4,4,3] 是对称的。</p><p>```</p><p>&nbsp; &nbsp; 1</p><p>&nbsp; &nbsp;/   \\</p><p> &nbsp;2    &nbsp; 2</p><p>&nbsp;/ \\      / \\</p><p>3 &nbsp;4   4 &nbsp;3</p><p>```</p><p>但是下面这个&nbsp;[1,2,2,null,3,null,3] 则不是镜像对称的:</p><p>```</p><p>&nbsp; &nbsp; 1</p><p>&nbsp; &nbsp;/  \\</p><p>&nbsp; 2 &nbsp; 2</p><p>&nbsp; &nbsp;\\  &nbsp; \\</p><p>&nbsp; &nbsp;3 &nbsp; &nbsp;3</p><p><br></p><p>```</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：root = [1,2,2,3,4,4,3]</p><p>输出：true</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：root = [1,2,2,null,3,null,3]</p><p>输出：false</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 节点个数 &lt;= 1000</p><p>```</p>','{\"ops\": [{\"insert\": \"\\u8bf7\\u5b9e\\u73b0\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u7528\\u6765\\u5224\\u65ad\\u4e00\\u68f5\\u4e8c\\u53c9\\u6811\\u662f\\u4e0d\\u662f\\u5bf9\\u79f0\\u7684\\u3002\\u5982\\u679c\\u4e00\\u68f5\\u4e8c\\u53c9\\u6811\\u548c\\u5b83\\u7684\\u955c\\u50cf\\u4e00\\u6837\\uff0c\\u90a3\\u4e48\\u5b83\\u662f\\u5bf9\\u79f0\\u7684\\u3002\\n\\n\\u4f8b\\u5982\\uff0c\\u4e8c\\u53c9\\u6811\\u00a0[1,2,2,3,4,4,3] \\u662f\\u5bf9\\u79f0\\u7684\\u3002\\n```\\n\\u00a0 \\u00a0 1\\n\\u00a0 \\u00a0/   \\\\\\n \\u00a02    \\u00a0 2\\n\\u00a0/ \\\\      / \\\\\\n3 \\u00a04   4 \\u00a03\\n```\\n\\u4f46\\u662f\\u4e0b\\u9762\\u8fd9\\u4e2a\\u00a0[1,2,2,null,3,null,3] \\u5219\\u4e0d\\u662f\\u955c\\u50cf\\u5bf9\\u79f0\\u7684:\\n```\\n\\u00a0 \\u00a0 1\\n\\u00a0 \\u00a0/  \\\\\\n\\u00a0 2 \\u00a0 2\\n\\u00a0 \\u00a0\\\\  \\u00a0 \\\\\\n\\u00a0 \\u00a03 \\u00a0 \\u00a03\\n\\n```\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aroot = [1,2,2,3,4,4,3]\\n\\u8f93\\u51fa\\uff1atrue\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aroot = [1,2,2,null,3,null,3]\\n\\u8f93\\u51fa\\uff1afalse\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u8282\\u70b9\\u4e2a\\u6570 <= 1000\\n```\\n\"}]}','green','2020-08-12 13:27:47'),(149,'剑指 Offer 27. 二叉树的镜像','\n请完成一个函数，输入一个二叉树，该函数输出它的镜像。\n\n例如输入：\n```\n      4\n    /     \\\n  2       7\n /  \\      / \\\n1   3  6   9\n\n```\n镜像输出：\n\n```\n     4\n   /    \\\n  7      2\n / \\      / \\\n9   6  3   1\n```\n \n\n**示例 1：**\n\n```\n输入：root = [4,2,7,1,3,6,9]\n输出：[4,7,2,9,6,3,1]\n```\n\n \n\n**限制：**\n\n```\n0 <= 节点个数 <= 1000\n```\n\n','<p><br></p><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><p><br></p><p>例如输入：</p><p>```</p><p>&nbsp; &nbsp;  &nbsp;4</p><p>&nbsp;  &nbsp;/ &nbsp;   \\</p><p>&nbsp; 2 &nbsp; &nbsp;   7</p><p>&nbsp;/  \\    &nbsp; / \\</p><p>1 &nbsp; 3  6 &nbsp; 9</p><p><br></p><p>```</p><p>镜像输出：</p><p><br></p><p>```</p><p>&nbsp; &nbsp; &nbsp;4</p><p>&nbsp; &nbsp;/ &nbsp;  \\</p><p>&nbsp; 7 &nbsp; &nbsp;  2</p><p>&nbsp;/ \\    &nbsp; / \\</p><p>9 &nbsp; 6  3&nbsp; &nbsp;1</p><p>```</p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：root = [4,2,7,1,3,6,9]</p><p>输出：[4,7,2,9,6,3,1]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 节点个数 &lt;= 1000</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u5b8c\\u6210\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u8f93\\u5165\\u4e00\\u4e2a\\u4e8c\\u53c9\\u6811\\uff0c\\u8be5\\u51fd\\u6570\\u8f93\\u51fa\\u5b83\\u7684\\u955c\\u50cf\\u3002\\n\\n\\u4f8b\\u5982\\u8f93\\u5165\\uff1a\\n```\\n\\u00a0 \\u00a0  \\u00a04\\n\\u00a0  \\u00a0/ \\u00a0   \\\\\\n\\u00a0 2 \\u00a0 \\u00a0   7\\n\\u00a0/  \\\\    \\u00a0 / \\\\\\n1 \\u00a0 3  6 \\u00a0 9\\n\\n```\\n\\u955c\\u50cf\\u8f93\\u51fa\\uff1a\\n\\n```\\n\\u00a0 \\u00a0 \\u00a04\\n\\u00a0 \\u00a0/ \\u00a0  \\\\\\n\\u00a0 7 \\u00a0 \\u00a0  2\\n\\u00a0/ \\\\    \\u00a0 / \\\\\\n9 \\u00a0 6  3\\u00a0 \\u00a01\\n```\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aroot = [4,2,7,1,3,6,9]\\n\\u8f93\\u51fa\\uff1a[4,7,2,9,6,3,1]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u8282\\u70b9\\u4e2a\\u6570 <= 1000\\n```\\n\\n\"}]}','green','2020-08-12 13:30:01'),(150,'剑指 Offer 26. 树的子结构','输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)\n\nB是A的子结构， 即 A中有出现和B相同的结构和节点值。\n\n例如:\n给定的树 A:\n```\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n```\n给定的树 B：\n```\n   4 \n  /\n 1\n```\n返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。\n\n**示例 1：**\n\n```\n输入：A = [1,2,3], B = [3,1]\n输出：false\n```\n\n**示例 2：**\n\n```\n输入：A = [3,4,5,1,2], B = [4,1]\n输出：true\n```\n\n**限制：**\n\n```\n0 <= 节点个数 <= 10000\n```\n\n','<p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p><p><br></p><p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p><p><br></p><p>例如:</p><p>给定的树 A:</p><p>```</p><p>     3</p><p>    / \\</p><p>   4   5</p><p>  / \\</p><p> 1   2</p><p>```</p><p>给定的树 B：</p><p>```</p><p>   4 </p><p>  /</p><p> 1</p><p>```</p><p>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：A = [1,2,3], B = [3,1]</p><p>输出：false</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：A = [3,4,5,1,2], B = [4,1]</p><p>输出：true</p><p>```</p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 节点个数 &lt;= 10000</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u8f93\\u5165\\u4e24\\u68f5\\u4e8c\\u53c9\\u6811A\\u548cB\\uff0c\\u5224\\u65adB\\u662f\\u4e0d\\u662fA\\u7684\\u5b50\\u7ed3\\u6784\\u3002(\\u7ea6\\u5b9a\\u7a7a\\u6811\\u4e0d\\u662f\\u4efb\\u610f\\u4e00\\u4e2a\\u6811\\u7684\\u5b50\\u7ed3\\u6784)\\n\\nB\\u662fA\\u7684\\u5b50\\u7ed3\\u6784\\uff0c \\u5373 A\\u4e2d\\u6709\\u51fa\\u73b0\\u548cB\\u76f8\\u540c\\u7684\\u7ed3\\u6784\\u548c\\u8282\\u70b9\\u503c\\u3002\\n\\n\\u4f8b\\u5982:\\n\\u7ed9\\u5b9a\\u7684\\u6811 A:\\n```\\n     3\\n    / \\\\\\n   4   5\\n  / \\\\\\n 1   2\\n```\\n\\u7ed9\\u5b9a\\u7684\\u6811 B\\uff1a\\n```\\n   4 \\n  /\\n 1\\n```\\n\\u8fd4\\u56de true\\uff0c\\u56e0\\u4e3a B \\u4e0e A \\u7684\\u4e00\\u4e2a\\u5b50\\u6811\\u62e5\\u6709\\u76f8\\u540c\\u7684\\u7ed3\\u6784\\u548c\\u8282\\u70b9\\u503c\\u3002\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aA = [1,2,3], B = [3,1]\\n\\u8f93\\u51fa\\uff1afalse\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aA = [3,4,5,1,2], B = [4,1]\\n\\u8f93\\u51fa\\uff1atrue\\n```\\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u8282\\u70b9\\u4e2a\\u6570 <= 10000\\n```\\n\\n\"}]}','yellow','2020-08-12 13:31:10'),(151,'剑指 Offer 25. 合并两个排序的链表','\n输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。\n\n**示例1：**\n\n```\n输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n```\n\n**限制：**\n\n```\n0 <= 链表长度 <= 1000\n```\n','<p><br></p><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><p><br></p><p>**示例1：**</p><p><br></p><p>```</p><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</p><p>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><p>```</p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 链表长度 &lt;= 1000</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e24\\u4e2a\\u9012\\u589e\\u6392\\u5e8f\\u7684\\u94fe\\u8868\\uff0c\\u5408\\u5e76\\u8fd9\\u4e24\\u4e2a\\u94fe\\u8868\\u5e76\\u4f7f\\u65b0\\u94fe\\u8868\\u4e2d\\u7684\\u8282\\u70b9\\u4ecd\\u7136\\u662f\\u9012\\u589e\\u6392\\u5e8f\\u7684\\u3002\\n\\n**\\u793a\\u4f8b1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a1->2->4, 1->3->4\\n\\u8f93\\u51fa\\uff1a1->1->2->3->4->4\\n```\\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u94fe\\u8868\\u957f\\u5ea6 <= 1000\\n```\\n\"}]}','green','2020-08-12 13:31:30'),(152,'剑指 Offer 24. 反转链表','\n定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n \n\n**示例:**\n\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n\n \n\n**限制：**\n\n```\n0 <= 节点个数 <= 5000\n```\n\n \n','<p><br></p><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>```</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</p><p>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 节点个数 &lt;= 5000</p><p>```</p><p><br></p><p> </p>','{\"ops\": [{\"insert\": \"\\n\\u5b9a\\u4e49\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u8f93\\u5165\\u4e00\\u4e2a\\u94fe\\u8868\\u7684\\u5934\\u8282\\u70b9\\uff0c\\u53cd\\u8f6c\\u8be5\\u94fe\\u8868\\u5e76\\u8f93\\u51fa\\u53cd\\u8f6c\\u540e\\u94fe\\u8868\\u7684\\u5934\\u8282\\u70b9\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n```\\n\\u8f93\\u5165: 1->2->3->4->5->NULL\\n\\u8f93\\u51fa: 5->4->3->2->1->NULL\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u8282\\u70b9\\u4e2a\\u6570 <= 5000\\n```\\n\\n \\n\"}]}','green','2020-08-12 13:31:43'),(153,'剑指 Offer 22. 链表中倒数第k个节点','\n输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。\n\n \n\n**示例：**\n\n```\n给定一个链表: 1->2->3->4->5, 和 k = 2.\n\n返回链表 4->5.\n```\n','<p><br></p><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p><p><br></p><p> </p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</p><p><br></p><p>返回链表 4-&gt;5.</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u94fe\\u8868\\uff0c\\u8f93\\u51fa\\u8be5\\u94fe\\u8868\\u4e2d\\u5012\\u6570\\u7b2ck\\u4e2a\\u8282\\u70b9\\u3002\\u4e3a\\u4e86\\u7b26\\u5408\\u5927\\u591a\\u6570\\u4eba\\u7684\\u4e60\\u60ef\\uff0c\\u672c\\u9898\\u4ece1\\u5f00\\u59cb\\u8ba1\\u6570\\uff0c\\u5373\\u94fe\\u8868\\u7684\\u5c3e\\u8282\\u70b9\\u662f\\u5012\\u6570\\u7b2c1\\u4e2a\\u8282\\u70b9\\u3002\\u4f8b\\u5982\\uff0c\\u4e00\\u4e2a\\u94fe\\u8868\\u67096\\u4e2a\\u8282\\u70b9\\uff0c\\u4ece\\u5934\\u8282\\u70b9\\u5f00\\u59cb\\uff0c\\u5b83\\u4eec\\u7684\\u503c\\u4f9d\\u6b21\\u662f1\\u30012\\u30013\\u30014\\u30015\\u30016\\u3002\\u8fd9\\u4e2a\\u94fe\\u8868\\u7684\\u5012\\u6570\\u7b2c3\\u4e2a\\u8282\\u70b9\\u662f\\u503c\\u4e3a4\\u7684\\u8282\\u70b9\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u7ed9\\u5b9a\\u4e00\\u4e2a\\u94fe\\u8868: 1->2->3->4->5, \\u548c k = 2.\\n\\n\\u8fd4\\u56de\\u94fe\\u8868 4->5.\\n```\\n\"}]}','green','2020-08-12 13:31:53'),(154,'剑指 Offer 21. 调整数组顺序使奇数位于偶数前面','\n输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。\n\n \n\n**示例：**\n\n```\n输入：nums = [1,2,3,4]\n输出：[1,3,2,4] \n注：[3,1,2,4] 也是正确的答案之一。\n```\n\n \n\n**提示：**\n\n1. `1 <= nums.length <= 50000`\n2. `1 <= nums[i] <= 10000`\n\n\n','<p><br></p><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p><p><br></p><p> </p><p><br></p><p>**示例：**</p><p><br></p><p>```</p><p>输入：nums = [1,2,3,4]</p><p>输出：[1,3,2,4] </p><p>注：[3,1,2,4] 也是正确的答案之一。</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>1. `1 &lt;= nums.length &lt;= 50000`</p><p>2. `1 &lt;= nums[i] &lt;= 10000`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u6574\\u6570\\u6570\\u7ec4\\uff0c\\u5b9e\\u73b0\\u4e00\\u4e2a\\u51fd\\u6570\\u6765\\u8c03\\u6574\\u8be5\\u6570\\u7ec4\\u4e2d\\u6570\\u5b57\\u7684\\u987a\\u5e8f\\uff0c\\u4f7f\\u5f97\\u6240\\u6709\\u5947\\u6570\\u4f4d\\u4e8e\\u6570\\u7ec4\\u7684\\u524d\\u534a\\u90e8\\u5206\\uff0c\\u6240\\u6709\\u5076\\u6570\\u4f4d\\u4e8e\\u6570\\u7ec4\\u7684\\u540e\\u534a\\u90e8\\u5206\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1anums = [1,2,3,4]\\n\\u8f93\\u51fa\\uff1a[1,3,2,4] \\n\\u6ce8\\uff1a[3,1,2,4] \\u4e5f\\u662f\\u6b63\\u786e\\u7684\\u7b54\\u6848\\u4e4b\\u4e00\\u3002\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n1. `1 <= nums.length <= 50000`\\n2. `1 <= nums[i] <= 10000`\\n\\n\\n\"}]}','green','2020-08-12 13:32:11'),(155,'剑指 Offer 20. 表示数值的字符串','\n请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串 \"+100\"、\"5e2\"、\"-123\"、\"3.1416\"、\"0123\"都表示数值，但\"12e\"、\"1a3.14\"、\"1.2.3\"、\"+-5\"、\"-1E-16\"及\"12e+5.4\"都不是。\n\n \n','<p><br></p><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串 \"+100\"、\"5e2\"、\"-123\"、\"3.1416\"、\"0123\"都表示数值，但\"12e\"、\"1a3.14\"、\"1.2.3\"、\"+-5\"、\"-1E-16\"及\"12e+5.4\"都不是。</p><p><br></p><p> </p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u5b9e\\u73b0\\u4e00\\u4e2a\\u51fd\\u6570\\u7528\\u6765\\u5224\\u65ad\\u5b57\\u7b26\\u4e32\\u662f\\u5426\\u8868\\u793a\\u6570\\u503c\\uff08\\u5305\\u62ec\\u6574\\u6570\\u548c\\u5c0f\\u6570\\uff09\\u3002\\u4f8b\\u5982\\uff0c\\u5b57\\u7b26\\u4e32 \\\"+100\\\"\\u3001\\\"5e2\\\"\\u3001\\\"-123\\\"\\u3001\\\"3.1416\\\"\\u3001\\\"0123\\\"\\u90fd\\u8868\\u793a\\u6570\\u503c\\uff0c\\u4f46\\\"12e\\\"\\u3001\\\"1a3.14\\\"\\u3001\\\"1.2.3\\\"\\u3001\\\"+-5\\\"\\u3001\\\"-1E-16\\\"\\u53ca\\\"12e+5.4\\\"\\u90fd\\u4e0d\\u662f\\u3002\\n\\n \\n\"}]}','yellow','2020-08-12 13:32:21'),(156,'剑指 Offer 19. 正则表达式匹配','\n请实现一个函数用来匹配包含`\'. \'`和`\'*\'`的正则表达式。模式中的字符`\'.\'`表示任意一个字符，而`\'*\'`表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串`\"aaa\"`与模式`\"a.a\"`和`\"ab*ac*a\"`匹配，但与`\"aa.a\"`和`\"ab*a\"`均不匹配。\n\n**示例 1:**\n\n```\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n**示例 2:**\n\n```\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 \'*\' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 \'a\'。因此，字符串 \"aa\" 可被视为 \'a\' 重复了一次。\n```\n\n**示例 3:**\n\n```\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（\'*\'）任意字符（\'.\'）。\n```\n\n**示例 4:**\n\n```\n输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: 因为 \'*\' 表示零个或多个，这里 \'c\' 为 0 个, \'a\' 被重复一次。因此可以匹配字符串 \"aab\"。\n```\n\n**示例 5:**\n\n```\n输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false\n```\n\n- `s` 可能为空，且只包含从 `a-z` 的小写字母。\n- `p` 可能为空，且只包含从 `a-z` 的小写字母以及字符 `.` 和 `*`，无连续的 `\'*\'`。\n\n','<p><br></p><p>请实现一个函数用来匹配包含`\'. \'`和`\'*\'`的正则表达式。模式中的字符`\'.\'`表示任意一个字符，而`\'*\'`表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串`\"aaa\"`与模式`\"a.a\"`和`\"ab*ac*a\"`匹配，但与`\"aa.a\"`和`\"ab*a\"`均不匹配。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"aa\"</p><p>p = \"a\"</p><p>输出: false</p><p>解释: \"a\" 无法匹配 \"aa\" 整个字符串。</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"aa\"</p><p>p = \"a*\"</p><p>输出: true</p><p>解释: 因为 \'*\' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 \'a\'。因此，字符串 \"aa\" 可被视为 \'a\' 重复了一次。</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"ab\"</p><p>p = \".*\"</p><p>输出: true</p><p>解释: \".*\" 表示可匹配零个或多个（\'*\'）任意字符（\'.\'）。</p><p>```</p><p><br></p><p>**示例 4:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"aab\"</p><p>p = \"c*a*b\"</p><p>输出: true</p><p>解释: 因为 \'*\' 表示零个或多个，这里 \'c\' 为 0 个, \'a\' 被重复一次。因此可以匹配字符串 \"aab\"。</p><p>```</p><p><br></p><p>**示例 5:**</p><p><br></p><p>```</p><p>输入:</p><p>s = \"mississippi\"</p><p>p = \"mis*is*p*.\"</p><p>输出: false</p><p>```</p><p><br></p><p>- `s` 可能为空，且只包含从 `a-z` 的小写字母。</p><p>- `p` 可能为空，且只包含从 `a-z` 的小写字母以及字符 `.` 和 `*`，无连续的 `\'*\'`。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u5b9e\\u73b0\\u4e00\\u4e2a\\u51fd\\u6570\\u7528\\u6765\\u5339\\u914d\\u5305\\u542b`\'. \'`\\u548c`\'*\'`\\u7684\\u6b63\\u5219\\u8868\\u8fbe\\u5f0f\\u3002\\u6a21\\u5f0f\\u4e2d\\u7684\\u5b57\\u7b26`\'.\'`\\u8868\\u793a\\u4efb\\u610f\\u4e00\\u4e2a\\u5b57\\u7b26\\uff0c\\u800c`\'*\'`\\u8868\\u793a\\u5b83\\u524d\\u9762\\u7684\\u5b57\\u7b26\\u53ef\\u4ee5\\u51fa\\u73b0\\u4efb\\u610f\\u6b21\\uff08\\u542b0\\u6b21\\uff09\\u3002\\u5728\\u672c\\u9898\\u4e2d\\uff0c\\u5339\\u914d\\u662f\\u6307\\u5b57\\u7b26\\u4e32\\u7684\\u6240\\u6709\\u5b57\\u7b26\\u5339\\u914d\\u6574\\u4e2a\\u6a21\\u5f0f\\u3002\\u4f8b\\u5982\\uff0c\\u5b57\\u7b26\\u4e32`\\\"aaa\\\"`\\u4e0e\\u6a21\\u5f0f`\\\"a.a\\\"`\\u548c`\\\"ab*ac*a\\\"`\\u5339\\u914d\\uff0c\\u4f46\\u4e0e`\\\"aa.a\\\"`\\u548c`\\\"ab*a\\\"`\\u5747\\u4e0d\\u5339\\u914d\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"aa\\\"\\np = \\\"a\\\"\\n\\u8f93\\u51fa: false\\n\\u89e3\\u91ca: \\\"a\\\" \\u65e0\\u6cd5\\u5339\\u914d \\\"aa\\\" \\u6574\\u4e2a\\u5b57\\u7b26\\u4e32\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"aa\\\"\\np = \\\"a*\\\"\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \\u56e0\\u4e3a \'*\' \\u4ee3\\u8868\\u53ef\\u4ee5\\u5339\\u914d\\u96f6\\u4e2a\\u6216\\u591a\\u4e2a\\u524d\\u9762\\u7684\\u90a3\\u4e00\\u4e2a\\u5143\\u7d20, \\u5728\\u8fd9\\u91cc\\u524d\\u9762\\u7684\\u5143\\u7d20\\u5c31\\u662f \'a\'\\u3002\\u56e0\\u6b64\\uff0c\\u5b57\\u7b26\\u4e32 \\\"aa\\\" \\u53ef\\u88ab\\u89c6\\u4e3a \'a\' \\u91cd\\u590d\\u4e86\\u4e00\\u6b21\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"ab\\\"\\np = \\\".*\\\"\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \\\".*\\\" \\u8868\\u793a\\u53ef\\u5339\\u914d\\u96f6\\u4e2a\\u6216\\u591a\\u4e2a\\uff08\'*\'\\uff09\\u4efb\\u610f\\u5b57\\u7b26\\uff08\'.\'\\uff09\\u3002\\n```\\n\\n**\\u793a\\u4f8b 4:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"aab\\\"\\np = \\\"c*a*b\\\"\\n\\u8f93\\u51fa: true\\n\\u89e3\\u91ca: \\u56e0\\u4e3a \'*\' \\u8868\\u793a\\u96f6\\u4e2a\\u6216\\u591a\\u4e2a\\uff0c\\u8fd9\\u91cc \'c\' \\u4e3a 0 \\u4e2a, \'a\' \\u88ab\\u91cd\\u590d\\u4e00\\u6b21\\u3002\\u56e0\\u6b64\\u53ef\\u4ee5\\u5339\\u914d\\u5b57\\u7b26\\u4e32 \\\"aab\\\"\\u3002\\n```\\n\\n**\\u793a\\u4f8b 5:**\\n\\n```\\n\\u8f93\\u5165:\\ns = \\\"mississippi\\\"\\np = \\\"mis*is*p*.\\\"\\n\\u8f93\\u51fa: false\\n```\\n\\n- `s` \\u53ef\\u80fd\\u4e3a\\u7a7a\\uff0c\\u4e14\\u53ea\\u5305\\u542b\\u4ece `a-z` \\u7684\\u5c0f\\u5199\\u5b57\\u6bcd\\u3002\\n- `p` \\u53ef\\u80fd\\u4e3a\\u7a7a\\uff0c\\u4e14\\u53ea\\u5305\\u542b\\u4ece `a-z` \\u7684\\u5c0f\\u5199\\u5b57\\u6bcd\\u4ee5\\u53ca\\u5b57\\u7b26 `.` \\u548c `*`\\uff0c\\u65e0\\u8fde\\u7eed\\u7684 `\'*\'`\\u3002\\n\\n\"}]}','red','2020-08-12 13:34:15'),(157,'剑指 Offer 18. 删除链表的节点','\n给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。\n\n返回删除后的链表的头节点。\n\n**注意：**此题对比原题有改动\n\n**示例 1:**\n\n```\n输入: head = [4,5,1,9], val = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.\n```\n\n**示例 2:**\n\n```\n输入: head = [4,5,1,9], val = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.\n```\n\n \n\n**说明：**\n\n- 题目保证链表中节点的值互不相同\n- 若使用 C 或 C++ 语言，你不需要 `free` 或 `delete` 被删除的节点\n\n\n','<p><br></p><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p><p><br></p><p>返回删除后的链表的头节点。</p><p><br></p><p>**注意：**此题对比原题有改动</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: head = [4,5,1,9], val = 5</p><p>输出: [4,1,9]</p><p>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: head = [4,5,1,9], val = 1</p><p>输出: [4,5,9]</p><p>解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p><p>```</p><p><br></p><p> </p><p><br></p><p>**说明：**</p><p><br></p><p>- 题目保证链表中节点的值互不相同</p><p>- 若使用 C 或 C++ 语言，你不需要 `free` 或 `delete` 被删除的节点</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u5b9a\\u5355\\u5411\\u94fe\\u8868\\u7684\\u5934\\u6307\\u9488\\u548c\\u4e00\\u4e2a\\u8981\\u5220\\u9664\\u7684\\u8282\\u70b9\\u7684\\u503c\\uff0c\\u5b9a\\u4e49\\u4e00\\u4e2a\\u51fd\\u6570\\u5220\\u9664\\u8be5\\u8282\\u70b9\\u3002\\n\\n\\u8fd4\\u56de\\u5220\\u9664\\u540e\\u7684\\u94fe\\u8868\\u7684\\u5934\\u8282\\u70b9\\u3002\\n\\n**\\u6ce8\\u610f\\uff1a**\\u6b64\\u9898\\u5bf9\\u6bd4\\u539f\\u9898\\u6709\\u6539\\u52a8\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: head = [4,5,1,9], val = 5\\n\\u8f93\\u51fa: [4,1,9]\\n\\u89e3\\u91ca: \\u7ed9\\u5b9a\\u4f60\\u94fe\\u8868\\u4e2d\\u503c\\u4e3a 5 \\u7684\\u7b2c\\u4e8c\\u4e2a\\u8282\\u70b9\\uff0c\\u90a3\\u4e48\\u5728\\u8c03\\u7528\\u4e86\\u4f60\\u7684\\u51fd\\u6570\\u4e4b\\u540e\\uff0c\\u8be5\\u94fe\\u8868\\u5e94\\u53d8\\u4e3a 4 -> 1 -> 9.\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: head = [4,5,1,9], val = 1\\n\\u8f93\\u51fa: [4,5,9]\\n\\u89e3\\u91ca: \\u7ed9\\u5b9a\\u4f60\\u94fe\\u8868\\u4e2d\\u503c\\u4e3a 1 \\u7684\\u7b2c\\u4e09\\u4e2a\\u8282\\u70b9\\uff0c\\u90a3\\u4e48\\u5728\\u8c03\\u7528\\u4e86\\u4f60\\u7684\\u51fd\\u6570\\u4e4b\\u540e\\uff0c\\u8be5\\u94fe\\u8868\\u5e94\\u53d8\\u4e3a 4 -> 5 -> 9.\\n```\\n\\n \\n\\n**\\u8bf4\\u660e\\uff1a**\\n\\n- \\u9898\\u76ee\\u4fdd\\u8bc1\\u94fe\\u8868\\u4e2d\\u8282\\u70b9\\u7684\\u503c\\u4e92\\u4e0d\\u76f8\\u540c\\n- \\u82e5\\u4f7f\\u7528 C \\u6216 C++ \\u8bed\\u8a00\\uff0c\\u4f60\\u4e0d\\u9700\\u8981 `free` \\u6216 `delete` \\u88ab\\u5220\\u9664\\u7684\\u8282\\u70b9\\n\\n\\n\"}]}','green','2020-08-12 13:34:33'),(158,'剑指 Offer 17. 打印从1到最大的n位数','\n输入数字 `n`，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。\n\n**示例 1:**\n\n```\n输入: n = 1\n输出: [1,2,3,4,5,6,7,8,9]\n```\n\n \n\n说明：\n\n- 用返回一个整数列表来代替打印\n- n 为正整数\n\n','<p><br></p><p>输入数字 `n`，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: n = 1</p><p>输出: [1,2,3,4,5,6,7,8,9]</p><p>```</p><p><br></p><p> </p><p><br></p><p>说明：</p><p><br></p><p>- 用返回一个整数列表来代替打印</p><p>- n 为正整数</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u6570\\u5b57 `n`\\uff0c\\u6309\\u987a\\u5e8f\\u6253\\u5370\\u51fa\\u4ece 1 \\u5230\\u6700\\u5927\\u7684 n \\u4f4d\\u5341\\u8fdb\\u5236\\u6570\\u3002\\u6bd4\\u5982\\u8f93\\u5165 3\\uff0c\\u5219\\u6253\\u5370\\u51fa 1\\u30012\\u30013 \\u4e00\\u76f4\\u5230\\u6700\\u5927\\u7684 3 \\u4f4d\\u6570 999\\u3002\\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: n = 1\\n\\u8f93\\u51fa: [1,2,3,4,5,6,7,8,9]\\n```\\n\\n \\n\\n\\u8bf4\\u660e\\uff1a\\n\\n- \\u7528\\u8fd4\\u56de\\u4e00\\u4e2a\\u6574\\u6570\\u5217\\u8868\\u6765\\u4ee3\\u66ff\\u6253\\u5370\\n- n \\u4e3a\\u6b63\\u6574\\u6570\\n\\n\"}]}','green','2020-08-12 13:34:48'),(159,'剑指 Offer 16. 数值的整数次方','\n实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。\n\n \n\n**示例 1:**\n\n```\n输入: 2.00000, 10\n输出: 1024.00000\n```\n\n**示例 2:**\n\n```\n输入: 2.10000, 3\n输出: 9.26100\n```\n\n**示例 3:**\n\n```\n输入: 2.00000, -2\n输出: 0.25000\n解释: 2-2 = 1/22 = 1/4 = 0.25\n```\n\n \n\n**说明:**\n\n- -100.0 < *x* < 100.0\n- *n* 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。\n\n','<p><br></p><p>实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。</p><p><br></p><p> </p><p><br></p><p>**示例 1:**</p><p><br></p><p>```</p><p>输入: 2.00000, 10</p><p>输出: 1024.00000</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: 2.10000, 3</p><p>输出: 9.26100</p><p>```</p><p><br></p><p>**示例 3:**</p><p><br></p><p>```</p><p>输入: 2.00000, -2</p><p>输出: 0.25000</p><p>解释: 2-2 = 1/22 = 1/4 = 0.25</p><p>```</p><p><br></p><p> </p><p><br></p><p>**说明:**</p><p><br></p><p>- -100.0 &lt; *x* &lt; 100.0</p><p>- *n* 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5b9e\\u73b0\\u51fd\\u6570double Power(double base, int exponent)\\uff0c\\u6c42base\\u7684exponent\\u6b21\\u65b9\\u3002\\u4e0d\\u5f97\\u4f7f\\u7528\\u5e93\\u51fd\\u6570\\uff0c\\u540c\\u65f6\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u5927\\u6570\\u95ee\\u9898\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1:**\\n\\n```\\n\\u8f93\\u5165: 2.00000, 10\\n\\u8f93\\u51fa: 1024.00000\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 2.10000, 3\\n\\u8f93\\u51fa: 9.26100\\n```\\n\\n**\\u793a\\u4f8b 3:**\\n\\n```\\n\\u8f93\\u5165: 2.00000, -2\\n\\u8f93\\u51fa: 0.25000\\n\\u89e3\\u91ca: 2-2 = 1/22 = 1/4 = 0.25\\n```\\n\\n \\n\\n**\\u8bf4\\u660e:**\\n\\n- -100.0 < *x* < 100.0\\n- *n* \\u662f 32 \\u4f4d\\u6709\\u7b26\\u53f7\\u6574\\u6570\\uff0c\\u5176\\u6570\\u503c\\u8303\\u56f4\\u662f [\\u2212231, 231 \\u2212 1] \\u3002\\n\\n\"}]}','yellow','2020-08-12 13:35:01'),(160,'剑指 Offer 15. 二进制中1的个数','\n请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。\n\n**示例 1：**\n\n```\n输入：00000000000000000000000000001011\n输出：3\n解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 \'1\'。\n```\n\n**示例 2：**\n\n```\n输入：00000000000000000000000010000000\n输出：1\n解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 \'1\'。\n```\n\n**示例 3：**\n\n```\n输入：11111111111111111111111111111101\n输出：31\n解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 \'1\'。\n```\n\n \n\n','<p><br></p><p>请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：00000000000000000000000000001011</p><p>输出：3</p><p>解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 \'1\'。</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：00000000000000000000000010000000</p><p>输出：1</p><p>解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 \'1\'。</p><p>```</p><p><br></p><p>**示例 3：**</p><p><br></p><p>```</p><p>输入：11111111111111111111111111111101</p><p>输出：31</p><p>解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 \'1\'。</p><p>```</p><p><br></p><p> </p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u5b9e\\u73b0\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u8f93\\u5165\\u4e00\\u4e2a\\u6574\\u6570\\uff0c\\u8f93\\u51fa\\u8be5\\u6570\\u4e8c\\u8fdb\\u5236\\u8868\\u793a\\u4e2d 1 \\u7684\\u4e2a\\u6570\\u3002\\u4f8b\\u5982\\uff0c\\u628a 9 \\u8868\\u793a\\u6210\\u4e8c\\u8fdb\\u5236\\u662f 1001\\uff0c\\u6709 2 \\u4f4d\\u662f 1\\u3002\\u56e0\\u6b64\\uff0c\\u5982\\u679c\\u8f93\\u5165 9\\uff0c\\u5219\\u8be5\\u51fd\\u6570\\u8f93\\u51fa 2\\u3002\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a00000000000000000000000000001011\\n\\u8f93\\u51fa\\uff1a3\\n\\u89e3\\u91ca\\uff1a\\u8f93\\u5165\\u7684\\u4e8c\\u8fdb\\u5236\\u4e32 00000000000000000000000000001011 \\u4e2d\\uff0c\\u5171\\u6709\\u4e09\\u4f4d\\u4e3a \'1\'\\u3002\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a00000000000000000000000010000000\\n\\u8f93\\u51fa\\uff1a1\\n\\u89e3\\u91ca\\uff1a\\u8f93\\u5165\\u7684\\u4e8c\\u8fdb\\u5236\\u4e32 00000000000000000000000010000000 \\u4e2d\\uff0c\\u5171\\u6709\\u4e00\\u4f4d\\u4e3a \'1\'\\u3002\\n```\\n\\n**\\u793a\\u4f8b 3\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a11111111111111111111111111111101\\n\\u8f93\\u51fa\\uff1a31\\n\\u89e3\\u91ca\\uff1a\\u8f93\\u5165\\u7684\\u4e8c\\u8fdb\\u5236\\u4e32 11111111111111111111111111111101 \\u4e2d\\uff0c\\u5171\\u6709 31 \\u4f4d\\u4e3a \'1\'\\u3002\\n```\\n\\n \\n\\n\"}]}','green','2020-08-12 13:35:20'),(161,'剑指 Offer 14- II. 剪绳子 II','\n给你一根长度为 `n` 的绳子，请把绳子剪成整数长度的 `m` 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 `k[0],k[1]...k[m - 1]` 。请问 `k[0]*k[1]*...*k[m - 1]` 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。\n\n答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n\n \n\n**示例 1：**\n\n```\n输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n```\n\n**示例 2:**\n\n```\n输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n```\n\n \n\n**提示：**\n\n- `2 <= n <= 1000`\n\n','<p><br></p><p>给你一根长度为 `n` 的绳子，请把绳子剪成整数长度的 `m` 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 `k[0],k[1]...k[m - 1]` 。请问 `k[0]*k[1]*...*k[m - 1]` 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><p><br></p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: 2</p><p>输出: 1</p><p>解释: 2 = 1 + 1, 1 × 1 = 1</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: 10</p><p>输出: 36</p><p>解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `2 &lt;= n &lt;= 1000`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u4f60\\u4e00\\u6839\\u957f\\u5ea6\\u4e3a `n` \\u7684\\u7ef3\\u5b50\\uff0c\\u8bf7\\u628a\\u7ef3\\u5b50\\u526a\\u6210\\u6574\\u6570\\u957f\\u5ea6\\u7684 `m` \\u6bb5\\uff08m\\u3001n\\u90fd\\u662f\\u6574\\u6570\\uff0cn>1\\u5e76\\u4e14m>1\\uff09\\uff0c\\u6bcf\\u6bb5\\u7ef3\\u5b50\\u7684\\u957f\\u5ea6\\u8bb0\\u4e3a `k[0],k[1]...k[m - 1]` \\u3002\\u8bf7\\u95ee `k[0]*k[1]*...*k[m - 1]` \\u53ef\\u80fd\\u7684\\u6700\\u5927\\u4e58\\u79ef\\u662f\\u591a\\u5c11\\uff1f\\u4f8b\\u5982\\uff0c\\u5f53\\u7ef3\\u5b50\\u7684\\u957f\\u5ea6\\u662f8\\u65f6\\uff0c\\u6211\\u4eec\\u628a\\u5b83\\u526a\\u6210\\u957f\\u5ea6\\u5206\\u522b\\u4e3a2\\u30013\\u30013\\u7684\\u4e09\\u6bb5\\uff0c\\u6b64\\u65f6\\u5f97\\u5230\\u7684\\u6700\\u5927\\u4e58\\u79ef\\u662f18\\u3002\\n\\n\\u7b54\\u6848\\u9700\\u8981\\u53d6\\u6a21 1e9+7\\uff081000000007\\uff09\\uff0c\\u5982\\u8ba1\\u7b97\\u521d\\u59cb\\u7ed3\\u679c\\u4e3a\\uff1a1000000008\\uff0c\\u8bf7\\u8fd4\\u56de 1\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: 2\\n\\u8f93\\u51fa: 1\\n\\u89e3\\u91ca: 2 = 1 + 1, 1 \\u00d7 1 = 1\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 10\\n\\u8f93\\u51fa: 36\\n\\u89e3\\u91ca: 10 = 3 + 3 + 4, 3 \\u00d7 3 \\u00d7 4 = 36\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `2 <= n <= 1000`\\n\\n\"}]}','yellow','2020-08-12 13:35:33'),(162,'剑指 Offer 14- I. 剪绳子','\n给你一根长度为 `n` 的绳子，请把绳子剪成整数长度的 `m` 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 `k[0],k[1]...k[m-1]` 。请问 `k[0]*k[1]*...*k[m-1]` 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。\n\n**示例 1：**\n\n```\n输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n```\n\n**示例 2:**\n\n```\n输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n```\n\n**提示：**\n\n- `2 <= n <= 58`\n\n','<p><br></p><p>给你一根长度为 `n` 的绳子，请把绳子剪成整数长度的 `m` 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 `k[0],k[1]...k[m-1]` 。请问 `k[0]*k[1]*...*k[m-1]` 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入: 2</p><p>输出: 1</p><p>解释: 2 = 1 + 1, 1 × 1 = 1</p><p>```</p><p><br></p><p>**示例 2:**</p><p><br></p><p>```</p><p>输入: 10</p><p>输出: 36</p><p>解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</p><p>```</p><p><br></p><p>**提示：**</p><p><br></p><p>- `2 &lt;= n &lt;= 58`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7ed9\\u4f60\\u4e00\\u6839\\u957f\\u5ea6\\u4e3a `n` \\u7684\\u7ef3\\u5b50\\uff0c\\u8bf7\\u628a\\u7ef3\\u5b50\\u526a\\u6210\\u6574\\u6570\\u957f\\u5ea6\\u7684 `m` \\u6bb5\\uff08m\\u3001n\\u90fd\\u662f\\u6574\\u6570\\uff0cn>1\\u5e76\\u4e14m>1\\uff09\\uff0c\\u6bcf\\u6bb5\\u7ef3\\u5b50\\u7684\\u957f\\u5ea6\\u8bb0\\u4e3a `k[0],k[1]...k[m-1]` \\u3002\\u8bf7\\u95ee `k[0]*k[1]*...*k[m-1]` \\u53ef\\u80fd\\u7684\\u6700\\u5927\\u4e58\\u79ef\\u662f\\u591a\\u5c11\\uff1f\\u4f8b\\u5982\\uff0c\\u5f53\\u7ef3\\u5b50\\u7684\\u957f\\u5ea6\\u662f8\\u65f6\\uff0c\\u6211\\u4eec\\u628a\\u5b83\\u526a\\u6210\\u957f\\u5ea6\\u5206\\u522b\\u4e3a2\\u30013\\u30013\\u7684\\u4e09\\u6bb5\\uff0c\\u6b64\\u65f6\\u5f97\\u5230\\u7684\\u6700\\u5927\\u4e58\\u79ef\\u662f18\\u3002\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165: 2\\n\\u8f93\\u51fa: 1\\n\\u89e3\\u91ca: 2 = 1 + 1, 1 \\u00d7 1 = 1\\n```\\n\\n**\\u793a\\u4f8b 2:**\\n\\n```\\n\\u8f93\\u5165: 10\\n\\u8f93\\u51fa: 36\\n\\u89e3\\u91ca: 10 = 3 + 3 + 4, 3 \\u00d7 3 \\u00d7 4 = 36\\n```\\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `2 <= n <= 58`\\n\\n\"}]}','yellow','2020-08-12 13:35:46'),(163,'剑指 Offer 13. 机器人的运动范围','\n地上有一个m行n列的方格，从坐标 `[0,0]` 到坐标 `[m-1,n-1]` 。一个机器人从坐标 `[0, 0] `的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？\n\n \n\n**示例 1：**\n\n```\n输入：m = 2, n = 3, k = 1\n输出：3\n```\n\n**示例 2：**\n\n```\n输入：m = 3, n = 1, k = 0\n输出：1\n```\n\n**提示：**\n\n- `1 <= n,m <= 100`\n- `0 <= k <= 20`\n\n\n','<p><br></p><p>地上有一个m行n列的方格，从坐标 `[0,0]` 到坐标 `[m-1,n-1]` 。一个机器人从坐标 `[0, 0] `的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：m = 2, n = 3, k = 1</p><p>输出：3</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：m = 3, n = 1, k = 0</p><p>输出：1</p><p>```</p><p><br></p><p>**提示：**</p><p><br></p><p>- `1 &lt;= n,m &lt;= 100`</p><p>- `0 &lt;= k &lt;= 20`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5730\\u4e0a\\u6709\\u4e00\\u4e2am\\u884cn\\u5217\\u7684\\u65b9\\u683c\\uff0c\\u4ece\\u5750\\u6807 `[0,0]` \\u5230\\u5750\\u6807 `[m-1,n-1]` \\u3002\\u4e00\\u4e2a\\u673a\\u5668\\u4eba\\u4ece\\u5750\\u6807 `[0, 0] `\\u7684\\u683c\\u5b50\\u5f00\\u59cb\\u79fb\\u52a8\\uff0c\\u5b83\\u6bcf\\u6b21\\u53ef\\u4ee5\\u5411\\u5de6\\u3001\\u53f3\\u3001\\u4e0a\\u3001\\u4e0b\\u79fb\\u52a8\\u4e00\\u683c\\uff08\\u4e0d\\u80fd\\u79fb\\u52a8\\u5230\\u65b9\\u683c\\u5916\\uff09\\uff0c\\u4e5f\\u4e0d\\u80fd\\u8fdb\\u5165\\u884c\\u5750\\u6807\\u548c\\u5217\\u5750\\u6807\\u7684\\u6570\\u4f4d\\u4e4b\\u548c\\u5927\\u4e8ek\\u7684\\u683c\\u5b50\\u3002\\u4f8b\\u5982\\uff0c\\u5f53k\\u4e3a18\\u65f6\\uff0c\\u673a\\u5668\\u4eba\\u80fd\\u591f\\u8fdb\\u5165\\u65b9\\u683c [35, 37] \\uff0c\\u56e0\\u4e3a3+5+3+7=18\\u3002\\u4f46\\u5b83\\u4e0d\\u80fd\\u8fdb\\u5165\\u65b9\\u683c [35, 38]\\uff0c\\u56e0\\u4e3a3+5+3+8=19\\u3002\\u8bf7\\u95ee\\u8be5\\u673a\\u5668\\u4eba\\u80fd\\u591f\\u5230\\u8fbe\\u591a\\u5c11\\u4e2a\\u683c\\u5b50\\uff1f\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1am = 2, n = 3, k = 1\\n\\u8f93\\u51fa\\uff1a3\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1am = 3, n = 1, k = 0\\n\\u8f93\\u51fa\\uff1a1\\n```\\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `1 <= n,m <= 100`\\n- `0 <= k <= 20`\\n\\n\\n\"}]}','yellow','2020-08-12 13:35:59'),(164,'剑指 Offer 12. 矩阵中的路径','\n请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。\n\n[[\"a\",\"**b**\",\"c\",\"e\"],\n\n[\"s\",\"**f**\",\"**c**\",\"s\"],\n\n[\"a\",\"d\",\"**e**\",\"e\"]]\n\n但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。\n\n \n\n**示例 1：**\n\n```\n输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n输出：false\n```\n\n**提示：**\n\n- `1 <= board.length <= 200`\n- `1 <= board[i].length <= 200`\n\n','<p><br></p><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</p><p><br></p><p>[[\"a\",\"**b**\",\"c\",\"e\"],</p><p><br></p><p>[\"s\",\"**f**\",\"**c**\",\"s\"],</p><p><br></p><p>[\"a\",\"d\",\"**e**\",\"e\"]]</p><p><br></p><p>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"</p><p>输出：true</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"</p><p>输出：false</p><p>```</p><p><br></p><p>**提示：**</p><p><br></p><p>- `1 &lt;= board.length &lt;= 200`</p><p>- `1 &lt;= board[i].length &lt;= 200`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u8bbe\\u8ba1\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u7528\\u6765\\u5224\\u65ad\\u5728\\u4e00\\u4e2a\\u77e9\\u9635\\u4e2d\\u662f\\u5426\\u5b58\\u5728\\u4e00\\u6761\\u5305\\u542b\\u67d0\\u5b57\\u7b26\\u4e32\\u6240\\u6709\\u5b57\\u7b26\\u7684\\u8def\\u5f84\\u3002\\u8def\\u5f84\\u53ef\\u4ee5\\u4ece\\u77e9\\u9635\\u4e2d\\u7684\\u4efb\\u610f\\u4e00\\u683c\\u5f00\\u59cb\\uff0c\\u6bcf\\u4e00\\u6b65\\u53ef\\u4ee5\\u5728\\u77e9\\u9635\\u4e2d\\u5411\\u5de6\\u3001\\u53f3\\u3001\\u4e0a\\u3001\\u4e0b\\u79fb\\u52a8\\u4e00\\u683c\\u3002\\u5982\\u679c\\u4e00\\u6761\\u8def\\u5f84\\u7ecf\\u8fc7\\u4e86\\u77e9\\u9635\\u7684\\u67d0\\u4e00\\u683c\\uff0c\\u90a3\\u4e48\\u8be5\\u8def\\u5f84\\u4e0d\\u80fd\\u518d\\u6b21\\u8fdb\\u5165\\u8be5\\u683c\\u5b50\\u3002\\u4f8b\\u5982\\uff0c\\u5728\\u4e0b\\u9762\\u76843\\u00d74\\u7684\\u77e9\\u9635\\u4e2d\\u5305\\u542b\\u4e00\\u6761\\u5b57\\u7b26\\u4e32\\u201cbfce\\u201d\\u7684\\u8def\\u5f84\\uff08\\u8def\\u5f84\\u4e2d\\u7684\\u5b57\\u6bcd\\u7528\\u52a0\\u7c97\\u6807\\u51fa\\uff09\\u3002\\n\\n[[\\\"a\\\",\\\"**b**\\\",\\\"c\\\",\\\"e\\\"],\\n\\n[\\\"s\\\",\\\"**f**\\\",\\\"**c**\\\",\\\"s\\\"],\\n\\n[\\\"a\\\",\\\"d\\\",\\\"**e**\\\",\\\"e\\\"]]\\n\\n\\u4f46\\u77e9\\u9635\\u4e2d\\u4e0d\\u5305\\u542b\\u5b57\\u7b26\\u4e32\\u201cabfb\\u201d\\u7684\\u8def\\u5f84\\uff0c\\u56e0\\u4e3a\\u5b57\\u7b26\\u4e32\\u7684\\u7b2c\\u4e00\\u4e2a\\u5b57\\u7b26b\\u5360\\u636e\\u4e86\\u77e9\\u9635\\u4e2d\\u7684\\u7b2c\\u4e00\\u884c\\u7b2c\\u4e8c\\u4e2a\\u683c\\u5b50\\u4e4b\\u540e\\uff0c\\u8def\\u5f84\\u4e0d\\u80fd\\u518d\\u6b21\\u8fdb\\u5165\\u8fd9\\u4e2a\\u683c\\u5b50\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aboard = [[\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"E\\\"],[\\\"S\\\",\\\"F\\\",\\\"C\\\",\\\"S\\\"],[\\\"A\\\",\\\"D\\\",\\\"E\\\",\\\"E\\\"]], word = \\\"ABCCED\\\"\\n\\u8f93\\u51fa\\uff1atrue\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1aboard = [[\\\"a\\\",\\\"b\\\"],[\\\"c\\\",\\\"d\\\"]], word = \\\"abcd\\\"\\n\\u8f93\\u51fa\\uff1afalse\\n```\\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `1 <= board.length <= 200`\\n- `1 <= board[i].length <= 200`\\n\\n\"}]}','yellow','2020-08-12 13:36:59'),(165,'剑指 Offer 11. 旋转数组的最小数字','\n把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 `[3,4,5,1,2]` 为 `[1,2,3,4,5]` 的一个旋转，该数组的最小值为1。 \n\n**示例 1：**\n\n```\n输入：[3,4,5,1,2]\n输出：1\n```\n\n**示例 2：**\n\n```\n输入：[2,2,2,0,1]\n输出：0\n```\n\n','<p><br></p><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 `[3,4,5,1,2]` 为 `[1,2,3,4,5]` 的一个旋转，该数组的最小值为1。 </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：[3,4,5,1,2]</p><p>输出：1</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：[2,2,2,0,1]</p><p>输出：0</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u628a\\u4e00\\u4e2a\\u6570\\u7ec4\\u6700\\u5f00\\u59cb\\u7684\\u82e5\\u5e72\\u4e2a\\u5143\\u7d20\\u642c\\u5230\\u6570\\u7ec4\\u7684\\u672b\\u5c3e\\uff0c\\u6211\\u4eec\\u79f0\\u4e4b\\u4e3a\\u6570\\u7ec4\\u7684\\u65cb\\u8f6c\\u3002\\u8f93\\u5165\\u4e00\\u4e2a\\u9012\\u589e\\u6392\\u5e8f\\u7684\\u6570\\u7ec4\\u7684\\u4e00\\u4e2a\\u65cb\\u8f6c\\uff0c\\u8f93\\u51fa\\u65cb\\u8f6c\\u6570\\u7ec4\\u7684\\u6700\\u5c0f\\u5143\\u7d20\\u3002\\u4f8b\\u5982\\uff0c\\u6570\\u7ec4 `[3,4,5,1,2]` \\u4e3a `[1,2,3,4,5]` \\u7684\\u4e00\\u4e2a\\u65cb\\u8f6c\\uff0c\\u8be5\\u6570\\u7ec4\\u7684\\u6700\\u5c0f\\u503c\\u4e3a1\\u3002 \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a[3,4,5,1,2]\\n\\u8f93\\u51fa\\uff1a1\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a[2,2,2,0,1]\\n\\u8f93\\u51fa\\uff1a0\\n```\\n\\n\"}]}','green','2020-08-12 13:37:17'),(166,'剑指 Offer 10- II. 青蛙跳台阶问题','\n一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 `n` 级的台阶总共有多少种跳法。\n\n答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n\n**示例 1：**\n\n```\n输入：n = 2\n输出：2\n```\n\n**示例 2：**\n\n```\n输入：n = 7\n输出：21\n```\n\n**提示：**\n\n- `0 <= n <= 100`\n\n','<p><br></p><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 `n` 级的台阶总共有多少种跳法。</p><p><br></p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：n = 2</p><p>输出：2</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：n = 7</p><p>输出：21</p><p>```</p><p><br></p><p>**提示：**</p><p><br></p><p>- `0 &lt;= n &lt;= 100`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u4e00\\u53ea\\u9752\\u86d9\\u4e00\\u6b21\\u53ef\\u4ee5\\u8df3\\u4e0a1\\u7ea7\\u53f0\\u9636\\uff0c\\u4e5f\\u53ef\\u4ee5\\u8df3\\u4e0a2\\u7ea7\\u53f0\\u9636\\u3002\\u6c42\\u8be5\\u9752\\u86d9\\u8df3\\u4e0a\\u4e00\\u4e2a `n` \\u7ea7\\u7684\\u53f0\\u9636\\u603b\\u5171\\u6709\\u591a\\u5c11\\u79cd\\u8df3\\u6cd5\\u3002\\n\\n\\u7b54\\u6848\\u9700\\u8981\\u53d6\\u6a21 1e9+7\\uff081000000007\\uff09\\uff0c\\u5982\\u8ba1\\u7b97\\u521d\\u59cb\\u7ed3\\u679c\\u4e3a\\uff1a1000000008\\uff0c\\u8bf7\\u8fd4\\u56de 1\\u3002\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 2\\n\\u8f93\\u51fa\\uff1a2\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 7\\n\\u8f93\\u51fa\\uff1a21\\n```\\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `0 <= n <= 100`\\n\\n\"}]}','green','2020-08-12 13:37:29'),(167,'剑指 Offer 10- I. 斐波那契数列','\n写一个函数，输入 `n` ，求斐波那契（Fibonacci）数列的第 `n` 项。斐波那契数列的定义如下：\n\n```\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n```\n\n斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n\n答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n\n \n\n**示例 1：**\n\n```\n输入：n = 2\n输出：1\n```\n\n**示例 2：**\n\n```\n输入：n = 5\n输出：5\n```\n\n \n\n**提示：**\n\n- `0 <= n <= 100`\n\n','<p><br></p><p>写一个函数，输入 `n` ，求斐波那契（Fibonacci）数列的第 `n` 项。斐波那契数列的定义如下：</p><p><br></p><p>```</p><p>F(0) = 0,   F(1) = 1</p><p>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</p><p>```</p><p><br></p><p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p><p><br></p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：n = 2</p><p>输出：1</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：n = 5</p><p>输出：5</p><p>```</p><p><br></p><p> </p><p><br></p><p>**提示：**</p><p><br></p><p>- `0 &lt;= n &lt;= 100`</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u5199\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u8f93\\u5165 `n` \\uff0c\\u6c42\\u6590\\u6ce2\\u90a3\\u5951\\uff08Fibonacci\\uff09\\u6570\\u5217\\u7684\\u7b2c `n` \\u9879\\u3002\\u6590\\u6ce2\\u90a3\\u5951\\u6570\\u5217\\u7684\\u5b9a\\u4e49\\u5982\\u4e0b\\uff1a\\n\\n```\\nF(0) = 0,   F(1) = 1\\nF(N) = F(N - 1) + F(N - 2), \\u5176\\u4e2d N > 1.\\n```\\n\\n\\u6590\\u6ce2\\u90a3\\u5951\\u6570\\u5217\\u7531 0 \\u548c 1 \\u5f00\\u59cb\\uff0c\\u4e4b\\u540e\\u7684\\u6590\\u6ce2\\u90a3\\u5951\\u6570\\u5c31\\u662f\\u7531\\u4e4b\\u524d\\u7684\\u4e24\\u6570\\u76f8\\u52a0\\u800c\\u5f97\\u51fa\\u3002\\n\\n\\u7b54\\u6848\\u9700\\u8981\\u53d6\\u6a21 1e9+7\\uff081000000007\\uff09\\uff0c\\u5982\\u8ba1\\u7b97\\u521d\\u59cb\\u7ed3\\u679c\\u4e3a\\uff1a1000000008\\uff0c\\u8bf7\\u8fd4\\u56de 1\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 2\\n\\u8f93\\u51fa\\uff1a1\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1an = 5\\n\\u8f93\\u51fa\\uff1a5\\n```\\n\\n \\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `0 <= n <= 100`\\n\\n\"}]}','green','2020-08-12 13:37:45'),(168,'剑指 Offer 09. 用两个栈实现队列','\n用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 `appendTail` 和 `deleteHead` ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，`deleteHead` 操作返回 -1 )\n\n \n\n**示例 1：**\n\n```\n输入：\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[]]\n输出：[null,null,3,-1]\n```\n\n**示例 2：**\n\n```\n输入：\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n输出：[null,-1,null,null,5,2]\n```\n\n**提示：**\n\n- `1 <= values <= 10000`\n- `最多会对 appendTail、deleteHead 进行 10000 次调用`\n\n\n','<p><br></p><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 `appendTail` 和 `deleteHead` ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，`deleteHead` 操作返回 -1 )</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：</p><p>[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"]</p><p>[[],[3],[],[]]</p><p>输出：[null,null,3,-1]</p><p>```</p><p><br></p><p>**示例 2：**</p><p><br></p><p>```</p><p>输入：</p><p>[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]</p><p>[[],[],[5],[2],[],[]]</p><p>输出：[null,-1,null,null,5,2]</p><p>```</p><p><br></p><p>**提示：**</p><p><br></p><p>- `1 &lt;= values &lt;= 10000`</p><p>- `最多会对 appendTail、deleteHead 进行 10000 次调用`</p><p><br></p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u7528\\u4e24\\u4e2a\\u6808\\u5b9e\\u73b0\\u4e00\\u4e2a\\u961f\\u5217\\u3002\\u961f\\u5217\\u7684\\u58f0\\u660e\\u5982\\u4e0b\\uff0c\\u8bf7\\u5b9e\\u73b0\\u5b83\\u7684\\u4e24\\u4e2a\\u51fd\\u6570 `appendTail` \\u548c `deleteHead` \\uff0c\\u5206\\u522b\\u5b8c\\u6210\\u5728\\u961f\\u5217\\u5c3e\\u90e8\\u63d2\\u5165\\u6574\\u6570\\u548c\\u5728\\u961f\\u5217\\u5934\\u90e8\\u5220\\u9664\\u6574\\u6570\\u7684\\u529f\\u80fd\\u3002(\\u82e5\\u961f\\u5217\\u4e2d\\u6ca1\\u6709\\u5143\\u7d20\\uff0c`deleteHead` \\u64cd\\u4f5c\\u8fd4\\u56de -1 )\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\n[\\\"CQueue\\\",\\\"appendTail\\\",\\\"deleteHead\\\",\\\"deleteHead\\\"]\\n[[],[3],[],[]]\\n\\u8f93\\u51fa\\uff1a[null,null,3,-1]\\n```\\n\\n**\\u793a\\u4f8b 2\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\n[\\\"CQueue\\\",\\\"deleteHead\\\",\\\"appendTail\\\",\\\"appendTail\\\",\\\"deleteHead\\\",\\\"deleteHead\\\"]\\n[[],[],[5],[2],[],[]]\\n\\u8f93\\u51fa\\uff1a[null,-1,null,null,5,2]\\n```\\n\\n**\\u63d0\\u793a\\uff1a**\\n\\n- `1 <= values <= 10000`\\n- `\\u6700\\u591a\\u4f1a\\u5bf9 appendTail\\u3001deleteHead \\u8fdb\\u884c 10000 \\u6b21\\u8c03\\u7528`\\n\\n\\n\"}]}','green','2020-08-12 13:38:14'),(169,'剑指 Offer 07. 重建二叉树','\n输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n\n \n\n例如，给出\n\n```\n前序遍历 preorder = [3,9,20,15,7]\n中序遍历 inorder = [9,3,15,20,7]\n```\n\n返回如下的二叉树：\n\n```\n     3\n    /  \\\n  9   20\n       /  \\\n     15   7\n```\n\n \n\n**限制：**\n\n```\n0 <= 节点个数 <= 5000\n```\n','<p><br></p><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p><br></p><p> </p><p><br></p><p>例如，给出</p><p><br></p><p>```</p><p>前序遍历 preorder = [3,9,20,15,7]</p><p>中序遍历 inorder = [9,3,15,20,7]</p><p>```</p><p><br></p><p>返回如下的二叉树：</p><p><br></p><p>```</p><p>     3</p><p>    /  \\</p><p>  9   20</p><p>       /  \\</p><p>     15   7</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 节点个数 &lt;= 5000</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u67d0\\u4e8c\\u53c9\\u6811\\u7684\\u524d\\u5e8f\\u904d\\u5386\\u548c\\u4e2d\\u5e8f\\u904d\\u5386\\u7684\\u7ed3\\u679c\\uff0c\\u8bf7\\u91cd\\u5efa\\u8be5\\u4e8c\\u53c9\\u6811\\u3002\\u5047\\u8bbe\\u8f93\\u5165\\u7684\\u524d\\u5e8f\\u904d\\u5386\\u548c\\u4e2d\\u5e8f\\u904d\\u5386\\u7684\\u7ed3\\u679c\\u4e2d\\u90fd\\u4e0d\\u542b\\u91cd\\u590d\\u7684\\u6570\\u5b57\\u3002\\n\\n \\n\\n\\u4f8b\\u5982\\uff0c\\u7ed9\\u51fa\\n\\n```\\n\\u524d\\u5e8f\\u904d\\u5386 preorder = [3,9,20,15,7]\\n\\u4e2d\\u5e8f\\u904d\\u5386 inorder = [9,3,15,20,7]\\n```\\n\\n\\u8fd4\\u56de\\u5982\\u4e0b\\u7684\\u4e8c\\u53c9\\u6811\\uff1a\\n\\n```\\n     3\\n    /  \\\\\\n  9   20\\n       /  \\\\\\n     15   7\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u8282\\u70b9\\u4e2a\\u6570 <= 5000\\n```\\n\"}]}','yellow','2020-08-12 13:38:46'),(170,'剑指 Offer 06. 从尾到头打印链表','\n输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。\n\n \n\n**示例 1：**\n\n```\n输入：head = [1,3,2]\n输出：[2,3,1]\n```\n\n \n\n**限制：**\n\n```\n0 <= 链表长度 <= 10000\n```\n\n','<p><br></p><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：head = [1,3,2]</p><p>输出：[2,3,1]</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= 链表长度 &lt;= 10000</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u8f93\\u5165\\u4e00\\u4e2a\\u94fe\\u8868\\u7684\\u5934\\u8282\\u70b9\\uff0c\\u4ece\\u5c3e\\u5230\\u5934\\u53cd\\u8fc7\\u6765\\u8fd4\\u56de\\u6bcf\\u4e2a\\u8282\\u70b9\\u7684\\u503c\\uff08\\u7528\\u6570\\u7ec4\\u8fd4\\u56de\\uff09\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1ahead = [1,3,2]\\n\\u8f93\\u51fa\\uff1a[2,3,1]\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= \\u94fe\\u8868\\u957f\\u5ea6 <= 10000\\n```\\n\\n\"}]}','green','2020-08-12 13:39:02'),(171,'剑指 Offer 05. 替换空格','\n请实现一个函数，把字符串 `s` 中的每个空格替换成\"%20\"。\n\n \n\n**示例 1：**\n\n```\n输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\"\n```\n\n \n\n**限制：**\n\n```\n0 <= s 的长度 <= 10000\n```\n','<p><br></p><p>请实现一个函数，把字符串 `s` 中的每个空格替换成\"%20\"。</p><p><br></p><p> </p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：s = \"We are happy.\"</p><p>输出：\"We%20are%20happy.\"</p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= s 的长度 &lt;= 10000</p><p>```</p>','{\"ops\": [{\"insert\": \"\\n\\u8bf7\\u5b9e\\u73b0\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u628a\\u5b57\\u7b26\\u4e32 `s` \\u4e2d\\u7684\\u6bcf\\u4e2a\\u7a7a\\u683c\\u66ff\\u6362\\u6210\\\"%20\\\"\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1as = \\\"We are happy.\\\"\\n\\u8f93\\u51fa\\uff1a\\\"We%20are%20happy.\\\"\\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= s \\u7684\\u957f\\u5ea6 <= 10000\\n```\\n\"}]}','green','2020-08-12 13:39:14'),(172,'剑指 Offer 04. 二维数组中的查找','在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n \n\n**示例:**\n\n现有矩阵 matrix 如下：\n\n```\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n```\n\n给定 target = `5`，返回 `true`。\n\n给定 target = `20`，返回 `false`。\n\n \n\n**限制：**\n\n```\n0 <= n <= 1000\n0 <= m <= 1000\n```\n','<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><br></p><p> </p><p><br></p><p>**示例:**</p><p><br></p><p>现有矩阵 matrix 如下：</p><p><br></p><p>```</p><p>[</p><p>  [1,   4,  7, 11, 15],</p><p>  [2,   5,  8, 12, 19],</p><p>  [3,   6,  9, 16, 22],</p><p>  [10, 13, 14, 17, 24],</p><p>  [18, 21, 23, 26, 30]</p><p>]</p><p>```</p><p><br></p><p>给定 target = `5`，返回 `true`。</p><p><br></p><p>给定 target = `20`，返回 `false`。</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>0 &lt;= n &lt;= 1000</p><p>0 &lt;= m &lt;= 1000</p><p>```</p>','{\"ops\": [{\"insert\": \"\\u5728\\u4e00\\u4e2a n * m \\u7684\\u4e8c\\u7ef4\\u6570\\u7ec4\\u4e2d\\uff0c\\u6bcf\\u4e00\\u884c\\u90fd\\u6309\\u7167\\u4ece\\u5de6\\u5230\\u53f3\\u9012\\u589e\\u7684\\u987a\\u5e8f\\u6392\\u5e8f\\uff0c\\u6bcf\\u4e00\\u5217\\u90fd\\u6309\\u7167\\u4ece\\u4e0a\\u5230\\u4e0b\\u9012\\u589e\\u7684\\u987a\\u5e8f\\u6392\\u5e8f\\u3002\\u8bf7\\u5b8c\\u6210\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u8f93\\u5165\\u8fd9\\u6837\\u7684\\u4e00\\u4e2a\\u4e8c\\u7ef4\\u6570\\u7ec4\\u548c\\u4e00\\u4e2a\\u6574\\u6570\\uff0c\\u5224\\u65ad\\u6570\\u7ec4\\u4e2d\\u662f\\u5426\\u542b\\u6709\\u8be5\\u6574\\u6570\\u3002\\n\\n \\n\\n**\\u793a\\u4f8b:**\\n\\n\\u73b0\\u6709\\u77e9\\u9635 matrix \\u5982\\u4e0b\\uff1a\\n\\n```\\n[\\n  [1,   4,  7, 11, 15],\\n  [2,   5,  8, 12, 19],\\n  [3,   6,  9, 16, 22],\\n  [10, 13, 14, 17, 24],\\n  [18, 21, 23, 26, 30]\\n]\\n```\\n\\n\\u7ed9\\u5b9a target = `5`\\uff0c\\u8fd4\\u56de `true`\\u3002\\n\\n\\u7ed9\\u5b9a target = `20`\\uff0c\\u8fd4\\u56de `false`\\u3002\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n0 <= n <= 1000\\n0 <= m <= 1000\\n```\\n\"}]}','green','2020-08-12 13:39:37'),(173,'剑指 Offer 03. 数组中重复的数字','\n找出数组中重复的数字。\n\n\n在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n\n**示例 1：**\n\n```\n输入：\n[2, 3, 1, 0, 2, 5, 3]\n输出：2 或 3 \n```\n\n \n\n**限制：**\n\n```\n2 <= n <= 100000\n```\n\n','<p><br></p><p>找出数组中重复的数字。</p><p><br></p><p><br></p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><br></p><p>**示例 1：**</p><p><br></p><p>```</p><p>输入：</p><p>[2, 3, 1, 0, 2, 5, 3]</p><p>输出：2 或 3 </p><p>```</p><p><br></p><p> </p><p><br></p><p>**限制：**</p><p><br></p><p>```</p><p>2 &lt;= n &lt;= 100000</p><p>```</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n\\u627e\\u51fa\\u6570\\u7ec4\\u4e2d\\u91cd\\u590d\\u7684\\u6570\\u5b57\\u3002\\n\\n\\n\\u5728\\u4e00\\u4e2a\\u957f\\u5ea6\\u4e3a n \\u7684\\u6570\\u7ec4 nums \\u91cc\\u7684\\u6240\\u6709\\u6570\\u5b57\\u90fd\\u5728 0\\uff5en-1 \\u7684\\u8303\\u56f4\\u5185\\u3002\\u6570\\u7ec4\\u4e2d\\u67d0\\u4e9b\\u6570\\u5b57\\u662f\\u91cd\\u590d\\u7684\\uff0c\\u4f46\\u4e0d\\u77e5\\u9053\\u6709\\u51e0\\u4e2a\\u6570\\u5b57\\u91cd\\u590d\\u4e86\\uff0c\\u4e5f\\u4e0d\\u77e5\\u9053\\u6bcf\\u4e2a\\u6570\\u5b57\\u91cd\\u590d\\u4e86\\u51e0\\u6b21\\u3002\\u8bf7\\u627e\\u51fa\\u6570\\u7ec4\\u4e2d\\u4efb\\u610f\\u4e00\\u4e2a\\u91cd\\u590d\\u7684\\u6570\\u5b57\\u3002\\n\\n**\\u793a\\u4f8b 1\\uff1a**\\n\\n```\\n\\u8f93\\u5165\\uff1a\\n[2, 3, 1, 0, 2, 5, 3]\\n\\u8f93\\u51fa\\uff1a2 \\u6216 3 \\n```\\n\\n \\n\\n**\\u9650\\u5236\\uff1a**\\n\\n```\\n2 <= n <= 100000\\n```\\n\\n\"}]}','green','2020-08-12 13:39:51'),(174,'啦啦啦啦','就是看会电视看看刷卡机阿吉\n','<p>就是看会电视看看刷卡机阿吉</p>','{\"ops\": [{\"insert\": \"\\u5c31\\u662f\\u770b\\u4f1a\\u7535\\u89c6\\u770b\\u770b\\u5237\\u5361\\u673a\\u963f\\u5409\\n\"}]}','white','2020-08-12 23:05:24'),(175,'事务的概念','概念：事务（Transaction）是一个操作序列，不可分割的工作单位，以BEGIN TRANSACTION开始，以ROLLBACK/COMMIT结束\n','<p>概念：事务（Transaction）是一个操作序列，不可分割的工作单位，以BEGIN TRANSACTION开始，以ROLLBACK/COMMIT结束</p>','{\"ops\": [{\"insert\": \"\\u6982\\u5ff5\\uff1a\\u4e8b\\u52a1\\uff08Transaction\\uff09\\u662f\\u4e00\\u4e2a\\u64cd\\u4f5c\\u5e8f\\u5217\\uff0c\\u4e0d\\u53ef\\u5206\\u5272\\u7684\\u5de5\\u4f5c\\u5355\\u4f4d\\uff0c\\u4ee5BEGIN TRANSACTION\\u5f00\\u59cb\\uff0c\\u4ee5ROLLBACK/COMMIT\\u7ed3\\u675f\\n\"}]}','white','2020-08-14 11:22:49'),(176,'事务的特性','特性（ACID）：\n\n- **原子性**（Atomicity）：逻辑上是不可分割的操作单元，事务的所有操作要么全部提交成功，要么全部失败回滚（用回滚日志实现，反向执行日志中的操作）；\n- **一致性**（Consistency）：事务的执行必须使数据库保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的；\n- **隔离性**（Isolation）：一个事务所做的修改在最终提交以前，对其它事务是不可见的（并发执行的事务之间不能相互影响）；\n- **持久性**（Durability）：一旦事务提交成功，对数据的修改是永久性的\n','<p>特性（ACID）：</p><p><br></p><p>- **原子性**（Atomicity）：逻辑上是不可分割的操作单元，事务的所有操作要么全部提交成功，要么全部失败回滚（用回滚日志实现，反向执行日志中的操作）；</p><p>- **一致性**（Consistency）：事务的执行必须使数据库保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的；</p><p>- **隔离性**（Isolation）：一个事务所做的修改在最终提交以前，对其它事务是不可见的（并发执行的事务之间不能相互影响）；</p><p>- **持久性**（Durability）：一旦事务提交成功，对数据的修改是永久性的</p>','{\"ops\": [{\"insert\": \"\\u7279\\u6027\\uff08ACID\\uff09\\uff1a\\n\\n- **\\u539f\\u5b50\\u6027**\\uff08Atomicity\\uff09\\uff1a\\u903b\\u8f91\\u4e0a\\u662f\\u4e0d\\u53ef\\u5206\\u5272\\u7684\\u64cd\\u4f5c\\u5355\\u5143\\uff0c\\u4e8b\\u52a1\\u7684\\u6240\\u6709\\u64cd\\u4f5c\\u8981\\u4e48\\u5168\\u90e8\\u63d0\\u4ea4\\u6210\\u529f\\uff0c\\u8981\\u4e48\\u5168\\u90e8\\u5931\\u8d25\\u56de\\u6eda\\uff08\\u7528\\u56de\\u6eda\\u65e5\\u5fd7\\u5b9e\\u73b0\\uff0c\\u53cd\\u5411\\u6267\\u884c\\u65e5\\u5fd7\\u4e2d\\u7684\\u64cd\\u4f5c\\uff09\\uff1b\\n- **\\u4e00\\u81f4\\u6027**\\uff08Consistency\\uff09\\uff1a\\u4e8b\\u52a1\\u7684\\u6267\\u884c\\u5fc5\\u987b\\u4f7f\\u6570\\u636e\\u5e93\\u4fdd\\u6301\\u4e00\\u81f4\\u6027\\u72b6\\u6001\\u3002\\u5728\\u4e00\\u81f4\\u6027\\u72b6\\u6001\\u4e0b\\uff0c\\u6240\\u6709\\u4e8b\\u52a1\\u5bf9\\u4e00\\u4e2a\\u6570\\u636e\\u7684\\u8bfb\\u53d6\\u7ed3\\u679c\\u90fd\\u662f\\u76f8\\u540c\\u7684\\uff1b\\n- **\\u9694\\u79bb\\u6027**\\uff08Isolation\\uff09\\uff1a\\u4e00\\u4e2a\\u4e8b\\u52a1\\u6240\\u505a\\u7684\\u4fee\\u6539\\u5728\\u6700\\u7ec8\\u63d0\\u4ea4\\u4ee5\\u524d\\uff0c\\u5bf9\\u5176\\u5b83\\u4e8b\\u52a1\\u662f\\u4e0d\\u53ef\\u89c1\\u7684\\uff08\\u5e76\\u53d1\\u6267\\u884c\\u7684\\u4e8b\\u52a1\\u4e4b\\u95f4\\u4e0d\\u80fd\\u76f8\\u4e92\\u5f71\\u54cd\\uff09\\uff1b\\n- **\\u6301\\u4e45\\u6027**\\uff08Durability\\uff09\\uff1a\\u4e00\\u65e6\\u4e8b\\u52a1\\u63d0\\u4ea4\\u6210\\u529f\\uff0c\\u5bf9\\u6570\\u636e\\u7684\\u4fee\\u6539\\u662f\\u6c38\\u4e45\\u6027\\u7684\\n\"}]}','white','2020-08-14 11:25:00'),(177,'数据库会出现哪些并发一致性问题？','- **丢失修改**：一个事务对数据进行了修改，在事务提交之前，另一个事务对同一个数据进行了修改，覆盖了之前的修改；\n\n- **脏读**（Dirty Read）：一个事务读取了被另一个事务修改、但未提交（进行了回滚）的数据，造成两个事务得到的数据不一致；\n\n- **不可重复读**（Nonrepeatable Read）：在同一个事务中，某查询操作在一个时间读取某一行数据和之后一个时间读取该行数据，发现数据已经发生修改（可能被更新或删除了）；\n\n- **幻读**（Phantom Read）：当同一查询多次执行时，由于其它事务在这个数据范围内执行了**插入操作**，会导致每次返回不同的结果集（和不可重复读的区别：针对的是一个数据整体/范围；并且需要是插入操作）\n','<p>- **丢失修改**：一个事务对数据进行了修改，在事务提交之前，另一个事务对同一个数据进行了修改，覆盖了之前的修改；</p><p><br></p><p>- **脏读**（Dirty Read）：一个事务读取了被另一个事务修改、但未提交（进行了回滚）的数据，造成两个事务得到的数据不一致；</p><p><br></p><p>- **不可重复读**（Nonrepeatable Read）：在同一个事务中，某查询操作在一个时间读取某一行数据和之后一个时间读取该行数据，发现数据已经发生修改（可能被更新或删除了）；</p><p><br></p><p>- **幻读**（Phantom Read）：当同一查询多次执行时，由于其它事务在这个数据范围内执行了**插入操作**，会导致每次返回不同的结果集（和不可重复读的区别：针对的是一个数据整体/范围；并且需要是插入操作）</p>','{\"ops\": [{\"insert\": \"- **\\u4e22\\u5931\\u4fee\\u6539**\\uff1a\\u4e00\\u4e2a\\u4e8b\\u52a1\\u5bf9\\u6570\\u636e\\u8fdb\\u884c\\u4e86\\u4fee\\u6539\\uff0c\\u5728\\u4e8b\\u52a1\\u63d0\\u4ea4\\u4e4b\\u524d\\uff0c\\u53e6\\u4e00\\u4e2a\\u4e8b\\u52a1\\u5bf9\\u540c\\u4e00\\u4e2a\\u6570\\u636e\\u8fdb\\u884c\\u4e86\\u4fee\\u6539\\uff0c\\u8986\\u76d6\\u4e86\\u4e4b\\u524d\\u7684\\u4fee\\u6539\\uff1b\\n\\n- **\\u810f\\u8bfb**\\uff08Dirty Read\\uff09\\uff1a\\u4e00\\u4e2a\\u4e8b\\u52a1\\u8bfb\\u53d6\\u4e86\\u88ab\\u53e6\\u4e00\\u4e2a\\u4e8b\\u52a1\\u4fee\\u6539\\u3001\\u4f46\\u672a\\u63d0\\u4ea4\\uff08\\u8fdb\\u884c\\u4e86\\u56de\\u6eda\\uff09\\u7684\\u6570\\u636e\\uff0c\\u9020\\u6210\\u4e24\\u4e2a\\u4e8b\\u52a1\\u5f97\\u5230\\u7684\\u6570\\u636e\\u4e0d\\u4e00\\u81f4\\uff1b\\n\\n- **\\u4e0d\\u53ef\\u91cd\\u590d\\u8bfb**\\uff08Nonrepeatable Read\\uff09\\uff1a\\u5728\\u540c\\u4e00\\u4e2a\\u4e8b\\u52a1\\u4e2d\\uff0c\\u67d0\\u67e5\\u8be2\\u64cd\\u4f5c\\u5728\\u4e00\\u4e2a\\u65f6\\u95f4\\u8bfb\\u53d6\\u67d0\\u4e00\\u884c\\u6570\\u636e\\u548c\\u4e4b\\u540e\\u4e00\\u4e2a\\u65f6\\u95f4\\u8bfb\\u53d6\\u8be5\\u884c\\u6570\\u636e\\uff0c\\u53d1\\u73b0\\u6570\\u636e\\u5df2\\u7ecf\\u53d1\\u751f\\u4fee\\u6539\\uff08\\u53ef\\u80fd\\u88ab\\u66f4\\u65b0\\u6216\\u5220\\u9664\\u4e86\\uff09\\uff1b\\n\\n- **\\u5e7b\\u8bfb**\\uff08Phantom Read\\uff09\\uff1a\\u5f53\\u540c\\u4e00\\u67e5\\u8be2\\u591a\\u6b21\\u6267\\u884c\\u65f6\\uff0c\\u7531\\u4e8e\\u5176\\u5b83\\u4e8b\\u52a1\\u5728\\u8fd9\\u4e2a\\u6570\\u636e\\u8303\\u56f4\\u5185\\u6267\\u884c\\u4e86**\\u63d2\\u5165\\u64cd\\u4f5c**\\uff0c\\u4f1a\\u5bfc\\u81f4\\u6bcf\\u6b21\\u8fd4\\u56de\\u4e0d\\u540c\\u7684\\u7ed3\\u679c\\u96c6\\uff08\\u548c\\u4e0d\\u53ef\\u91cd\\u590d\\u8bfb\\u7684\\u533a\\u522b\\uff1a\\u9488\\u5bf9\\u7684\\u662f\\u4e00\\u4e2a\\u6570\\u636e\\u6574\\u4f53/\\u8303\\u56f4\\uff1b\\u5e76\\u4e14\\u9700\\u8981\\u662f\\u63d2\\u5165\\u64cd\\u4f5c\\uff09\\n\"}]}','white','2020-08-14 11:26:03'),(178,'数据库的四种隔离级别？','- **未提交读**（Read Uncommited）：在一个事务提交之前，它的执行结果对其它事务也是可见的。会导致脏读、不可重复读、幻读；\n\n- **提交读**（Read Commited）：一个事务只能看见已经提交的事务所作的改变。可避免脏读问题；\n\n- **可重复读**（Repeatable Read）：可以确保同一个事务在多次读取同样的数据时得到相同的结果。（MySQL的默认隔离级别）。可避免不可重复读；\n\n- **可串行化**（Serializable）：强制事务串行执行，使之不可能相互冲突，从而解决幻读问题。可能导致大量的超时现象和锁竞争，实际很少使用。\n','<p>- **未提交读**（Read Uncommited）：在一个事务提交之前，它的执行结果对其它事务也是可见的。会导致脏读、不可重复读、幻读；</p><p><br></p><p>- **提交读**（Read Commited）：一个事务只能看见已经提交的事务所作的改变。可避免脏读问题；</p><p><br></p><p>- **可重复读**（Repeatable Read）：可以确保同一个事务在多次读取同样的数据时得到相同的结果。（MySQL的默认隔离级别）。可避免不可重复读；</p><p><br></p><p>- **可串行化**（Serializable）：强制事务串行执行，使之不可能相互冲突，从而解决幻读问题。可能导致大量的超时现象和锁竞争，实际很少使用。</p>','{\"ops\": [{\"insert\": \"- **\\u672a\\u63d0\\u4ea4\\u8bfb**\\uff08Read Uncommited\\uff09\\uff1a\\u5728\\u4e00\\u4e2a\\u4e8b\\u52a1\\u63d0\\u4ea4\\u4e4b\\u524d\\uff0c\\u5b83\\u7684\\u6267\\u884c\\u7ed3\\u679c\\u5bf9\\u5176\\u5b83\\u4e8b\\u52a1\\u4e5f\\u662f\\u53ef\\u89c1\\u7684\\u3002\\u4f1a\\u5bfc\\u81f4\\u810f\\u8bfb\\u3001\\u4e0d\\u53ef\\u91cd\\u590d\\u8bfb\\u3001\\u5e7b\\u8bfb\\uff1b\\n\\n- **\\u63d0\\u4ea4\\u8bfb**\\uff08Read Commited\\uff09\\uff1a\\u4e00\\u4e2a\\u4e8b\\u52a1\\u53ea\\u80fd\\u770b\\u89c1\\u5df2\\u7ecf\\u63d0\\u4ea4\\u7684\\u4e8b\\u52a1\\u6240\\u4f5c\\u7684\\u6539\\u53d8\\u3002\\u53ef\\u907f\\u514d\\u810f\\u8bfb\\u95ee\\u9898\\uff1b\\n\\n- **\\u53ef\\u91cd\\u590d\\u8bfb**\\uff08Repeatable Read\\uff09\\uff1a\\u53ef\\u4ee5\\u786e\\u4fdd\\u540c\\u4e00\\u4e2a\\u4e8b\\u52a1\\u5728\\u591a\\u6b21\\u8bfb\\u53d6\\u540c\\u6837\\u7684\\u6570\\u636e\\u65f6\\u5f97\\u5230\\u76f8\\u540c\\u7684\\u7ed3\\u679c\\u3002\\uff08MySQL\\u7684\\u9ed8\\u8ba4\\u9694\\u79bb\\u7ea7\\u522b\\uff09\\u3002\\u53ef\\u907f\\u514d\\u4e0d\\u53ef\\u91cd\\u590d\\u8bfb\\uff1b\\n\\n- **\\u53ef\\u4e32\\u884c\\u5316**\\uff08Serializable\\uff09\\uff1a\\u5f3a\\u5236\\u4e8b\\u52a1\\u4e32\\u884c\\u6267\\u884c\\uff0c\\u4f7f\\u4e4b\\u4e0d\\u53ef\\u80fd\\u76f8\\u4e92\\u51b2\\u7a81\\uff0c\\u4ece\\u800c\\u89e3\\u51b3\\u5e7b\\u8bfb\\u95ee\\u9898\\u3002\\u53ef\\u80fd\\u5bfc\\u81f4\\u5927\\u91cf\\u7684\\u8d85\\u65f6\\u73b0\\u8c61\\u548c\\u9501\\u7ade\\u4e89\\uff0c\\u5b9e\\u9645\\u5f88\\u5c11\\u4f7f\\u7528\\u3002\\n\"}]}','white','2020-08-14 11:26:41'),(179,'什么是乐观锁和悲观锁？','- 悲观锁：认为数据随时会被修改，因此每次读取数据之前都会上锁，防止其它事务读取或修改数据；应用于**数据更新比较频繁**的场景；\n\n- 乐观锁：操作数据时不会上锁，但是更新时会判断在此期间有没有别的事务更新这个数据，若被更新过，则失败重试；适用于**读多写少**的场景。乐观锁的实现方式有：\n  - 加一个版本号或者时间戳字段，每次数据更新时同时更新这个字段；\n  - 先读取想要更新的字段或者所有字段，更新的时候比较一下，只有字段没有变化才进行更新\n','<p>- 悲观锁：认为数据随时会被修改，因此每次读取数据之前都会上锁，防止其它事务读取或修改数据；应用于**数据更新比较频繁**的场景；</p><p><br></p><p>- 乐观锁：操作数据时不会上锁，但是更新时会判断在此期间有没有别的事务更新这个数据，若被更新过，则失败重试；适用于**读多写少**的场景。乐观锁的实现方式有：</p><p>  - 加一个版本号或者时间戳字段，每次数据更新时同时更新这个字段；</p><p>  - 先读取想要更新的字段或者所有字段，更新的时候比较一下，只有字段没有变化才进行更新</p>','{\"ops\": [{\"insert\": \"- \\u60b2\\u89c2\\u9501\\uff1a\\u8ba4\\u4e3a\\u6570\\u636e\\u968f\\u65f6\\u4f1a\\u88ab\\u4fee\\u6539\\uff0c\\u56e0\\u6b64\\u6bcf\\u6b21\\u8bfb\\u53d6\\u6570\\u636e\\u4e4b\\u524d\\u90fd\\u4f1a\\u4e0a\\u9501\\uff0c\\u9632\\u6b62\\u5176\\u5b83\\u4e8b\\u52a1\\u8bfb\\u53d6\\u6216\\u4fee\\u6539\\u6570\\u636e\\uff1b\\u5e94\\u7528\\u4e8e**\\u6570\\u636e\\u66f4\\u65b0\\u6bd4\\u8f83\\u9891\\u7e41**\\u7684\\u573a\\u666f\\uff1b\\n\\n- \\u4e50\\u89c2\\u9501\\uff1a\\u64cd\\u4f5c\\u6570\\u636e\\u65f6\\u4e0d\\u4f1a\\u4e0a\\u9501\\uff0c\\u4f46\\u662f\\u66f4\\u65b0\\u65f6\\u4f1a\\u5224\\u65ad\\u5728\\u6b64\\u671f\\u95f4\\u6709\\u6ca1\\u6709\\u522b\\u7684\\u4e8b\\u52a1\\u66f4\\u65b0\\u8fd9\\u4e2a\\u6570\\u636e\\uff0c\\u82e5\\u88ab\\u66f4\\u65b0\\u8fc7\\uff0c\\u5219\\u5931\\u8d25\\u91cd\\u8bd5\\uff1b\\u9002\\u7528\\u4e8e**\\u8bfb\\u591a\\u5199\\u5c11**\\u7684\\u573a\\u666f\\u3002\\u4e50\\u89c2\\u9501\\u7684\\u5b9e\\u73b0\\u65b9\\u5f0f\\u6709\\uff1a\\n  - \\u52a0\\u4e00\\u4e2a\\u7248\\u672c\\u53f7\\u6216\\u8005\\u65f6\\u95f4\\u6233\\u5b57\\u6bb5\\uff0c\\u6bcf\\u6b21\\u6570\\u636e\\u66f4\\u65b0\\u65f6\\u540c\\u65f6\\u66f4\\u65b0\\u8fd9\\u4e2a\\u5b57\\u6bb5\\uff1b\\n  - \\u5148\\u8bfb\\u53d6\\u60f3\\u8981\\u66f4\\u65b0\\u7684\\u5b57\\u6bb5\\u6216\\u8005\\u6240\\u6709\\u5b57\\u6bb5\\uff0c\\u66f4\\u65b0\\u7684\\u65f6\\u5019\\u6bd4\\u8f83\\u4e00\\u4e0b\\uff0c\\u53ea\\u6709\\u5b57\\u6bb5\\u6ca1\\u6709\\u53d8\\u5316\\u624d\\u8fdb\\u884c\\u66f4\\u65b0\\n\"}]}','white','2020-08-14 11:27:13'),(180,'常见的封锁类型？','意向锁是 InnoDB 自动加的， 不需用户干预。 \n对于 UPDATE、 DELETE 和 INSERT 语句， InnoDB\n会自动给涉及数据集加排他锁（X)；\n对于普通 SELECT 语句，InnoDB 不会加任何锁；\n事务可以通过以下语句显式给记录集加共享锁或排他锁：\n\n共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE。 其他 session 仍然可以查询记录，并也可以对该记录加 share mode 的共享锁。但是如果当前事务需要对该记录进行更新操作，则很有可能造成死锁。\n\n排他锁（X)：SELECT * FROM table_name WHERE ... FOR UPDATE。其他 session 可以查询该记录，但是不能对该记录加共享锁或排他锁，而是等待获得锁\n\n- **排它锁**（Exclusive Lock）/ X锁：事务对数据加上X锁时，只允许此事务读取和修改此数据，并且其它事务不能对该数据加任何锁；\n- **共享锁**（Shared Lock）/ S锁：加了S锁后，该事务只能对数据进行读取而不能修改，并且其它事务只能加S锁，不能加X锁\n- **意向锁**（Intention Locks）：\n  - 一个事务在获得某个**数据行**对象的 S 锁之前，必须先获得**整个表**的 IS 锁或更强的锁；\n  - 一个事务在获得某个数据行对象的 X 锁之前，必须先获得整个表的 IX 锁；\n  - IS/IX 锁之间都是兼容的；\n  - 好处：如果一个事务想要对整个表加X锁，就需要先检测是否有其它事务对该表或者该表中的某一行加了锁，这种检测非常耗时。有了意向锁之后，只需要检测整个表是否存在IX/IS/X/S锁就行了\n','<p>意向锁是 InnoDB 自动加的， 不需用户干预。 </p><p>对于 UPDATE、 DELETE 和 INSERT 语句， InnoDB</p><p>会自动给涉及数据集加排他锁（X)；</p><p>对于普通 SELECT 语句，InnoDB 不会加任何锁；</p><p>事务可以通过以下语句显式给记录集加共享锁或排他锁：</p><p><br></p><p>共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE。 其他 session 仍然可以查询记录，并也可以对该记录加 share mode 的共享锁。但是如果当前事务需要对该记录进行更新操作，则很有可能造成死锁。</p><p><br></p><p>排他锁（X)：SELECT * FROM table_name WHERE ... FOR UPDATE。其他 session 可以查询该记录，但是不能对该记录加共享锁或排他锁，而是等待获得锁</p><p><br></p><p>- **排它锁**（Exclusive Lock）/ X锁：事务对数据加上X锁时，只允许此事务读取和修改此数据，并且其它事务不能对该数据加任何锁；</p><p>- **共享锁**（Shared Lock）/ S锁：加了S锁后，该事务只能对数据进行读取而不能修改，并且其它事务只能加S锁，不能加X锁</p><p>- **意向锁**（Intention Locks）：</p><p>  - 一个事务在获得某个**数据行**对象的 S 锁之前，必须先获得**整个表**的 IS 锁或更强的锁；</p><p>  - 一个事务在获得某个数据行对象的 X 锁之前，必须先获得整个表的 IX 锁；</p><p>  - IS/IX 锁之间都是兼容的；</p><p>  - 好处：如果一个事务想要对整个表加X锁，就需要先检测是否有其它事务对该表或者该表中的某一行加了锁，这种检测非常耗时。有了意向锁之后，只需要检测整个表是否存在IX/IS/X/S锁就行了</p>','{\"ops\": [{\"insert\": \"\\u610f\\u5411\\u9501\\u662f InnoDB \\u81ea\\u52a8\\u52a0\\u7684\\uff0c \\u4e0d\\u9700\\u7528\\u6237\\u5e72\\u9884\\u3002 \\n\\u5bf9\\u4e8e UPDATE\\u3001 DELETE \\u548c INSERT \\u8bed\\u53e5\\uff0c InnoDB\\n\\u4f1a\\u81ea\\u52a8\\u7ed9\\u6d89\\u53ca\\u6570\\u636e\\u96c6\\u52a0\\u6392\\u4ed6\\u9501\\uff08X)\\uff1b\\n\\u5bf9\\u4e8e\\u666e\\u901a SELECT \\u8bed\\u53e5\\uff0cInnoDB \\u4e0d\\u4f1a\\u52a0\\u4efb\\u4f55\\u9501\\uff1b\\n\\u4e8b\\u52a1\\u53ef\\u4ee5\\u901a\\u8fc7\\u4ee5\\u4e0b\\u8bed\\u53e5\\u663e\\u5f0f\\u7ed9\\u8bb0\\u5f55\\u96c6\\u52a0\\u5171\\u4eab\\u9501\\u6216\\u6392\\u4ed6\\u9501\\uff1a\\n\\n\\u5171\\u4eab\\u9501\\uff08S\\uff09\\uff1aSELECT * FROM table_name WHERE ... LOCK IN SHARE MODE\\u3002 \\u5176\\u4ed6 session \\u4ecd\\u7136\\u53ef\\u4ee5\\u67e5\\u8be2\\u8bb0\\u5f55\\uff0c\\u5e76\\u4e5f\\u53ef\\u4ee5\\u5bf9\\u8be5\\u8bb0\\u5f55\\u52a0 share mode \\u7684\\u5171\\u4eab\\u9501\\u3002\\u4f46\\u662f\\u5982\\u679c\\u5f53\\u524d\\u4e8b\\u52a1\\u9700\\u8981\\u5bf9\\u8be5\\u8bb0\\u5f55\\u8fdb\\u884c\\u66f4\\u65b0\\u64cd\\u4f5c\\uff0c\\u5219\\u5f88\\u6709\\u53ef\\u80fd\\u9020\\u6210\\u6b7b\\u9501\\u3002\\n\\n\\u6392\\u4ed6\\u9501\\uff08X)\\uff1aSELECT * FROM table_name WHERE ... FOR UPDATE\\u3002\\u5176\\u4ed6 session \\u53ef\\u4ee5\\u67e5\\u8be2\\u8be5\\u8bb0\\u5f55\\uff0c\\u4f46\\u662f\\u4e0d\\u80fd\\u5bf9\\u8be5\\u8bb0\\u5f55\\u52a0\\u5171\\u4eab\\u9501\\u6216\\u6392\\u4ed6\\u9501\\uff0c\\u800c\\u662f\\u7b49\\u5f85\\u83b7\\u5f97\\u9501\\n\\n- **\\u6392\\u5b83\\u9501**\\uff08Exclusive Lock\\uff09/ X\\u9501\\uff1a\\u4e8b\\u52a1\\u5bf9\\u6570\\u636e\\u52a0\\u4e0aX\\u9501\\u65f6\\uff0c\\u53ea\\u5141\\u8bb8\\u6b64\\u4e8b\\u52a1\\u8bfb\\u53d6\\u548c\\u4fee\\u6539\\u6b64\\u6570\\u636e\\uff0c\\u5e76\\u4e14\\u5176\\u5b83\\u4e8b\\u52a1\\u4e0d\\u80fd\\u5bf9\\u8be5\\u6570\\u636e\\u52a0\\u4efb\\u4f55\\u9501\\uff1b\\n- **\\u5171\\u4eab\\u9501**\\uff08Shared Lock\\uff09/ S\\u9501\\uff1a\\u52a0\\u4e86S\\u9501\\u540e\\uff0c\\u8be5\\u4e8b\\u52a1\\u53ea\\u80fd\\u5bf9\\u6570\\u636e\\u8fdb\\u884c\\u8bfb\\u53d6\\u800c\\u4e0d\\u80fd\\u4fee\\u6539\\uff0c\\u5e76\\u4e14\\u5176\\u5b83\\u4e8b\\u52a1\\u53ea\\u80fd\\u52a0S\\u9501\\uff0c\\u4e0d\\u80fd\\u52a0X\\u9501\\n- **\\u610f\\u5411\\u9501**\\uff08Intention Locks\\uff09\\uff1a\\n  - \\u4e00\\u4e2a\\u4e8b\\u52a1\\u5728\\u83b7\\u5f97\\u67d0\\u4e2a**\\u6570\\u636e\\u884c**\\u5bf9\\u8c61\\u7684 S \\u9501\\u4e4b\\u524d\\uff0c\\u5fc5\\u987b\\u5148\\u83b7\\u5f97**\\u6574\\u4e2a\\u8868**\\u7684 IS \\u9501\\u6216\\u66f4\\u5f3a\\u7684\\u9501\\uff1b\\n  - \\u4e00\\u4e2a\\u4e8b\\u52a1\\u5728\\u83b7\\u5f97\\u67d0\\u4e2a\\u6570\\u636e\\u884c\\u5bf9\\u8c61\\u7684 X \\u9501\\u4e4b\\u524d\\uff0c\\u5fc5\\u987b\\u5148\\u83b7\\u5f97\\u6574\\u4e2a\\u8868\\u7684 IX \\u9501\\uff1b\\n  - IS/IX \\u9501\\u4e4b\\u95f4\\u90fd\\u662f\\u517c\\u5bb9\\u7684\\uff1b\\n  - \\u597d\\u5904\\uff1a\\u5982\\u679c\\u4e00\\u4e2a\\u4e8b\\u52a1\\u60f3\\u8981\\u5bf9\\u6574\\u4e2a\\u8868\\u52a0X\\u9501\\uff0c\\u5c31\\u9700\\u8981\\u5148\\u68c0\\u6d4b\\u662f\\u5426\\u6709\\u5176\\u5b83\\u4e8b\\u52a1\\u5bf9\\u8be5\\u8868\\u6216\\u8005\\u8be5\\u8868\\u4e2d\\u7684\\u67d0\\u4e00\\u884c\\u52a0\\u4e86\\u9501\\uff0c\\u8fd9\\u79cd\\u68c0\\u6d4b\\u975e\\u5e38\\u8017\\u65f6\\u3002\\u6709\\u4e86\\u610f\\u5411\\u9501\\u4e4b\\u540e\\uff0c\\u53ea\\u9700\\u8981\\u68c0\\u6d4b\\u6574\\u4e2a\\u8868\\u662f\\u5426\\u5b58\\u5728IX/IS/X/S\\u9501\\u5c31\\u884c\\u4e86\\n\"}]}','white','2020-08-14 11:29:57'),(181,'锁的作用','用于管理对共享资源的并发访问，保证数据库的完整性和一致性\n','<p>用于管理对共享资源的并发访问，保证数据库的完整性和一致性</p>','{\"ops\": [{\"insert\": \"\\u7528\\u4e8e\\u7ba1\\u7406\\u5bf9\\u5171\\u4eab\\u8d44\\u6e90\\u7684\\u5e76\\u53d1\\u8bbf\\u95ee\\uff0c\\u4fdd\\u8bc1\\u6570\\u636e\\u5e93\\u7684\\u5b8c\\u6574\\u6027\\u548c\\u4e00\\u81f4\\u6027\\n\"}]}','white','2020-08-14 11:30:14'),(182,'封锁粒度的概念','MySQL 中提供了两种封锁粒度：**行级锁**以及**表级锁**。\n\n封锁粒度小：\n\n- 好处：锁定的数据量越少，发生锁争用的可能就越小，系统的**并发程度**就越高；\n- 坏处：**系统开销**大（加锁、释放锁、检查锁的状态都需要消耗资源）\n','<p>MySQL 中提供了两种封锁粒度：**行级锁**以及**表级锁**。</p><p><br></p><p>封锁粒度小：</p><p><br></p><p>- 好处：锁定的数据量越少，发生锁争用的可能就越小，系统的**并发程度**就越高；</p><p>- 坏处：**系统开销**大（加锁、释放锁、检查锁的状态都需要消耗资源）</p>','{\"ops\": [{\"insert\": \"MySQL \\u4e2d\\u63d0\\u4f9b\\u4e86\\u4e24\\u79cd\\u5c01\\u9501\\u7c92\\u5ea6\\uff1a**\\u884c\\u7ea7\\u9501**\\u4ee5\\u53ca**\\u8868\\u7ea7\\u9501**\\u3002\\n\\n\\u5c01\\u9501\\u7c92\\u5ea6\\u5c0f\\uff1a\\n\\n- \\u597d\\u5904\\uff1a\\u9501\\u5b9a\\u7684\\u6570\\u636e\\u91cf\\u8d8a\\u5c11\\uff0c\\u53d1\\u751f\\u9501\\u4e89\\u7528\\u7684\\u53ef\\u80fd\\u5c31\\u8d8a\\u5c0f\\uff0c\\u7cfb\\u7edf\\u7684**\\u5e76\\u53d1\\u7a0b\\u5ea6**\\u5c31\\u8d8a\\u9ad8\\uff1b\\n- \\u574f\\u5904\\uff1a**\\u7cfb\\u7edf\\u5f00\\u9500**\\u5927\\uff08\\u52a0\\u9501\\u3001\\u91ca\\u653e\\u9501\\u3001\\u68c0\\u67e5\\u9501\\u7684\\u72b6\\u6001\\u90fd\\u9700\\u8981\\u6d88\\u8017\\u8d44\\u6e90\\uff09\\n\"}]}','white','2020-08-14 11:30:59'),(183,'MySQL加锁','```\nSELECT ... LOCK In SHARE MODE;\nSELECT ... FOR UPDATE;\n```\n','<p>```</p><p>SELECT ... LOCK In SHARE MODE;</p><p>SELECT ... FOR UPDATE;</p><p>```</p>','{\"ops\": [{\"insert\": \"```\\nSELECT ... LOCK In SHARE MODE;\\nSELECT ... FOR UPDATE;\\n```\\n\"}]}','white','2020-08-14 11:31:44'),(184,'什么是三级封锁协议？','- 一级封锁协议：事务在修改数据之前必须先对其加X锁，直到事务结束才释放。可以解决丢失修改问题（两个事务不能同时对一个数据加X锁，避免了修改被覆盖）；\n- 二级封锁协议：在一级的基础上，事务在读取数据之前必须先加S锁，读完后释放。可以解决脏读问题（如果已经有事务在修改数据，就意味着已经加了X锁，此时想要读取数据的事务并不能加S锁，也就无法进行读取，避免了读取脏数据）；\n- 三级封锁协议：在二级的基础上，事务在读取数据之前必须先加S锁，直到事务结束才能释放。可以解决不可重复读问题（避免了在事务结束前其它事务对数据加X锁进行修改，保证了事务期间数据不会被其它事务更新）\n','<p>- 一级封锁协议：事务在修改数据之前必须先对其加X锁，直到事务结束才释放。可以解决丢失修改问题（两个事务不能同时对一个数据加X锁，避免了修改被覆盖）；</p><p>- 二级封锁协议：在一级的基础上，事务在读取数据之前必须先加S锁，读完后释放。可以解决脏读问题（如果已经有事务在修改数据，就意味着已经加了X锁，此时想要读取数据的事务并不能加S锁，也就无法进行读取，避免了读取脏数据）；</p><p>- 三级封锁协议：在二级的基础上，事务在读取数据之前必须先加S锁，直到事务结束才能释放。可以解决不可重复读问题（避免了在事务结束前其它事务对数据加X锁进行修改，保证了事务期间数据不会被其它事务更新）</p>','{\"ops\": [{\"insert\": \"- \\u4e00\\u7ea7\\u5c01\\u9501\\u534f\\u8bae\\uff1a\\u4e8b\\u52a1\\u5728\\u4fee\\u6539\\u6570\\u636e\\u4e4b\\u524d\\u5fc5\\u987b\\u5148\\u5bf9\\u5176\\u52a0X\\u9501\\uff0c\\u76f4\\u5230\\u4e8b\\u52a1\\u7ed3\\u675f\\u624d\\u91ca\\u653e\\u3002\\u53ef\\u4ee5\\u89e3\\u51b3\\u4e22\\u5931\\u4fee\\u6539\\u95ee\\u9898\\uff08\\u4e24\\u4e2a\\u4e8b\\u52a1\\u4e0d\\u80fd\\u540c\\u65f6\\u5bf9\\u4e00\\u4e2a\\u6570\\u636e\\u52a0X\\u9501\\uff0c\\u907f\\u514d\\u4e86\\u4fee\\u6539\\u88ab\\u8986\\u76d6\\uff09\\uff1b\\n- \\u4e8c\\u7ea7\\u5c01\\u9501\\u534f\\u8bae\\uff1a\\u5728\\u4e00\\u7ea7\\u7684\\u57fa\\u7840\\u4e0a\\uff0c\\u4e8b\\u52a1\\u5728\\u8bfb\\u53d6\\u6570\\u636e\\u4e4b\\u524d\\u5fc5\\u987b\\u5148\\u52a0S\\u9501\\uff0c\\u8bfb\\u5b8c\\u540e\\u91ca\\u653e\\u3002\\u53ef\\u4ee5\\u89e3\\u51b3\\u810f\\u8bfb\\u95ee\\u9898\\uff08\\u5982\\u679c\\u5df2\\u7ecf\\u6709\\u4e8b\\u52a1\\u5728\\u4fee\\u6539\\u6570\\u636e\\uff0c\\u5c31\\u610f\\u5473\\u7740\\u5df2\\u7ecf\\u52a0\\u4e86X\\u9501\\uff0c\\u6b64\\u65f6\\u60f3\\u8981\\u8bfb\\u53d6\\u6570\\u636e\\u7684\\u4e8b\\u52a1\\u5e76\\u4e0d\\u80fd\\u52a0S\\u9501\\uff0c\\u4e5f\\u5c31\\u65e0\\u6cd5\\u8fdb\\u884c\\u8bfb\\u53d6\\uff0c\\u907f\\u514d\\u4e86\\u8bfb\\u53d6\\u810f\\u6570\\u636e\\uff09\\uff1b\\n- \\u4e09\\u7ea7\\u5c01\\u9501\\u534f\\u8bae\\uff1a\\u5728\\u4e8c\\u7ea7\\u7684\\u57fa\\u7840\\u4e0a\\uff0c\\u4e8b\\u52a1\\u5728\\u8bfb\\u53d6\\u6570\\u636e\\u4e4b\\u524d\\u5fc5\\u987b\\u5148\\u52a0S\\u9501\\uff0c\\u76f4\\u5230\\u4e8b\\u52a1\\u7ed3\\u675f\\u624d\\u80fd\\u91ca\\u653e\\u3002\\u53ef\\u4ee5\\u89e3\\u51b3\\u4e0d\\u53ef\\u91cd\\u590d\\u8bfb\\u95ee\\u9898\\uff08\\u907f\\u514d\\u4e86\\u5728\\u4e8b\\u52a1\\u7ed3\\u675f\\u524d\\u5176\\u5b83\\u4e8b\\u52a1\\u5bf9\\u6570\\u636e\\u52a0X\\u9501\\u8fdb\\u884c\\u4fee\\u6539\\uff0c\\u4fdd\\u8bc1\\u4e86\\u4e8b\\u52a1\\u671f\\u95f4\\u6570\\u636e\\u4e0d\\u4f1a\\u88ab\\u5176\\u5b83\\u4e8b\\u52a1\\u66f4\\u65b0\\uff09\\n\"}]}','white','2020-08-14 11:31:58'),(185,'什么是两段锁协议？','事务必须严格分为两个阶段对数据进行**加锁和解锁**的操作，第一阶段加锁，第二阶段解锁。也就是说一个事务中一旦释放了锁，就不能再申请新锁了。\n\n**可串行化调度**是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。事务遵循两段锁协议是保证可串行化调度的充分条件。\n','<p>事务必须严格分为两个阶段对数据进行**加锁和解锁**的操作，第一阶段加锁，第二阶段解锁。也就是说一个事务中一旦释放了锁，就不能再申请新锁了。</p><p><br></p><p>**可串行化调度**是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。事务遵循两段锁协议是保证可串行化调度的充分条件。</p>','{\"ops\": [{\"insert\": \"\\u4e8b\\u52a1\\u5fc5\\u987b\\u4e25\\u683c\\u5206\\u4e3a\\u4e24\\u4e2a\\u9636\\u6bb5\\u5bf9\\u6570\\u636e\\u8fdb\\u884c**\\u52a0\\u9501\\u548c\\u89e3\\u9501**\\u7684\\u64cd\\u4f5c\\uff0c\\u7b2c\\u4e00\\u9636\\u6bb5\\u52a0\\u9501\\uff0c\\u7b2c\\u4e8c\\u9636\\u6bb5\\u89e3\\u9501\\u3002\\u4e5f\\u5c31\\u662f\\u8bf4\\u4e00\\u4e2a\\u4e8b\\u52a1\\u4e2d\\u4e00\\u65e6\\u91ca\\u653e\\u4e86\\u9501\\uff0c\\u5c31\\u4e0d\\u80fd\\u518d\\u7533\\u8bf7\\u65b0\\u9501\\u4e86\\u3002\\n\\n**\\u53ef\\u4e32\\u884c\\u5316\\u8c03\\u5ea6**\\u662f\\u6307\\uff0c\\u901a\\u8fc7\\u5e76\\u53d1\\u63a7\\u5236\\uff0c\\u4f7f\\u5f97\\u5e76\\u53d1\\u6267\\u884c\\u7684\\u4e8b\\u52a1\\u7ed3\\u679c\\u4e0e\\u67d0\\u4e2a\\u4e32\\u884c\\u6267\\u884c\\u7684\\u4e8b\\u52a1\\u7ed3\\u679c\\u76f8\\u540c\\u3002\\u4e8b\\u52a1\\u9075\\u5faa\\u4e24\\u6bb5\\u9501\\u534f\\u8bae\\u662f\\u4fdd\\u8bc1\\u53ef\\u4e32\\u884c\\u5316\\u8c03\\u5ea6\\u7684\\u5145\\u5206\\u6761\\u4ef6\\u3002\\n\"}]}','white','2020-08-14 11:32:13'),(186,'什么是 MVCC？','多版本并发控制（Multi-Version Concurrency Control, MVCC），MVCC在每行记录后面都保存有两个隐藏的列，用来存储**创建版本号**和**删除版本号**。\n\n- 创建版本号：创建一个数据行时的事务版本号（**事务版本号**：事务开始时的系统版本号；系统版本号：每开始一个新的事务，系统版本号就会自动递增）；\n- 删除版本号：删除操作时的事务版本号；\n- 各种操作：\n  - 插入操作时，记录创建版本号；\n  - 删除操作时，记录删除版本号；\n  - 更新操作时，先记录删除版本号，再新增一行记录创建版本号；\n  - 查询操作时，要符合以下条件才能被查询出来：删除版本号未定义或大于当前事务版本号（删除操作是在当前事务启动之后做的）；创建版本号小于或等于当前事务版本号（创建操作是事务完成或者在事务启动之前完成）\n\n通过版本号减少了锁的争用，**提高了系统性能**；可以实现**提交读**和**可重复读**两种隔离级别，未提交读无需使用MVCC\n','<p>多版本并发控制（Multi-Version Concurrency Control, MVCC），MVCC在每行记录后面都保存有两个隐藏的列，用来存储**创建版本号**和**删除版本号**。</p><p><br></p><p>- 创建版本号：创建一个数据行时的事务版本号（**事务版本号**：事务开始时的系统版本号；系统版本号：每开始一个新的事务，系统版本号就会自动递增）；</p><p>- 删除版本号：删除操作时的事务版本号；</p><p>- 各种操作：</p><p>  - 插入操作时，记录创建版本号；</p><p>  - 删除操作时，记录删除版本号；</p><p>  - 更新操作时，先记录删除版本号，再新增一行记录创建版本号；</p><p>  - 查询操作时，要符合以下条件才能被查询出来：删除版本号未定义或大于当前事务版本号（删除操作是在当前事务启动之后做的）；创建版本号小于或等于当前事务版本号（创建操作是事务完成或者在事务启动之前完成）</p><p><br></p><p>通过版本号减少了锁的争用，**提高了系统性能**；可以实现**提交读**和**可重复读**两种隔离级别，未提交读无需使用MVCC</p>','{\"ops\": [{\"insert\": \"\\u591a\\u7248\\u672c\\u5e76\\u53d1\\u63a7\\u5236\\uff08Multi-Version Concurrency Control, MVCC\\uff09\\uff0cMVCC\\u5728\\u6bcf\\u884c\\u8bb0\\u5f55\\u540e\\u9762\\u90fd\\u4fdd\\u5b58\\u6709\\u4e24\\u4e2a\\u9690\\u85cf\\u7684\\u5217\\uff0c\\u7528\\u6765\\u5b58\\u50a8**\\u521b\\u5efa\\u7248\\u672c\\u53f7**\\u548c**\\u5220\\u9664\\u7248\\u672c\\u53f7**\\u3002\\n\\n- \\u521b\\u5efa\\u7248\\u672c\\u53f7\\uff1a\\u521b\\u5efa\\u4e00\\u4e2a\\u6570\\u636e\\u884c\\u65f6\\u7684\\u4e8b\\u52a1\\u7248\\u672c\\u53f7\\uff08**\\u4e8b\\u52a1\\u7248\\u672c\\u53f7**\\uff1a\\u4e8b\\u52a1\\u5f00\\u59cb\\u65f6\\u7684\\u7cfb\\u7edf\\u7248\\u672c\\u53f7\\uff1b\\u7cfb\\u7edf\\u7248\\u672c\\u53f7\\uff1a\\u6bcf\\u5f00\\u59cb\\u4e00\\u4e2a\\u65b0\\u7684\\u4e8b\\u52a1\\uff0c\\u7cfb\\u7edf\\u7248\\u672c\\u53f7\\u5c31\\u4f1a\\u81ea\\u52a8\\u9012\\u589e\\uff09\\uff1b\\n- \\u5220\\u9664\\u7248\\u672c\\u53f7\\uff1a\\u5220\\u9664\\u64cd\\u4f5c\\u65f6\\u7684\\u4e8b\\u52a1\\u7248\\u672c\\u53f7\\uff1b\\n- \\u5404\\u79cd\\u64cd\\u4f5c\\uff1a\\n  - \\u63d2\\u5165\\u64cd\\u4f5c\\u65f6\\uff0c\\u8bb0\\u5f55\\u521b\\u5efa\\u7248\\u672c\\u53f7\\uff1b\\n  - \\u5220\\u9664\\u64cd\\u4f5c\\u65f6\\uff0c\\u8bb0\\u5f55\\u5220\\u9664\\u7248\\u672c\\u53f7\\uff1b\\n  - \\u66f4\\u65b0\\u64cd\\u4f5c\\u65f6\\uff0c\\u5148\\u8bb0\\u5f55\\u5220\\u9664\\u7248\\u672c\\u53f7\\uff0c\\u518d\\u65b0\\u589e\\u4e00\\u884c\\u8bb0\\u5f55\\u521b\\u5efa\\u7248\\u672c\\u53f7\\uff1b\\n  - \\u67e5\\u8be2\\u64cd\\u4f5c\\u65f6\\uff0c\\u8981\\u7b26\\u5408\\u4ee5\\u4e0b\\u6761\\u4ef6\\u624d\\u80fd\\u88ab\\u67e5\\u8be2\\u51fa\\u6765\\uff1a\\u5220\\u9664\\u7248\\u672c\\u53f7\\u672a\\u5b9a\\u4e49\\u6216\\u5927\\u4e8e\\u5f53\\u524d\\u4e8b\\u52a1\\u7248\\u672c\\u53f7\\uff08\\u5220\\u9664\\u64cd\\u4f5c\\u662f\\u5728\\u5f53\\u524d\\u4e8b\\u52a1\\u542f\\u52a8\\u4e4b\\u540e\\u505a\\u7684\\uff09\\uff1b\\u521b\\u5efa\\u7248\\u672c\\u53f7\\u5c0f\\u4e8e\\u6216\\u7b49\\u4e8e\\u5f53\\u524d\\u4e8b\\u52a1\\u7248\\u672c\\u53f7\\uff08\\u521b\\u5efa\\u64cd\\u4f5c\\u662f\\u4e8b\\u52a1\\u5b8c\\u6210\\u6216\\u8005\\u5728\\u4e8b\\u52a1\\u542f\\u52a8\\u4e4b\\u524d\\u5b8c\\u6210\\uff09\\n\\n\\u901a\\u8fc7\\u7248\\u672c\\u53f7\\u51cf\\u5c11\\u4e86\\u9501\\u7684\\u4e89\\u7528\\uff0c**\\u63d0\\u9ad8\\u4e86\\u7cfb\\u7edf\\u6027\\u80fd**\\uff1b\\u53ef\\u4ee5\\u5b9e\\u73b0**\\u63d0\\u4ea4\\u8bfb**\\u548c**\\u53ef\\u91cd\\u590d\\u8bfb**\\u4e24\\u79cd\\u9694\\u79bb\\u7ea7\\u522b\\uff0c\\u672a\\u63d0\\u4ea4\\u8bfb\\u65e0\\u9700\\u4f7f\\u7528MVCC\\n\"}]}','white','2020-08-14 11:32:40'),(187,'快照读与当前读','使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销：\n\n```\nselect * from table ...;\n```\n\n当前读读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁：\n\n```\nselect * from table where ? lock in share mode;\nselect * from table where ? for update;\ninsert;\nupdate;\ndelete;\n```\n','<p>使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销：</p><p><br></p><p>```</p><p>select * from table ...;</p><p>```</p><p><br></p><p>当前读读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁：</p><p><br></p><p>```</p><p>select * from table where ? lock in share mode;</p><p>select * from table where ? for update;</p><p>insert;</p><p>update;</p><p>delete;</p><p>```</p>','{\"ops\": [{\"insert\": \"\\u4f7f\\u7528 MVCC \\u8bfb\\u53d6\\u7684\\u662f\\u5feb\\u7167\\u4e2d\\u7684\\u6570\\u636e\\uff0c\\u8fd9\\u6837\\u53ef\\u4ee5\\u51cf\\u5c11\\u52a0\\u9501\\u6240\\u5e26\\u6765\\u7684\\u5f00\\u9500\\uff1a\\n\\n```\\nselect * from table ...;\\n```\\n\\n\\u5f53\\u524d\\u8bfb\\u8bfb\\u53d6\\u7684\\u662f\\u6700\\u65b0\\u7684\\u6570\\u636e\\uff0c\\u9700\\u8981\\u52a0\\u9501\\u3002\\u4ee5\\u4e0b\\u7b2c\\u4e00\\u4e2a\\u8bed\\u53e5\\u9700\\u8981\\u52a0 S \\u9501\\uff0c\\u5176\\u5b83\\u90fd\\u9700\\u8981\\u52a0 X \\u9501\\uff1a\\n\\n```\\nselect * from table where ? lock in share mode;\\nselect * from table where ? for update;\\ninsert;\\nupdate;\\ndelete;\\n```\\n\"}]}','white','2020-08-14 11:34:12'),(188,'数据库的范式？','- **第一范式**（1NF，Normal Form）：**属性不应该是可分的**。举例：如果将“电话”作为一个属性（一列），是不符合1NF的，因为电话这个属性可以分解为家庭电话和移动电话...如果将“移动电话”作为一个属性，就符合1NF；\n\n- **第二范式** 2NF：每个非主属性**完全依赖**于主属性集（候选键集）；\n  - B完全依赖于A，就是说A中的所有属性唯一决定B，属性少了就不能唯一决定，属性多了则有冗余（叫依赖不叫完全依赖）。举例：（学号，课程名）这个主属性集可以唯一决定成绩，但是对于学生姓名这个属性，（学号，课程名）这个属性集就是冗余的，所以学生姓名不完全依赖于（学号，课程名）这一属性集；\n  - 主属性集/候选码集：某一组属性能够唯一确定其它的属性（主键就是从候选键集中选的一个键），而其子集不能，这样的属性组中的属性就是主属性；不在候选码集中的属性成为非主属性；\n  - 可以通过分解来满足 2NF：将（学号，课程名，成绩）做成一张表；（学号，学生姓名）做成另一张表，避免大量的数据冗余；\n    满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；\n\n- **第三范式** 3NF：在 2NF 的基础上，非主属性**不传递依赖**于主属性\n  - 传递依赖：如果C依赖于B，B依赖于A，那么C传递依赖于A；\n  - 3NF在2NF的基础上，消除了非主属性之间的依赖；比如一个表中，主属性有（学号），非主属性有（姓名，院系，院长名），可以看到院长名这个非主属性依赖于院系，传递依赖于学号。消除的办法是分解。\n    必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；\n','<p>- **第一范式**（1NF，Normal Form）：**属性不应该是可分的**。举例：如果将“电话”作为一个属性（一列），是不符合1NF的，因为电话这个属性可以分解为家庭电话和移动电话...如果将“移动电话”作为一个属性，就符合1NF；</p><p><br></p><p>- **第二范式** 2NF：每个非主属性**完全依赖**于主属性集（候选键集）；</p><p>  - B完全依赖于A，就是说A中的所有属性唯一决定B，属性少了就不能唯一决定，属性多了则有冗余（叫依赖不叫完全依赖）。举例：（学号，课程名）这个主属性集可以唯一决定成绩，但是对于学生姓名这个属性，（学号，课程名）这个属性集就是冗余的，所以学生姓名不完全依赖于（学号，课程名）这一属性集；</p><p>  - 主属性集/候选码集：某一组属性能够唯一确定其它的属性（主键就是从候选键集中选的一个键），而其子集不能，这样的属性组中的属性就是主属性；不在候选码集中的属性成为非主属性；</p><p>  - 可以通过分解来满足 2NF：将（学号，课程名，成绩）做成一张表；（学号，学生姓名）做成另一张表，避免大量的数据冗余；</p><p>    满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；</p><p><br></p><p>- **第三范式** 3NF：在 2NF 的基础上，非主属性**不传递依赖**于主属性</p><p>  - 传递依赖：如果C依赖于B，B依赖于A，那么C传递依赖于A；</p><p>  - 3NF在2NF的基础上，消除了非主属性之间的依赖；比如一个表中，主属性有（学号），非主属性有（姓名，院系，院长名），可以看到院长名这个非主属性依赖于院系，传递依赖于学号。消除的办法是分解。</p><p>    必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；</p>','{\"ops\": [{\"insert\": \"- **\\u7b2c\\u4e00\\u8303\\u5f0f**\\uff081NF\\uff0cNormal Form\\uff09\\uff1a**\\u5c5e\\u6027\\u4e0d\\u5e94\\u8be5\\u662f\\u53ef\\u5206\\u7684**\\u3002\\u4e3e\\u4f8b\\uff1a\\u5982\\u679c\\u5c06\\u201c\\u7535\\u8bdd\\u201d\\u4f5c\\u4e3a\\u4e00\\u4e2a\\u5c5e\\u6027\\uff08\\u4e00\\u5217\\uff09\\uff0c\\u662f\\u4e0d\\u7b26\\u54081NF\\u7684\\uff0c\\u56e0\\u4e3a\\u7535\\u8bdd\\u8fd9\\u4e2a\\u5c5e\\u6027\\u53ef\\u4ee5\\u5206\\u89e3\\u4e3a\\u5bb6\\u5ead\\u7535\\u8bdd\\u548c\\u79fb\\u52a8\\u7535\\u8bdd...\\u5982\\u679c\\u5c06\\u201c\\u79fb\\u52a8\\u7535\\u8bdd\\u201d\\u4f5c\\u4e3a\\u4e00\\u4e2a\\u5c5e\\u6027\\uff0c\\u5c31\\u7b26\\u54081NF\\uff1b\\n\\n- **\\u7b2c\\u4e8c\\u8303\\u5f0f** 2NF\\uff1a\\u6bcf\\u4e2a\\u975e\\u4e3b\\u5c5e\\u6027**\\u5b8c\\u5168\\u4f9d\\u8d56**\\u4e8e\\u4e3b\\u5c5e\\u6027\\u96c6\\uff08\\u5019\\u9009\\u952e\\u96c6\\uff09\\uff1b\\n  - B\\u5b8c\\u5168\\u4f9d\\u8d56\\u4e8eA\\uff0c\\u5c31\\u662f\\u8bf4A\\u4e2d\\u7684\\u6240\\u6709\\u5c5e\\u6027\\u552f\\u4e00\\u51b3\\u5b9aB\\uff0c\\u5c5e\\u6027\\u5c11\\u4e86\\u5c31\\u4e0d\\u80fd\\u552f\\u4e00\\u51b3\\u5b9a\\uff0c\\u5c5e\\u6027\\u591a\\u4e86\\u5219\\u6709\\u5197\\u4f59\\uff08\\u53eb\\u4f9d\\u8d56\\u4e0d\\u53eb\\u5b8c\\u5168\\u4f9d\\u8d56\\uff09\\u3002\\u4e3e\\u4f8b\\uff1a\\uff08\\u5b66\\u53f7\\uff0c\\u8bfe\\u7a0b\\u540d\\uff09\\u8fd9\\u4e2a\\u4e3b\\u5c5e\\u6027\\u96c6\\u53ef\\u4ee5\\u552f\\u4e00\\u51b3\\u5b9a\\u6210\\u7ee9\\uff0c\\u4f46\\u662f\\u5bf9\\u4e8e\\u5b66\\u751f\\u59d3\\u540d\\u8fd9\\u4e2a\\u5c5e\\u6027\\uff0c\\uff08\\u5b66\\u53f7\\uff0c\\u8bfe\\u7a0b\\u540d\\uff09\\u8fd9\\u4e2a\\u5c5e\\u6027\\u96c6\\u5c31\\u662f\\u5197\\u4f59\\u7684\\uff0c\\u6240\\u4ee5\\u5b66\\u751f\\u59d3\\u540d\\u4e0d\\u5b8c\\u5168\\u4f9d\\u8d56\\u4e8e\\uff08\\u5b66\\u53f7\\uff0c\\u8bfe\\u7a0b\\u540d\\uff09\\u8fd9\\u4e00\\u5c5e\\u6027\\u96c6\\uff1b\\n  - \\u4e3b\\u5c5e\\u6027\\u96c6/\\u5019\\u9009\\u7801\\u96c6\\uff1a\\u67d0\\u4e00\\u7ec4\\u5c5e\\u6027\\u80fd\\u591f\\u552f\\u4e00\\u786e\\u5b9a\\u5176\\u5b83\\u7684\\u5c5e\\u6027\\uff08\\u4e3b\\u952e\\u5c31\\u662f\\u4ece\\u5019\\u9009\\u952e\\u96c6\\u4e2d\\u9009\\u7684\\u4e00\\u4e2a\\u952e\\uff09\\uff0c\\u800c\\u5176\\u5b50\\u96c6\\u4e0d\\u80fd\\uff0c\\u8fd9\\u6837\\u7684\\u5c5e\\u6027\\u7ec4\\u4e2d\\u7684\\u5c5e\\u6027\\u5c31\\u662f\\u4e3b\\u5c5e\\u6027\\uff1b\\u4e0d\\u5728\\u5019\\u9009\\u7801\\u96c6\\u4e2d\\u7684\\u5c5e\\u6027\\u6210\\u4e3a\\u975e\\u4e3b\\u5c5e\\u6027\\uff1b\\n  - \\u53ef\\u4ee5\\u901a\\u8fc7\\u5206\\u89e3\\u6765\\u6ee1\\u8db3 2NF\\uff1a\\u5c06\\uff08\\u5b66\\u53f7\\uff0c\\u8bfe\\u7a0b\\u540d\\uff0c\\u6210\\u7ee9\\uff09\\u505a\\u6210\\u4e00\\u5f20\\u8868\\uff1b\\uff08\\u5b66\\u53f7\\uff0c\\u5b66\\u751f\\u59d3\\u540d\\uff09\\u505a\\u6210\\u53e6\\u4e00\\u5f20\\u8868\\uff0c\\u907f\\u514d\\u5927\\u91cf\\u7684\\u6570\\u636e\\u5197\\u4f59\\uff1b\\n    \\u6ee1\\u8db31NF\\u540e\\uff0c\\u8981\\u6c42\\u8868\\u4e2d\\u7684\\u6240\\u6709\\u5217\\uff0c\\u90fd\\u5fc5\\u987b\\u4f9d\\u8d56\\u4e8e\\u4e3b\\u952e\\uff0c\\u800c\\u4e0d\\u80fd\\u6709\\u4efb\\u4f55\\u4e00\\u5217\\u4e0e\\u4e3b\\u952e\\u6ca1\\u6709\\u5173\\u7cfb\\uff0c\\u4e5f\\u5c31\\u662f\\u8bf4\\u4e00\\u4e2a\\u8868\\u53ea\\u63cf\\u8ff0\\u4e00\\u4ef6\\u4e8b\\u60c5\\uff1b\\n\\n- **\\u7b2c\\u4e09\\u8303\\u5f0f** 3NF\\uff1a\\u5728 2NF \\u7684\\u57fa\\u7840\\u4e0a\\uff0c\\u975e\\u4e3b\\u5c5e\\u6027**\\u4e0d\\u4f20\\u9012\\u4f9d\\u8d56**\\u4e8e\\u4e3b\\u5c5e\\u6027\\n  - \\u4f20\\u9012\\u4f9d\\u8d56\\uff1a\\u5982\\u679cC\\u4f9d\\u8d56\\u4e8eB\\uff0cB\\u4f9d\\u8d56\\u4e8eA\\uff0c\\u90a3\\u4e48C\\u4f20\\u9012\\u4f9d\\u8d56\\u4e8eA\\uff1b\\n  - 3NF\\u57282NF\\u7684\\u57fa\\u7840\\u4e0a\\uff0c\\u6d88\\u9664\\u4e86\\u975e\\u4e3b\\u5c5e\\u6027\\u4e4b\\u95f4\\u7684\\u4f9d\\u8d56\\uff1b\\u6bd4\\u5982\\u4e00\\u4e2a\\u8868\\u4e2d\\uff0c\\u4e3b\\u5c5e\\u6027\\u6709\\uff08\\u5b66\\u53f7\\uff09\\uff0c\\u975e\\u4e3b\\u5c5e\\u6027\\u6709\\uff08\\u59d3\\u540d\\uff0c\\u9662\\u7cfb\\uff0c\\u9662\\u957f\\u540d\\uff09\\uff0c\\u53ef\\u4ee5\\u770b\\u5230\\u9662\\u957f\\u540d\\u8fd9\\u4e2a\\u975e\\u4e3b\\u5c5e\\u6027\\u4f9d\\u8d56\\u4e8e\\u9662\\u7cfb\\uff0c\\u4f20\\u9012\\u4f9d\\u8d56\\u4e8e\\u5b66\\u53f7\\u3002\\u6d88\\u9664\\u7684\\u529e\\u6cd5\\u662f\\u5206\\u89e3\\u3002\\n    \\u5fc5\\u987b\\u5148\\u6ee1\\u8db3\\u7b2c\\u4e8c\\u8303\\u5f0f\\uff082NF\\uff09\\uff0c\\u8981\\u6c42\\uff1a\\u8868\\u4e2d\\u7684\\u6bcf\\u4e00\\u5217\\u53ea\\u4e0e\\u4e3b\\u952e\\u76f4\\u63a5\\u76f8\\u5173\\u800c\\u4e0d\\u662f\\u95f4\\u63a5\\u76f8\\u5173\\uff0c\\uff08\\u8868\\u4e2d\\u7684\\u6bcf\\u4e00\\u5217\\u53ea\\u80fd\\u4f9d\\u8d56\\u4e8e\\u4e3b\\u952e\\uff09\\uff1b\\n\"}]}','white','2020-08-14 11:34:58'),(189,'不符合范式会出现哪些异常？','- 冗余数据：某些同样的数据多次出现（如学生姓名）；\n- 修改异常：修改了一个记录中的信息，另一个记录中相同的信息却没有修改；\n- 删除异常：删除一个信息，那么也会丢失其它信息（删除一个课程，丢失了一个学生的信息）；\n- 插入异常：无法插入（插入一个还没有课程信息的学生）\n','<p>- 冗余数据：某些同样的数据多次出现（如学生姓名）；</p><p>- 修改异常：修改了一个记录中的信息，另一个记录中相同的信息却没有修改；</p><p>- 删除异常：删除一个信息，那么也会丢失其它信息（删除一个课程，丢失了一个学生的信息）；</p><p>- 插入异常：无法插入（插入一个还没有课程信息的学生）</p>','{\"ops\": [{\"insert\": \"- \\u5197\\u4f59\\u6570\\u636e\\uff1a\\u67d0\\u4e9b\\u540c\\u6837\\u7684\\u6570\\u636e\\u591a\\u6b21\\u51fa\\u73b0\\uff08\\u5982\\u5b66\\u751f\\u59d3\\u540d\\uff09\\uff1b\\n- \\u4fee\\u6539\\u5f02\\u5e38\\uff1a\\u4fee\\u6539\\u4e86\\u4e00\\u4e2a\\u8bb0\\u5f55\\u4e2d\\u7684\\u4fe1\\u606f\\uff0c\\u53e6\\u4e00\\u4e2a\\u8bb0\\u5f55\\u4e2d\\u76f8\\u540c\\u7684\\u4fe1\\u606f\\u5374\\u6ca1\\u6709\\u4fee\\u6539\\uff1b\\n- \\u5220\\u9664\\u5f02\\u5e38\\uff1a\\u5220\\u9664\\u4e00\\u4e2a\\u4fe1\\u606f\\uff0c\\u90a3\\u4e48\\u4e5f\\u4f1a\\u4e22\\u5931\\u5176\\u5b83\\u4fe1\\u606f\\uff08\\u5220\\u9664\\u4e00\\u4e2a\\u8bfe\\u7a0b\\uff0c\\u4e22\\u5931\\u4e86\\u4e00\\u4e2a\\u5b66\\u751f\\u7684\\u4fe1\\u606f\\uff09\\uff1b\\n- \\u63d2\\u5165\\u5f02\\u5e38\\uff1a\\u65e0\\u6cd5\\u63d2\\u5165\\uff08\\u63d2\\u5165\\u4e00\\u4e2a\\u8fd8\\u6ca1\\u6709\\u8bfe\\u7a0b\\u4fe1\\u606f\\u7684\\u5b66\\u751f\\uff09\\n\"}]}','white','2020-08-14 11:35:13'),(190,'列举几种表连接方式？','![SQL连接](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191207081711185_20242.png)\n\n- 内连接（Inner Join）：仅将两个表中满足连接条件的行组合起来作为结果集\n    - 自然连接：只考虑属性相同的元组对；\n    - 等值连接：给定条件进行查询\n- 外连接（Outer Join）\n    - 左连接：左边表的所有数据都有显示出来，右边的表数据只显示共同有的那部分，没有对应的部分补NULL；\n    - 右连接：和左连接相反；\n    - 全外连接（Full Outer Join）：查询出左表和右表所有数据，但是去除两表的重复数据\n- 交叉连接（Cross Join）：返回两表的笛卡尔积（对于所含数据分别为m、n的表，返回m*n的结果）\n','<p>![SQL连接](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191207081711185_20242.png)</p><p><br></p><p>- 内连接（Inner Join）：仅将两个表中满足连接条件的行组合起来作为结果集</p><p>    - 自然连接：只考虑属性相同的元组对；</p><p>    - 等值连接：给定条件进行查询</p><p>- 外连接（Outer Join）</p><p>    - 左连接：左边表的所有数据都有显示出来，右边的表数据只显示共同有的那部分，没有对应的部分补NULL；</p><p>    - 右连接：和左连接相反；</p><p>    - 全外连接（Full Outer Join）：查询出左表和右表所有数据，但是去除两表的重复数据</p><p>- 交叉连接（Cross Join）：返回两表的笛卡尔积（对于所含数据分别为m、n的表，返回m*n的结果）</p>','{\"ops\": [{\"insert\": \"![SQL\\u8fde\\u63a5](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191207081711185_20242.png)\\n\\n- \\u5185\\u8fde\\u63a5\\uff08Inner Join\\uff09\\uff1a\\u4ec5\\u5c06\\u4e24\\u4e2a\\u8868\\u4e2d\\u6ee1\\u8db3\\u8fde\\u63a5\\u6761\\u4ef6\\u7684\\u884c\\u7ec4\\u5408\\u8d77\\u6765\\u4f5c\\u4e3a\\u7ed3\\u679c\\u96c6\\n    - \\u81ea\\u7136\\u8fde\\u63a5\\uff1a\\u53ea\\u8003\\u8651\\u5c5e\\u6027\\u76f8\\u540c\\u7684\\u5143\\u7ec4\\u5bf9\\uff1b\\n    - \\u7b49\\u503c\\u8fde\\u63a5\\uff1a\\u7ed9\\u5b9a\\u6761\\u4ef6\\u8fdb\\u884c\\u67e5\\u8be2\\n- \\u5916\\u8fde\\u63a5\\uff08Outer Join\\uff09\\n    - \\u5de6\\u8fde\\u63a5\\uff1a\\u5de6\\u8fb9\\u8868\\u7684\\u6240\\u6709\\u6570\\u636e\\u90fd\\u6709\\u663e\\u793a\\u51fa\\u6765\\uff0c\\u53f3\\u8fb9\\u7684\\u8868\\u6570\\u636e\\u53ea\\u663e\\u793a\\u5171\\u540c\\u6709\\u7684\\u90a3\\u90e8\\u5206\\uff0c\\u6ca1\\u6709\\u5bf9\\u5e94\\u7684\\u90e8\\u5206\\u8865NULL\\uff1b\\n    - \\u53f3\\u8fde\\u63a5\\uff1a\\u548c\\u5de6\\u8fde\\u63a5\\u76f8\\u53cd\\uff1b\\n    - \\u5168\\u5916\\u8fde\\u63a5\\uff08Full Outer Join\\uff09\\uff1a\\u67e5\\u8be2\\u51fa\\u5de6\\u8868\\u548c\\u53f3\\u8868\\u6240\\u6709\\u6570\\u636e\\uff0c\\u4f46\\u662f\\u53bb\\u9664\\u4e24\\u8868\\u7684\\u91cd\\u590d\\u6570\\u636e\\n- \\u4ea4\\u53c9\\u8fde\\u63a5\\uff08Cross Join\\uff09\\uff1a\\u8fd4\\u56de\\u4e24\\u8868\\u7684\\u7b1b\\u5361\\u5c14\\u79ef\\uff08\\u5bf9\\u4e8e\\u6240\\u542b\\u6570\\u636e\\u5206\\u522b\\u4e3am\\u3001n\\u7684\\u8868\\uff0c\\u8fd4\\u56dem*n\\u7684\\u7ed3\\u679c\\uff09\\n\"}]}','white','2020-08-14 11:43:33'),(191,'什么是存储过程？有哪些优缺点？','存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合。想要实现相应的功能时，只需要调用这个存储过程就行了（类似于函数，输入具有输出参数）。\n\n优点：\n- 预先编译，而不需要每次运行时编译，提高了数据库执行**效率**；\n- 封装了一系列操作，对于一些数据交互比较多的操作，相比于单独执行SQL语句，可以**减少网络通信量**；\n- 具有**可复用性**，减少了数据库开发的工作量；\n- **安全性高**，可以让没有权限的用户通过存储过程间接操作数据库；\n- 更**易于维护**\n\n缺点：\n- **可移植性差**，存储过程将应用程序绑定到了数据库上；\n- **开发调试复杂**：没有好的IDE；\n- **修改复杂**，需要重新编译，有时还需要更新程序中的代码以更新调用\n\n','<p>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合。想要实现相应的功能时，只需要调用这个存储过程就行了（类似于函数，输入具有输出参数）。</p><p><br></p><p>优点：</p><p>- 预先编译，而不需要每次运行时编译，提高了数据库执行**效率**；</p><p>- 封装了一系列操作，对于一些数据交互比较多的操作，相比于单独执行SQL语句，可以**减少网络通信量**；</p><p>- 具有**可复用性**，减少了数据库开发的工作量；</p><p>- **安全性高**，可以让没有权限的用户通过存储过程间接操作数据库；</p><p>- 更**易于维护**</p><p><br></p><p>缺点：</p><p>- **可移植性差**，存储过程将应用程序绑定到了数据库上；</p><p>- **开发调试复杂**：没有好的IDE；</p><p>- **修改复杂**，需要重新编译，有时还需要更新程序中的代码以更新调用</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u5b58\\u50a8\\u8fc7\\u7a0b\\u662f\\u4e8b\\u5148\\u7ecf\\u8fc7\\u7f16\\u8bd1\\u5e76\\u5b58\\u50a8\\u5728\\u6570\\u636e\\u5e93\\u4e2d\\u7684\\u4e00\\u6bb5SQL\\u8bed\\u53e5\\u7684\\u96c6\\u5408\\u3002\\u60f3\\u8981\\u5b9e\\u73b0\\u76f8\\u5e94\\u7684\\u529f\\u80fd\\u65f6\\uff0c\\u53ea\\u9700\\u8981\\u8c03\\u7528\\u8fd9\\u4e2a\\u5b58\\u50a8\\u8fc7\\u7a0b\\u5c31\\u884c\\u4e86\\uff08\\u7c7b\\u4f3c\\u4e8e\\u51fd\\u6570\\uff0c\\u8f93\\u5165\\u5177\\u6709\\u8f93\\u51fa\\u53c2\\u6570\\uff09\\u3002\\n\\n\\u4f18\\u70b9\\uff1a\\n- \\u9884\\u5148\\u7f16\\u8bd1\\uff0c\\u800c\\u4e0d\\u9700\\u8981\\u6bcf\\u6b21\\u8fd0\\u884c\\u65f6\\u7f16\\u8bd1\\uff0c\\u63d0\\u9ad8\\u4e86\\u6570\\u636e\\u5e93\\u6267\\u884c**\\u6548\\u7387**\\uff1b\\n- \\u5c01\\u88c5\\u4e86\\u4e00\\u7cfb\\u5217\\u64cd\\u4f5c\\uff0c\\u5bf9\\u4e8e\\u4e00\\u4e9b\\u6570\\u636e\\u4ea4\\u4e92\\u6bd4\\u8f83\\u591a\\u7684\\u64cd\\u4f5c\\uff0c\\u76f8\\u6bd4\\u4e8e\\u5355\\u72ec\\u6267\\u884cSQL\\u8bed\\u53e5\\uff0c\\u53ef\\u4ee5**\\u51cf\\u5c11\\u7f51\\u7edc\\u901a\\u4fe1\\u91cf**\\uff1b\\n- \\u5177\\u6709**\\u53ef\\u590d\\u7528\\u6027**\\uff0c\\u51cf\\u5c11\\u4e86\\u6570\\u636e\\u5e93\\u5f00\\u53d1\\u7684\\u5de5\\u4f5c\\u91cf\\uff1b\\n- **\\u5b89\\u5168\\u6027\\u9ad8**\\uff0c\\u53ef\\u4ee5\\u8ba9\\u6ca1\\u6709\\u6743\\u9650\\u7684\\u7528\\u6237\\u901a\\u8fc7\\u5b58\\u50a8\\u8fc7\\u7a0b\\u95f4\\u63a5\\u64cd\\u4f5c\\u6570\\u636e\\u5e93\\uff1b\\n- \\u66f4**\\u6613\\u4e8e\\u7ef4\\u62a4**\\n\\n\\u7f3a\\u70b9\\uff1a\\n- **\\u53ef\\u79fb\\u690d\\u6027\\u5dee**\\uff0c\\u5b58\\u50a8\\u8fc7\\u7a0b\\u5c06\\u5e94\\u7528\\u7a0b\\u5e8f\\u7ed1\\u5b9a\\u5230\\u4e86\\u6570\\u636e\\u5e93\\u4e0a\\uff1b\\n- **\\u5f00\\u53d1\\u8c03\\u8bd5\\u590d\\u6742**\\uff1a\\u6ca1\\u6709\\u597d\\u7684IDE\\uff1b\\n- **\\u4fee\\u6539\\u590d\\u6742**\\uff0c\\u9700\\u8981\\u91cd\\u65b0\\u7f16\\u8bd1\\uff0c\\u6709\\u65f6\\u8fd8\\u9700\\u8981\\u66f4\\u65b0\\u7a0b\\u5e8f\\u4e2d\\u7684\\u4ee3\\u7801\\u4ee5\\u66f4\\u65b0\\u8c03\\u7528\\n\\n\"}]}','white','2020-08-14 11:43:59'),(192,'Drop/Delete/Truncate的区别？','- **Delete**用来删除表的全部或者**部分数据**，执行delete之后，用户**需要提交**之后才会执行，会触发表上的DELETE**触发器**（包含一个OLD的虚拟表，可以只读访问被删除的数据），DELETE之后表结构还在，删除很慢，一行一行地删，因为会记录日志，可以利用日志还原数据；\n\n- **Truncate**删除表中的所有数据，这个操作**不能回滚**，也不会触发这个表上的触发器。操作比DELETE快很多（直接把表drop掉，再创建一个新表，删除的数据不能找回）。如果表中有自增（AUTO_INCREMENT）列，则重置为1；\n\n- **Drop**命令从数据库中**删除表**，所有的数据行，索引和约束都会被删除；不能回滚，不会触发触发器；\n','<p>- **Delete**用来删除表的全部或者**部分数据**，执行delete之后，用户**需要提交**之后才会执行，会触发表上的DELETE**触发器**（包含一个OLD的虚拟表，可以只读访问被删除的数据），DELETE之后表结构还在，删除很慢，一行一行地删，因为会记录日志，可以利用日志还原数据；</p><p><br></p><p>- **Truncate**删除表中的所有数据，这个操作**不能回滚**，也不会触发这个表上的触发器。操作比DELETE快很多（直接把表drop掉，再创建一个新表，删除的数据不能找回）。如果表中有自增（AUTO_INCREMENT）列，则重置为1；</p><p><br></p><p>- **Drop**命令从数据库中**删除表**，所有的数据行，索引和约束都会被删除；不能回滚，不会触发触发器；</p>','{\"ops\": [{\"insert\": \"- **Delete**\\u7528\\u6765\\u5220\\u9664\\u8868\\u7684\\u5168\\u90e8\\u6216\\u8005**\\u90e8\\u5206\\u6570\\u636e**\\uff0c\\u6267\\u884cdelete\\u4e4b\\u540e\\uff0c\\u7528\\u6237**\\u9700\\u8981\\u63d0\\u4ea4**\\u4e4b\\u540e\\u624d\\u4f1a\\u6267\\u884c\\uff0c\\u4f1a\\u89e6\\u53d1\\u8868\\u4e0a\\u7684DELETE**\\u89e6\\u53d1\\u5668**\\uff08\\u5305\\u542b\\u4e00\\u4e2aOLD\\u7684\\u865a\\u62df\\u8868\\uff0c\\u53ef\\u4ee5\\u53ea\\u8bfb\\u8bbf\\u95ee\\u88ab\\u5220\\u9664\\u7684\\u6570\\u636e\\uff09\\uff0cDELETE\\u4e4b\\u540e\\u8868\\u7ed3\\u6784\\u8fd8\\u5728\\uff0c\\u5220\\u9664\\u5f88\\u6162\\uff0c\\u4e00\\u884c\\u4e00\\u884c\\u5730\\u5220\\uff0c\\u56e0\\u4e3a\\u4f1a\\u8bb0\\u5f55\\u65e5\\u5fd7\\uff0c\\u53ef\\u4ee5\\u5229\\u7528\\u65e5\\u5fd7\\u8fd8\\u539f\\u6570\\u636e\\uff1b\\n\\n- **Truncate**\\u5220\\u9664\\u8868\\u4e2d\\u7684\\u6240\\u6709\\u6570\\u636e\\uff0c\\u8fd9\\u4e2a\\u64cd\\u4f5c**\\u4e0d\\u80fd\\u56de\\u6eda**\\uff0c\\u4e5f\\u4e0d\\u4f1a\\u89e6\\u53d1\\u8fd9\\u4e2a\\u8868\\u4e0a\\u7684\\u89e6\\u53d1\\u5668\\u3002\\u64cd\\u4f5c\\u6bd4DELETE\\u5feb\\u5f88\\u591a\\uff08\\u76f4\\u63a5\\u628a\\u8868drop\\u6389\\uff0c\\u518d\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u8868\\uff0c\\u5220\\u9664\\u7684\\u6570\\u636e\\u4e0d\\u80fd\\u627e\\u56de\\uff09\\u3002\\u5982\\u679c\\u8868\\u4e2d\\u6709\\u81ea\\u589e\\uff08AUTO_INCREMENT\\uff09\\u5217\\uff0c\\u5219\\u91cd\\u7f6e\\u4e3a1\\uff1b\\n\\n- **Drop**\\u547d\\u4ee4\\u4ece\\u6570\\u636e\\u5e93\\u4e2d**\\u5220\\u9664\\u8868**\\uff0c\\u6240\\u6709\\u7684\\u6570\\u636e\\u884c\\uff0c\\u7d22\\u5f15\\u548c\\u7ea6\\u675f\\u90fd\\u4f1a\\u88ab\\u5220\\u9664\\uff1b\\u4e0d\\u80fd\\u56de\\u6eda\\uff0c\\u4e0d\\u4f1a\\u89e6\\u53d1\\u89e6\\u53d1\\u5668\\uff1b\\n\"}]}','white','2020-08-14 11:44:23'),(193,'什么是触发器？','触发器（TRIGGER）是由事件（比如INSERT/UPDATE/DELETE）来触发运行的操作（不能被直接调用，不能接收参数）。在数据库里以独立的对象存储，用于**保证数据完整性**（比如可以检验或转换数据）。\n','<p>触发器（TRIGGER）是由事件（比如INSERT/UPDATE/DELETE）来触发运行的操作（不能被直接调用，不能接收参数）。在数据库里以独立的对象存储，用于**保证数据完整性**（比如可以检验或转换数据）。</p>','{\"ops\": [{\"insert\": \"\\u89e6\\u53d1\\u5668\\uff08TRIGGER\\uff09\\u662f\\u7531\\u4e8b\\u4ef6\\uff08\\u6bd4\\u5982INSERT/UPDATE/DELETE\\uff09\\u6765\\u89e6\\u53d1\\u8fd0\\u884c\\u7684\\u64cd\\u4f5c\\uff08\\u4e0d\\u80fd\\u88ab\\u76f4\\u63a5\\u8c03\\u7528\\uff0c\\u4e0d\\u80fd\\u63a5\\u6536\\u53c2\\u6570\\uff09\\u3002\\u5728\\u6570\\u636e\\u5e93\\u91cc\\u4ee5\\u72ec\\u7acb\\u7684\\u5bf9\\u8c61\\u5b58\\u50a8\\uff0c\\u7528\\u4e8e**\\u4fdd\\u8bc1\\u6570\\u636e\\u5b8c\\u6574\\u6027**\\uff08\\u6bd4\\u5982\\u53ef\\u4ee5\\u68c0\\u9a8c\\u6216\\u8f6c\\u6362\\u6570\\u636e\\uff09\\u3002\\n\"}]}','white','2020-08-14 11:44:35'),(194,'有哪些约束类型？','约束（Constraint）类型：主键（Primary Key）约束，唯一约束（Unique），检查约束，非空约束，外键（Foreign Key）约束。\n','<p>约束（Constraint）类型：主键（Primary Key）约束，唯一约束（Unique），检查约束，非空约束，外键（Foreign Key）约束。</p>','{\"ops\": [{\"insert\": \"\\u7ea6\\u675f\\uff08Constraint\\uff09\\u7c7b\\u578b\\uff1a\\u4e3b\\u952e\\uff08Primary Key\\uff09\\u7ea6\\u675f\\uff0c\\u552f\\u4e00\\u7ea6\\u675f\\uff08Unique\\uff09\\uff0c\\u68c0\\u67e5\\u7ea6\\u675f\\uff0c\\u975e\\u7a7a\\u7ea6\\u675f\\uff0c\\u5916\\u952e\\uff08Foreign Key\\uff09\\u7ea6\\u675f\\u3002\\n\"}]}','white','2020-08-14 11:44:50'),(195,'什么是视图？什么是游标？','- 视图：从数据库的基本表中通过查询选取出来的数据组成的**虚拟表**（数据库中存放视图的定义）。可以对其进行增/删/改/查等操作。视图是对若干张基本表的引用，一张虚表，查询语句执行的结果，不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）；可以跟基本表一样，进行增删改查操作(ps:增删改操作有条件限制)；如连表查询产生的视图无法进行，对视图的增删改会影响原表的数据。好处：\n    - 通过只给用户访问视图的权限，保证数据的**安全性**；\n    - **简化**复杂的SQL操作，隐藏数据的复杂性（比如复杂的连接）；\n\n- 游标（Cursor）：用于定位在查询返回的**结果集的特定行**，以对特定行进行操作。使用游标可以方便地对结果集进行移动遍历，根据需要滚动或对浏览/修改任意行中的数据。主要用于交互式应用。\n','<p>- 视图：从数据库的基本表中通过查询选取出来的数据组成的**虚拟表**（数据库中存放视图的定义）。可以对其进行增/删/改/查等操作。视图是对若干张基本表的引用，一张虚表，查询语句执行的结果，不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）；可以跟基本表一样，进行增删改查操作(ps:增删改操作有条件限制)；如连表查询产生的视图无法进行，对视图的增删改会影响原表的数据。好处：</p><p>    - 通过只给用户访问视图的权限，保证数据的**安全性**；</p><p>    - **简化**复杂的SQL操作，隐藏数据的复杂性（比如复杂的连接）；</p><p><br></p><p>- 游标（Cursor）：用于定位在查询返回的**结果集的特定行**，以对特定行进行操作。使用游标可以方便地对结果集进行移动遍历，根据需要滚动或对浏览/修改任意行中的数据。主要用于交互式应用。</p>','{\"ops\": [{\"insert\": \"- \\u89c6\\u56fe\\uff1a\\u4ece\\u6570\\u636e\\u5e93\\u7684\\u57fa\\u672c\\u8868\\u4e2d\\u901a\\u8fc7\\u67e5\\u8be2\\u9009\\u53d6\\u51fa\\u6765\\u7684\\u6570\\u636e\\u7ec4\\u6210\\u7684**\\u865a\\u62df\\u8868**\\uff08\\u6570\\u636e\\u5e93\\u4e2d\\u5b58\\u653e\\u89c6\\u56fe\\u7684\\u5b9a\\u4e49\\uff09\\u3002\\u53ef\\u4ee5\\u5bf9\\u5176\\u8fdb\\u884c\\u589e/\\u5220/\\u6539/\\u67e5\\u7b49\\u64cd\\u4f5c\\u3002\\u89c6\\u56fe\\u662f\\u5bf9\\u82e5\\u5e72\\u5f20\\u57fa\\u672c\\u8868\\u7684\\u5f15\\u7528\\uff0c\\u4e00\\u5f20\\u865a\\u8868\\uff0c\\u67e5\\u8be2\\u8bed\\u53e5\\u6267\\u884c\\u7684\\u7ed3\\u679c\\uff0c\\u4e0d\\u5b58\\u50a8\\u5177\\u4f53\\u7684\\u6570\\u636e\\uff08\\u57fa\\u672c\\u8868\\u6570\\u636e\\u53d1\\u751f\\u4e86\\u6539\\u53d8\\uff0c\\u89c6\\u56fe\\u4e5f\\u4f1a\\u8ddf\\u7740\\u6539\\u53d8\\uff09\\uff1b\\u53ef\\u4ee5\\u8ddf\\u57fa\\u672c\\u8868\\u4e00\\u6837\\uff0c\\u8fdb\\u884c\\u589e\\u5220\\u6539\\u67e5\\u64cd\\u4f5c(ps:\\u589e\\u5220\\u6539\\u64cd\\u4f5c\\u6709\\u6761\\u4ef6\\u9650\\u5236)\\uff1b\\u5982\\u8fde\\u8868\\u67e5\\u8be2\\u4ea7\\u751f\\u7684\\u89c6\\u56fe\\u65e0\\u6cd5\\u8fdb\\u884c\\uff0c\\u5bf9\\u89c6\\u56fe\\u7684\\u589e\\u5220\\u6539\\u4f1a\\u5f71\\u54cd\\u539f\\u8868\\u7684\\u6570\\u636e\\u3002\\u597d\\u5904\\uff1a\\n    - \\u901a\\u8fc7\\u53ea\\u7ed9\\u7528\\u6237\\u8bbf\\u95ee\\u89c6\\u56fe\\u7684\\u6743\\u9650\\uff0c\\u4fdd\\u8bc1\\u6570\\u636e\\u7684**\\u5b89\\u5168\\u6027**\\uff1b\\n    - **\\u7b80\\u5316**\\u590d\\u6742\\u7684SQL\\u64cd\\u4f5c\\uff0c\\u9690\\u85cf\\u6570\\u636e\\u7684\\u590d\\u6742\\u6027\\uff08\\u6bd4\\u5982\\u590d\\u6742\\u7684\\u8fde\\u63a5\\uff09\\uff1b\\n\\n- \\u6e38\\u6807\\uff08Cursor\\uff09\\uff1a\\u7528\\u4e8e\\u5b9a\\u4f4d\\u5728\\u67e5\\u8be2\\u8fd4\\u56de\\u7684**\\u7ed3\\u679c\\u96c6\\u7684\\u7279\\u5b9a\\u884c**\\uff0c\\u4ee5\\u5bf9\\u7279\\u5b9a\\u884c\\u8fdb\\u884c\\u64cd\\u4f5c\\u3002\\u4f7f\\u7528\\u6e38\\u6807\\u53ef\\u4ee5\\u65b9\\u4fbf\\u5730\\u5bf9\\u7ed3\\u679c\\u96c6\\u8fdb\\u884c\\u79fb\\u52a8\\u904d\\u5386\\uff0c\\u6839\\u636e\\u9700\\u8981\\u6eda\\u52a8\\u6216\\u5bf9\\u6d4f\\u89c8/\\u4fee\\u6539\\u4efb\\u610f\\u884c\\u4e2d\\u7684\\u6570\\u636e\\u3002\\u4e3b\\u8981\\u7528\\u4e8e\\u4ea4\\u4e92\\u5f0f\\u5e94\\u7528\\u3002\\n\"}]}','white','2020-08-14 11:45:35'),(196,'使用B树和B+树的比较','InnoDB的索引使用的是B+树实现，B+树对比B树的好处：\n\n- IO次数少：B+树的中间结点只存放索引，数据都存在叶结点中，因此中间结点可以存更多的数据，让索引树更加矮胖；\n- 范围查询效率更高：B树需要中序遍历整个树，只B+树需要遍历叶结点中的链表；\n- 查询效率更加稳定：每次查询都需要从根结点到叶结点，路径长度相同，所以每次查询的效率都差不多\n','<p>InnoDB的索引使用的是B+树实现，B+树对比B树的好处：</p><p><br></p><p>- IO次数少：B+树的中间结点只存放索引，数据都存在叶结点中，因此中间结点可以存更多的数据，让索引树更加矮胖；</p><p>- 范围查询效率更高：B树需要中序遍历整个树，只B+树需要遍历叶结点中的链表；</p><p>- 查询效率更加稳定：每次查询都需要从根结点到叶结点，路径长度相同，所以每次查询的效率都差不多</p>','{\"ops\": [{\"insert\": \"InnoDB\\u7684\\u7d22\\u5f15\\u4f7f\\u7528\\u7684\\u662fB+\\u6811\\u5b9e\\u73b0\\uff0cB+\\u6811\\u5bf9\\u6bd4B\\u6811\\u7684\\u597d\\u5904\\uff1a\\n\\n- IO\\u6b21\\u6570\\u5c11\\uff1aB+\\u6811\\u7684\\u4e2d\\u95f4\\u7ed3\\u70b9\\u53ea\\u5b58\\u653e\\u7d22\\u5f15\\uff0c\\u6570\\u636e\\u90fd\\u5b58\\u5728\\u53f6\\u7ed3\\u70b9\\u4e2d\\uff0c\\u56e0\\u6b64\\u4e2d\\u95f4\\u7ed3\\u70b9\\u53ef\\u4ee5\\u5b58\\u66f4\\u591a\\u7684\\u6570\\u636e\\uff0c\\u8ba9\\u7d22\\u5f15\\u6811\\u66f4\\u52a0\\u77ee\\u80d6\\uff1b\\n- \\u8303\\u56f4\\u67e5\\u8be2\\u6548\\u7387\\u66f4\\u9ad8\\uff1aB\\u6811\\u9700\\u8981\\u4e2d\\u5e8f\\u904d\\u5386\\u6574\\u4e2a\\u6811\\uff0c\\u53eaB+\\u6811\\u9700\\u8981\\u904d\\u5386\\u53f6\\u7ed3\\u70b9\\u4e2d\\u7684\\u94fe\\u8868\\uff1b\\n- \\u67e5\\u8be2\\u6548\\u7387\\u66f4\\u52a0\\u7a33\\u5b9a\\uff1a\\u6bcf\\u6b21\\u67e5\\u8be2\\u90fd\\u9700\\u8981\\u4ece\\u6839\\u7ed3\\u70b9\\u5230\\u53f6\\u7ed3\\u70b9\\uff0c\\u8def\\u5f84\\u957f\\u5ea6\\u76f8\\u540c\\uff0c\\u6240\\u4ee5\\u6bcf\\u6b21\\u67e5\\u8be2\\u7684\\u6548\\u7387\\u90fd\\u5dee\\u4e0d\\u591a\\n\"}]}','white','2020-08-14 11:46:34'),(197,'使用B树索引和哈希索引的比较','哈希索引能以 O(1) 时间进行查找，但是只支持精确查找，无法用于部分查找和范围查找，无法用于排序与分组；\n\nB树索引支持大于小于等于查找，范围查找。\n\n哈希索引遇到大量哈希值相等的情况后查找效率会降低。\n\n哈希索引不支持数据的排序。\n','<p>哈希索引能以 O(1) 时间进行查找，但是只支持精确查找，无法用于部分查找和范围查找，无法用于排序与分组；</p><p><br></p><p>B树索引支持大于小于等于查找，范围查找。</p><p><br></p><p>哈希索引遇到大量哈希值相等的情况后查找效率会降低。</p><p><br></p><p>哈希索引不支持数据的排序。</p>','{\"ops\": [{\"insert\": \"\\u54c8\\u5e0c\\u7d22\\u5f15\\u80fd\\u4ee5 O(1) \\u65f6\\u95f4\\u8fdb\\u884c\\u67e5\\u627e\\uff0c\\u4f46\\u662f\\u53ea\\u652f\\u6301\\u7cbe\\u786e\\u67e5\\u627e\\uff0c\\u65e0\\u6cd5\\u7528\\u4e8e\\u90e8\\u5206\\u67e5\\u627e\\u548c\\u8303\\u56f4\\u67e5\\u627e\\uff0c\\u65e0\\u6cd5\\u7528\\u4e8e\\u6392\\u5e8f\\u4e0e\\u5206\\u7ec4\\uff1b\\n\\nB\\u6811\\u7d22\\u5f15\\u652f\\u6301\\u5927\\u4e8e\\u5c0f\\u4e8e\\u7b49\\u4e8e\\u67e5\\u627e\\uff0c\\u8303\\u56f4\\u67e5\\u627e\\u3002\\n\\n\\u54c8\\u5e0c\\u7d22\\u5f15\\u9047\\u5230\\u5927\\u91cf\\u54c8\\u5e0c\\u503c\\u76f8\\u7b49\\u7684\\u60c5\\u51b5\\u540e\\u67e5\\u627e\\u6548\\u7387\\u4f1a\\u964d\\u4f4e\\u3002\\n\\n\\u54c8\\u5e0c\\u7d22\\u5f15\\u4e0d\\u652f\\u6301\\u6570\\u636e\\u7684\\u6392\\u5e8f\\u3002\\n\"}]}','white','2020-08-14 11:47:25'),(198,'使用索引的优点','- 大大加快了数据的**检索速度**；\n- 可以显著减少查询中**分组和排序**的时间；\n- 通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性；\n- 将随机 I/O 变为**顺序 I/O**（B+Tree 索引是有序的，会将相邻的数据都存储在一起）\n\n缺点：建立和维护索引耗费时间空间，更新索引很慢。\n','<p>- 大大加快了数据的**检索速度**；</p><p>- 可以显著减少查询中**分组和排序**的时间；</p><p>- 通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性；</p><p>- 将随机 I/O 变为**顺序 I/O**（B+Tree 索引是有序的，会将相邻的数据都存储在一起）</p><p><br></p><p>缺点：建立和维护索引耗费时间空间，更新索引很慢。</p>','{\"ops\": [{\"insert\": \"- \\u5927\\u5927\\u52a0\\u5feb\\u4e86\\u6570\\u636e\\u7684**\\u68c0\\u7d22\\u901f\\u5ea6**\\uff1b\\n- \\u53ef\\u4ee5\\u663e\\u8457\\u51cf\\u5c11\\u67e5\\u8be2\\u4e2d**\\u5206\\u7ec4\\u548c\\u6392\\u5e8f**\\u7684\\u65f6\\u95f4\\uff1b\\n- \\u901a\\u8fc7\\u521b\\u5efa\\u552f\\u4e00\\u6027\\u7d22\\u5f15\\uff0c\\u53ef\\u4ee5\\u4fdd\\u8bc1\\u6570\\u636e\\u5e93\\u8868\\u4e2d\\u6bcf\\u4e00\\u884c\\u6570\\u636e\\u7684\\u552f\\u4e00\\u6027\\uff1b\\n- \\u5c06\\u968f\\u673a I/O \\u53d8\\u4e3a**\\u987a\\u5e8f I/O**\\uff08B+Tree \\u7d22\\u5f15\\u662f\\u6709\\u5e8f\\u7684\\uff0c\\u4f1a\\u5c06\\u76f8\\u90bb\\u7684\\u6570\\u636e\\u90fd\\u5b58\\u50a8\\u5728\\u4e00\\u8d77\\uff09\\n\\n\\u7f3a\\u70b9\\uff1a\\u5efa\\u7acb\\u548c\\u7ef4\\u62a4\\u7d22\\u5f15\\u8017\\u8d39\\u65f6\\u95f4\\u7a7a\\u95f4\\uff0c\\u66f4\\u65b0\\u7d22\\u5f15\\u5f88\\u6162\\u3002\\n\"}]}','white','2020-08-14 11:47:39'),(199,'哪些情况下索引会失效？','- 以“%(表示任意0个或多个字符)”开头的LIKE语句；\n\n- OR语句前后没有同时使用索引；\n\n- 数据类型出现隐式转化（如varchar不加单引号的话可能会自动转换为int型）；\n\n- 对于多列索引，必须满足 **最左匹配原则**/最左前缀原则 (最左优先，eg：多列索引col1、col2和col3，则 索引生效的情形包括 col1或col1，col2或col1，col2，col3)；\n\n- 如果MySQL估计全表扫描比索引快，则不使用索引（比如非常小的表）\n','<p>- 以“%(表示任意0个或多个字符)”开头的LIKE语句；</p><p><br></p><p>- OR语句前后没有同时使用索引；</p><p><br></p><p>- 数据类型出现隐式转化（如varchar不加单引号的话可能会自动转换为int型）；</p><p><br></p><p>- 对于多列索引，必须满足 **最左匹配原则**/最左前缀原则 (最左优先，eg：多列索引col1、col2和col3，则 索引生效的情形包括 col1或col1，col2或col1，col2，col3)；</p><p><br></p><p>- 如果MySQL估计全表扫描比索引快，则不使用索引（比如非常小的表）</p>','{\"ops\": [{\"insert\": \"- \\u4ee5\\u201c%(\\u8868\\u793a\\u4efb\\u610f0\\u4e2a\\u6216\\u591a\\u4e2a\\u5b57\\u7b26)\\u201d\\u5f00\\u5934\\u7684LIKE\\u8bed\\u53e5\\uff1b\\n\\n- OR\\u8bed\\u53e5\\u524d\\u540e\\u6ca1\\u6709\\u540c\\u65f6\\u4f7f\\u7528\\u7d22\\u5f15\\uff1b\\n\\n- \\u6570\\u636e\\u7c7b\\u578b\\u51fa\\u73b0\\u9690\\u5f0f\\u8f6c\\u5316\\uff08\\u5982varchar\\u4e0d\\u52a0\\u5355\\u5f15\\u53f7\\u7684\\u8bdd\\u53ef\\u80fd\\u4f1a\\u81ea\\u52a8\\u8f6c\\u6362\\u4e3aint\\u578b\\uff09\\uff1b\\n\\n- \\u5bf9\\u4e8e\\u591a\\u5217\\u7d22\\u5f15\\uff0c\\u5fc5\\u987b\\u6ee1\\u8db3 **\\u6700\\u5de6\\u5339\\u914d\\u539f\\u5219**/\\u6700\\u5de6\\u524d\\u7f00\\u539f\\u5219 (\\u6700\\u5de6\\u4f18\\u5148\\uff0ceg\\uff1a\\u591a\\u5217\\u7d22\\u5f15col1\\u3001col2\\u548ccol3\\uff0c\\u5219 \\u7d22\\u5f15\\u751f\\u6548\\u7684\\u60c5\\u5f62\\u5305\\u62ec col1\\u6216col1\\uff0ccol2\\u6216col1\\uff0ccol2\\uff0ccol3)\\uff1b\\n\\n- \\u5982\\u679cMySQL\\u4f30\\u8ba1\\u5168\\u8868\\u626b\\u63cf\\u6bd4\\u7d22\\u5f15\\u5feb\\uff0c\\u5219\\u4e0d\\u4f7f\\u7528\\u7d22\\u5f15\\uff08\\u6bd4\\u5982\\u975e\\u5e38\\u5c0f\\u7684\\u8868\\uff09\\n\"}]}','white','2020-08-14 11:47:58'),(200,'在哪些地方适合创建索引？','- 某列经常作为最大最小值；\n\n- 经常被查询的字段；\n\n- 经常用作表连接的字段；\n\n- 经常出现在ORDER BY/GROUP BY/DISDINCT后面的字段\n\n','<p>- 某列经常作为最大最小值；</p><p><br></p><p>- 经常被查询的字段；</p><p><br></p><p>- 经常用作表连接的字段；</p><p><br></p><p>- 经常出现在ORDER BY/GROUP BY/DISDINCT后面的字段</p><p><br></p>','{\"ops\": [{\"insert\": \"- \\u67d0\\u5217\\u7ecf\\u5e38\\u4f5c\\u4e3a\\u6700\\u5927\\u6700\\u5c0f\\u503c\\uff1b\\n\\n- \\u7ecf\\u5e38\\u88ab\\u67e5\\u8be2\\u7684\\u5b57\\u6bb5\\uff1b\\n\\n- \\u7ecf\\u5e38\\u7528\\u4f5c\\u8868\\u8fde\\u63a5\\u7684\\u5b57\\u6bb5\\uff1b\\n\\n- \\u7ecf\\u5e38\\u51fa\\u73b0\\u5728ORDER BY/GROUP BY/DISDINCT\\u540e\\u9762\\u7684\\u5b57\\u6bb5\\n\\n\"}]}','white','2020-08-14 11:48:15'),(201,'创建索引时需要注意什么？','- 只应建立在**小字段**上，而不要对大文本或图片建立索引（一页存储的数据越多一次IO操作获取的数据越大效率越高）；\n\n- 建立索引的字段应该**非空**，在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。应该用0、一个特殊的值或者一个空串代替NULL；\n\n- 选择**数据密度大**（唯一值占总数的百分比很大）的字段作索引\n','<p>- 只应建立在**小字段**上，而不要对大文本或图片建立索引（一页存储的数据越多一次IO操作获取的数据越大效率越高）；</p><p><br></p><p>- 建立索引的字段应该**非空**，在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。应该用0、一个特殊的值或者一个空串代替NULL；</p><p><br></p><p>- 选择**数据密度大**（唯一值占总数的百分比很大）的字段作索引</p>','{\"ops\": [{\"insert\": \"- \\u53ea\\u5e94\\u5efa\\u7acb\\u5728**\\u5c0f\\u5b57\\u6bb5**\\u4e0a\\uff0c\\u800c\\u4e0d\\u8981\\u5bf9\\u5927\\u6587\\u672c\\u6216\\u56fe\\u7247\\u5efa\\u7acb\\u7d22\\u5f15\\uff08\\u4e00\\u9875\\u5b58\\u50a8\\u7684\\u6570\\u636e\\u8d8a\\u591a\\u4e00\\u6b21IO\\u64cd\\u4f5c\\u83b7\\u53d6\\u7684\\u6570\\u636e\\u8d8a\\u5927\\u6548\\u7387\\u8d8a\\u9ad8\\uff09\\uff1b\\n\\n- \\u5efa\\u7acb\\u7d22\\u5f15\\u7684\\u5b57\\u6bb5\\u5e94\\u8be5**\\u975e\\u7a7a**\\uff0c\\u5728MySQL\\u4e2d\\uff0c\\u542b\\u6709\\u7a7a\\u503c\\u7684\\u5217\\u5f88\\u96be\\u8fdb\\u884c\\u67e5\\u8be2\\u4f18\\u5316\\uff0c\\u56e0\\u4e3a\\u5b83\\u4eec\\u4f7f\\u5f97\\u7d22\\u5f15\\u3001\\u7d22\\u5f15\\u7684\\u7edf\\u8ba1\\u4fe1\\u606f\\u4ee5\\u53ca\\u6bd4\\u8f83\\u8fd0\\u7b97\\u66f4\\u52a0\\u590d\\u6742\\u3002\\u5e94\\u8be5\\u75280\\u3001\\u4e00\\u4e2a\\u7279\\u6b8a\\u7684\\u503c\\u6216\\u8005\\u4e00\\u4e2a\\u7a7a\\u4e32\\u4ee3\\u66ffNULL\\uff1b\\n\\n- \\u9009\\u62e9**\\u6570\\u636e\\u5bc6\\u5ea6\\u5927**\\uff08\\u552f\\u4e00\\u503c\\u5360\\u603b\\u6570\\u7684\\u767e\\u5206\\u6bd4\\u5f88\\u5927\\uff09\\u7684\\u5b57\\u6bb5\\u4f5c\\u7d22\\u5f15\\n\"}]}','white','2020-08-14 11:48:35'),(202,'索引的分类？','- 普通索引\n\n- 唯一索引 UNIQUE：索引列的值必须唯一，但允许有空值；\n\n- 主键索引 PRIMARY KEY：必须唯一，不允许空值（是一种特殊的唯一索引；MySQL创建主键时默认为聚集索引，但主键也可以是非聚集索引）；\n\n- 单列索引和多列索引/复合索引（Composite）：索引的列数；\n\n- 覆盖（Covering）索引：索引包含了所有满足查询所需要的数据，查询的时候只需要读取索引而不需要回表读取数据；\n\n- 聚集（Clustered）索引/非聚集索引：对磁盘上存放数据的物理地址重新组织以使这些数据按照指定规则排序的一种索引（数据的物理排列顺序和索引排列顺序一致）。因此每张表只能创建一个聚集索引（因为要改变物理存储顺序）。优点是查询速度快，因为可以直接按照顺序得到需要数据的物理地址。缺点是进行修改的速度较慢。对于需要经常搜索范围的值很有效。非聚集索引只记录逻辑顺序，并不改变物理顺序；\n- 分区索引（？）\n\n- 虚拟索引（Virtual）：模拟索引的存在而不用真正创建一个索引，用于快速测试创建索引对执行计划的影响。没有相关的索引段，不增加存储空间的使用\n','<p>- 普通索引</p><p><br></p><p>- 唯一索引 UNIQUE：索引列的值必须唯一，但允许有空值；</p><p><br></p><p>- 主键索引 PRIMARY KEY：必须唯一，不允许空值（是一种特殊的唯一索引；MySQL创建主键时默认为聚集索引，但主键也可以是非聚集索引）；</p><p><br></p><p>- 单列索引和多列索引/复合索引（Composite）：索引的列数；</p><p><br></p><p>- 覆盖（Covering）索引：索引包含了所有满足查询所需要的数据，查询的时候只需要读取索引而不需要回表读取数据；</p><p><br></p><p>- 聚集（Clustered）索引/非聚集索引：对磁盘上存放数据的物理地址重新组织以使这些数据按照指定规则排序的一种索引（数据的物理排列顺序和索引排列顺序一致）。因此每张表只能创建一个聚集索引（因为要改变物理存储顺序）。优点是查询速度快，因为可以直接按照顺序得到需要数据的物理地址。缺点是进行修改的速度较慢。对于需要经常搜索范围的值很有效。非聚集索引只记录逻辑顺序，并不改变物理顺序；</p><p>- 分区索引（？）</p><p><br></p><p>- 虚拟索引（Virtual）：模拟索引的存在而不用真正创建一个索引，用于快速测试创建索引对执行计划的影响。没有相关的索引段，不增加存储空间的使用</p>','{\"ops\": [{\"insert\": \"- \\u666e\\u901a\\u7d22\\u5f15\\n\\n- \\u552f\\u4e00\\u7d22\\u5f15 UNIQUE\\uff1a\\u7d22\\u5f15\\u5217\\u7684\\u503c\\u5fc5\\u987b\\u552f\\u4e00\\uff0c\\u4f46\\u5141\\u8bb8\\u6709\\u7a7a\\u503c\\uff1b\\n\\n- \\u4e3b\\u952e\\u7d22\\u5f15 PRIMARY KEY\\uff1a\\u5fc5\\u987b\\u552f\\u4e00\\uff0c\\u4e0d\\u5141\\u8bb8\\u7a7a\\u503c\\uff08\\u662f\\u4e00\\u79cd\\u7279\\u6b8a\\u7684\\u552f\\u4e00\\u7d22\\u5f15\\uff1bMySQL\\u521b\\u5efa\\u4e3b\\u952e\\u65f6\\u9ed8\\u8ba4\\u4e3a\\u805a\\u96c6\\u7d22\\u5f15\\uff0c\\u4f46\\u4e3b\\u952e\\u4e5f\\u53ef\\u4ee5\\u662f\\u975e\\u805a\\u96c6\\u7d22\\u5f15\\uff09\\uff1b\\n\\n- \\u5355\\u5217\\u7d22\\u5f15\\u548c\\u591a\\u5217\\u7d22\\u5f15/\\u590d\\u5408\\u7d22\\u5f15\\uff08Composite\\uff09\\uff1a\\u7d22\\u5f15\\u7684\\u5217\\u6570\\uff1b\\n\\n- \\u8986\\u76d6\\uff08Covering\\uff09\\u7d22\\u5f15\\uff1a\\u7d22\\u5f15\\u5305\\u542b\\u4e86\\u6240\\u6709\\u6ee1\\u8db3\\u67e5\\u8be2\\u6240\\u9700\\u8981\\u7684\\u6570\\u636e\\uff0c\\u67e5\\u8be2\\u7684\\u65f6\\u5019\\u53ea\\u9700\\u8981\\u8bfb\\u53d6\\u7d22\\u5f15\\u800c\\u4e0d\\u9700\\u8981\\u56de\\u8868\\u8bfb\\u53d6\\u6570\\u636e\\uff1b\\n\\n- \\u805a\\u96c6\\uff08Clustered\\uff09\\u7d22\\u5f15/\\u975e\\u805a\\u96c6\\u7d22\\u5f15\\uff1a\\u5bf9\\u78c1\\u76d8\\u4e0a\\u5b58\\u653e\\u6570\\u636e\\u7684\\u7269\\u7406\\u5730\\u5740\\u91cd\\u65b0\\u7ec4\\u7ec7\\u4ee5\\u4f7f\\u8fd9\\u4e9b\\u6570\\u636e\\u6309\\u7167\\u6307\\u5b9a\\u89c4\\u5219\\u6392\\u5e8f\\u7684\\u4e00\\u79cd\\u7d22\\u5f15\\uff08\\u6570\\u636e\\u7684\\u7269\\u7406\\u6392\\u5217\\u987a\\u5e8f\\u548c\\u7d22\\u5f15\\u6392\\u5217\\u987a\\u5e8f\\u4e00\\u81f4\\uff09\\u3002\\u56e0\\u6b64\\u6bcf\\u5f20\\u8868\\u53ea\\u80fd\\u521b\\u5efa\\u4e00\\u4e2a\\u805a\\u96c6\\u7d22\\u5f15\\uff08\\u56e0\\u4e3a\\u8981\\u6539\\u53d8\\u7269\\u7406\\u5b58\\u50a8\\u987a\\u5e8f\\uff09\\u3002\\u4f18\\u70b9\\u662f\\u67e5\\u8be2\\u901f\\u5ea6\\u5feb\\uff0c\\u56e0\\u4e3a\\u53ef\\u4ee5\\u76f4\\u63a5\\u6309\\u7167\\u987a\\u5e8f\\u5f97\\u5230\\u9700\\u8981\\u6570\\u636e\\u7684\\u7269\\u7406\\u5730\\u5740\\u3002\\u7f3a\\u70b9\\u662f\\u8fdb\\u884c\\u4fee\\u6539\\u7684\\u901f\\u5ea6\\u8f83\\u6162\\u3002\\u5bf9\\u4e8e\\u9700\\u8981\\u7ecf\\u5e38\\u641c\\u7d22\\u8303\\u56f4\\u7684\\u503c\\u5f88\\u6709\\u6548\\u3002\\u975e\\u805a\\u96c6\\u7d22\\u5f15\\u53ea\\u8bb0\\u5f55\\u903b\\u8f91\\u987a\\u5e8f\\uff0c\\u5e76\\u4e0d\\u6539\\u53d8\\u7269\\u7406\\u987a\\u5e8f\\uff1b\\n- \\u5206\\u533a\\u7d22\\u5f15\\uff08\\uff1f\\uff09\\n\\n- \\u865a\\u62df\\u7d22\\u5f15\\uff08Virtual\\uff09\\uff1a\\u6a21\\u62df\\u7d22\\u5f15\\u7684\\u5b58\\u5728\\u800c\\u4e0d\\u7528\\u771f\\u6b63\\u521b\\u5efa\\u4e00\\u4e2a\\u7d22\\u5f15\\uff0c\\u7528\\u4e8e\\u5feb\\u901f\\u6d4b\\u8bd5\\u521b\\u5efa\\u7d22\\u5f15\\u5bf9\\u6267\\u884c\\u8ba1\\u5212\\u7684\\u5f71\\u54cd\\u3002\\u6ca1\\u6709\\u76f8\\u5173\\u7684\\u7d22\\u5f15\\u6bb5\\uff0c\\u4e0d\\u589e\\u52a0\\u5b58\\u50a8\\u7a7a\\u95f4\\u7684\\u4f7f\\u7528\\n\"}]}','white','2020-08-14 11:49:11'),(203,'MySQL的两种存储引擎 InnoDB 和 MyISAM 的区别？','- InnoDB**支持事务**，可以进行Commit和Rollback；\n\n- MyISAM 只支持表级锁，而 InnoDB 还**支持行级锁**，提高了并发操作的性能；\n\n- InnoDB **支持外键**；\n\n- MyISAM **崩溃**后发生损坏的概率比 InnoDB 高很多，而且**恢复的速度**也更慢；\n\n- MyISAM 支持**压缩**表和空间数据索引，InnoDB需要更多的内存和存储；\n\n- InnoDB 支持在线**热备份**\n','<p>- InnoDB**支持事务**，可以进行Commit和Rollback；</p><p><br></p><p>- MyISAM 只支持表级锁，而 InnoDB 还**支持行级锁**，提高了并发操作的性能；</p><p><br></p><p>- InnoDB **支持外键**；</p><p><br></p><p>- MyISAM **崩溃**后发生损坏的概率比 InnoDB 高很多，而且**恢复的速度**也更慢；</p><p><br></p><p>- MyISAM 支持**压缩**表和空间数据索引，InnoDB需要更多的内存和存储；</p><p><br></p><p>- InnoDB 支持在线**热备份**</p>','{\"ops\": [{\"insert\": \"- InnoDB**\\u652f\\u6301\\u4e8b\\u52a1**\\uff0c\\u53ef\\u4ee5\\u8fdb\\u884cCommit\\u548cRollback\\uff1b\\n\\n- MyISAM \\u53ea\\u652f\\u6301\\u8868\\u7ea7\\u9501\\uff0c\\u800c InnoDB \\u8fd8**\\u652f\\u6301\\u884c\\u7ea7\\u9501**\\uff0c\\u63d0\\u9ad8\\u4e86\\u5e76\\u53d1\\u64cd\\u4f5c\\u7684\\u6027\\u80fd\\uff1b\\n\\n- InnoDB **\\u652f\\u6301\\u5916\\u952e**\\uff1b\\n\\n- MyISAM **\\u5d29\\u6e83**\\u540e\\u53d1\\u751f\\u635f\\u574f\\u7684\\u6982\\u7387\\u6bd4 InnoDB \\u9ad8\\u5f88\\u591a\\uff0c\\u800c\\u4e14**\\u6062\\u590d\\u7684\\u901f\\u5ea6**\\u4e5f\\u66f4\\u6162\\uff1b\\n\\n- MyISAM \\u652f\\u6301**\\u538b\\u7f29**\\u8868\\u548c\\u7a7a\\u95f4\\u6570\\u636e\\u7d22\\u5f15\\uff0cInnoDB\\u9700\\u8981\\u66f4\\u591a\\u7684\\u5185\\u5b58\\u548c\\u5b58\\u50a8\\uff1b\\n\\n- InnoDB \\u652f\\u6301\\u5728\\u7ebf**\\u70ed\\u5907\\u4efd**\\n\"}]}','white','2020-08-14 11:49:35'),(204,'MySQL的两种存储引擎应用场景','- **MyISAM** 管理非事务表。它提供高速存储和检索（MyISAM强调的是性能，每次查询具有原子性，其执行速度比InnoDB更快），以及全文搜索能力。如果表比较小，或者是只读数据（有大量的SELECT），还是可以使用MyISAM；\n\n- **InnoDB** 支持事务，并发情况下有很好的性能，基本可以替代MyISAM\n','<p>- **MyISAM** 管理非事务表。它提供高速存储和检索（MyISAM强调的是性能，每次查询具有原子性，其执行速度比InnoDB更快），以及全文搜索能力。如果表比较小，或者是只读数据（有大量的SELECT），还是可以使用MyISAM；</p><p><br></p><p>- **InnoDB** 支持事务，并发情况下有很好的性能，基本可以替代MyISAM</p>','{\"ops\": [{\"insert\": \"- **MyISAM** \\u7ba1\\u7406\\u975e\\u4e8b\\u52a1\\u8868\\u3002\\u5b83\\u63d0\\u4f9b\\u9ad8\\u901f\\u5b58\\u50a8\\u548c\\u68c0\\u7d22\\uff08MyISAM\\u5f3a\\u8c03\\u7684\\u662f\\u6027\\u80fd\\uff0c\\u6bcf\\u6b21\\u67e5\\u8be2\\u5177\\u6709\\u539f\\u5b50\\u6027\\uff0c\\u5176\\u6267\\u884c\\u901f\\u5ea6\\u6bd4InnoDB\\u66f4\\u5feb\\uff09\\uff0c\\u4ee5\\u53ca\\u5168\\u6587\\u641c\\u7d22\\u80fd\\u529b\\u3002\\u5982\\u679c\\u8868\\u6bd4\\u8f83\\u5c0f\\uff0c\\u6216\\u8005\\u662f\\u53ea\\u8bfb\\u6570\\u636e\\uff08\\u6709\\u5927\\u91cf\\u7684SELECT\\uff09\\uff0c\\u8fd8\\u662f\\u53ef\\u4ee5\\u4f7f\\u7528MyISAM\\uff1b\\n\\n- **InnoDB** \\u652f\\u6301\\u4e8b\\u52a1\\uff0c\\u5e76\\u53d1\\u60c5\\u51b5\\u4e0b\\u6709\\u5f88\\u597d\\u7684\\u6027\\u80fd\\uff0c\\u57fa\\u672c\\u53ef\\u4ee5\\u66ff\\u4ee3MyISAM\\n\"}]}','white','2020-08-14 11:50:03'),(205,'热备份和冷备份','- 热备份：在数据库运行的情况下备份的方法。优点：可按表或用户备份，备份时数据库仍可使用，可恢复至任一时间点。但是不能出错\n\n- 冷备份：数据库正常关闭后，将关键性文件复制到另一位置的备份方式。优点：操作简单快速，恢复简单\n','<p>- 热备份：在数据库运行的情况下备份的方法。优点：可按表或用户备份，备份时数据库仍可使用，可恢复至任一时间点。但是不能出错</p><p><br></p><p>- 冷备份：数据库正常关闭后，将关键性文件复制到另一位置的备份方式。优点：操作简单快速，恢复简单</p>','{\"ops\": [{\"insert\": \"- \\u70ed\\u5907\\u4efd\\uff1a\\u5728\\u6570\\u636e\\u5e93\\u8fd0\\u884c\\u7684\\u60c5\\u51b5\\u4e0b\\u5907\\u4efd\\u7684\\u65b9\\u6cd5\\u3002\\u4f18\\u70b9\\uff1a\\u53ef\\u6309\\u8868\\u6216\\u7528\\u6237\\u5907\\u4efd\\uff0c\\u5907\\u4efd\\u65f6\\u6570\\u636e\\u5e93\\u4ecd\\u53ef\\u4f7f\\u7528\\uff0c\\u53ef\\u6062\\u590d\\u81f3\\u4efb\\u4e00\\u65f6\\u95f4\\u70b9\\u3002\\u4f46\\u662f\\u4e0d\\u80fd\\u51fa\\u9519\\n\\n- \\u51b7\\u5907\\u4efd\\uff1a\\u6570\\u636e\\u5e93\\u6b63\\u5e38\\u5173\\u95ed\\u540e\\uff0c\\u5c06\\u5173\\u952e\\u6027\\u6587\\u4ef6\\u590d\\u5236\\u5230\\u53e6\\u4e00\\u4f4d\\u7f6e\\u7684\\u5907\\u4efd\\u65b9\\u5f0f\\u3002\\u4f18\\u70b9\\uff1a\\u64cd\\u4f5c\\u7b80\\u5355\\u5feb\\u901f\\uff0c\\u6062\\u590d\\u7b80\\u5355\\n\"}]}','white','2020-08-14 11:50:37'),(206,'如何优化数据库？-- SQL 语句的优化','> 分析慢查询日志：记录了在MySQL中响应时间超过阀值long_query_time的SQL语句，通过日志去找出IO大的SQL以及发现未命中索引的SQL\n\n> 使用 Explain 进行分析：通过explain命令可以得到表的读取顺序、数据读取操作的操作类型、哪些索引可以使用、**哪些索引被实际使用**、表之间的引用以及**被扫描的行数**等问题；\n\n- 应尽量避免在 where 子句中使用```!=```、```<```、```>```操作符或对字段进行null值判断，否则将引擎放弃使用索引而进行全表扫描；\n\n- 只返回必要的列：最好不要使用 SELECT * 语句；\n\n- 只返回必要的行：使用 LIMIT 语句来限制返回的数据；\n\n- 将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：\n\n  - 让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用；\n\n  - 分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余的查询；\n\n  - 减少锁竞争\n',NULL,'{\"ops\": [{\"insert\": \"> \\u5206\\u6790\\u6162\\u67e5\\u8be2\\u65e5\\u5fd7\\uff1a\\u8bb0\\u5f55\\u4e86\\u5728MySQL\\u4e2d\\u54cd\\u5e94\\u65f6\\u95f4\\u8d85\\u8fc7\\u9600\\u503clong_query_time\\u7684SQL\\u8bed\\u53e5\\uff0c\\u901a\\u8fc7\\u65e5\\u5fd7\\u53bb\\u627e\\u51faIO\\u5927\\u7684SQL\\u4ee5\\u53ca\\u53d1\\u73b0\\u672a\\u547d\\u4e2d\\u7d22\\u5f15\\u7684SQL\\n\\n> \\u4f7f\\u7528 Explain \\u8fdb\\u884c\\u5206\\u6790\\uff1a\\u901a\\u8fc7explain\\u547d\\u4ee4\\u53ef\\u4ee5\\u5f97\\u5230\\u8868\\u7684\\u8bfb\\u53d6\\u987a\\u5e8f\\u3001\\u6570\\u636e\\u8bfb\\u53d6\\u64cd\\u4f5c\\u7684\\u64cd\\u4f5c\\u7c7b\\u578b\\u3001\\u54ea\\u4e9b\\u7d22\\u5f15\\u53ef\\u4ee5\\u4f7f\\u7528\\u3001**\\u54ea\\u4e9b\\u7d22\\u5f15\\u88ab\\u5b9e\\u9645\\u4f7f\\u7528**\\u3001\\u8868\\u4e4b\\u95f4\\u7684\\u5f15\\u7528\\u4ee5\\u53ca**\\u88ab\\u626b\\u63cf\\u7684\\u884c\\u6570**\\u7b49\\u95ee\\u9898\\uff1b\\n\\n- \\u5e94\\u5c3d\\u91cf\\u907f\\u514d\\u5728 where \\u5b50\\u53e5\\u4e2d\\u4f7f\\u7528```!=```\\u3001```<```\\u3001```>```\\u64cd\\u4f5c\\u7b26\\u6216\\u5bf9\\u5b57\\u6bb5\\u8fdb\\u884cnull\\u503c\\u5224\\u65ad\\uff0c\\u5426\\u5219\\u5c06\\u5f15\\u64ce\\u653e\\u5f03\\u4f7f\\u7528\\u7d22\\u5f15\\u800c\\u8fdb\\u884c\\u5168\\u8868\\u626b\\u63cf\\uff1b\\n\\n- \\u53ea\\u8fd4\\u56de\\u5fc5\\u8981\\u7684\\u5217\\uff1a\\u6700\\u597d\\u4e0d\\u8981\\u4f7f\\u7528 SELECT * \\u8bed\\u53e5\\uff1b\\n\\n- \\u53ea\\u8fd4\\u56de\\u5fc5\\u8981\\u7684\\u884c\\uff1a\\u4f7f\\u7528 LIMIT \\u8bed\\u53e5\\u6765\\u9650\\u5236\\u8fd4\\u56de\\u7684\\u6570\\u636e\\uff1b\\n\\n- \\u5c06\\u4e00\\u4e2a\\u5927\\u8fde\\u63a5\\u67e5\\u8be2\\u5206\\u89e3\\u6210\\u5bf9\\u6bcf\\u4e00\\u4e2a\\u8868\\u8fdb\\u884c\\u4e00\\u6b21\\u5355\\u8868\\u67e5\\u8be2\\uff0c\\u7136\\u540e\\u5728\\u5e94\\u7528\\u7a0b\\u5e8f\\u4e2d\\u8fdb\\u884c\\u5173\\u8054\\uff0c\\u8fd9\\u6837\\u505a\\u7684\\u597d\\u5904\\u6709\\uff1a\\n\\n  - \\u8ba9\\u7f13\\u5b58\\u66f4\\u9ad8\\u6548\\u3002\\u5bf9\\u4e8e\\u8fde\\u63a5\\u67e5\\u8be2\\uff0c\\u5982\\u679c\\u5176\\u4e2d\\u4e00\\u4e2a\\u8868\\u53d1\\u751f\\u53d8\\u5316\\uff0c\\u90a3\\u4e48\\u6574\\u4e2a\\u67e5\\u8be2\\u7f13\\u5b58\\u5c31\\u65e0\\u6cd5\\u4f7f\\u7528\\u3002\\u800c\\u5206\\u89e3\\u540e\\u7684\\u591a\\u4e2a\\u67e5\\u8be2\\uff0c\\u5373\\u4f7f\\u5176\\u4e2d\\u4e00\\u4e2a\\u8868\\u53d1\\u751f\\u53d8\\u5316\\uff0c\\u5bf9\\u5176\\u5b83\\u8868\\u7684\\u67e5\\u8be2\\u7f13\\u5b58\\u4f9d\\u7136\\u53ef\\u4ee5\\u4f7f\\u7528\\uff1b\\n\\n  - \\u5206\\u89e3\\u6210\\u591a\\u4e2a\\u5355\\u8868\\u67e5\\u8be2\\uff0c\\u8fd9\\u4e9b\\u5355\\u8868\\u67e5\\u8be2\\u7684\\u7f13\\u5b58\\u7ed3\\u679c\\u66f4\\u53ef\\u80fd\\u88ab\\u5176\\u5b83\\u67e5\\u8be2\\u4f7f\\u7528\\u5230\\uff0c\\u4ece\\u800c\\u51cf\\u5c11\\u5197\\u4f59\\u7684\\u67e5\\u8be2\\uff1b\\n\\n  - \\u51cf\\u5c11\\u9501\\u7ade\\u4e89\\n\"}]}','white','2020-08-14 11:51:27'),(207,'如何优化数据库？-- 索引的优化','注意会引起索引失效的情况，以及在适合的地方建立索引\n',NULL,'{\"ops\": [{\"insert\": \"\\u6ce8\\u610f\\u4f1a\\u5f15\\u8d77\\u7d22\\u5f15\\u5931\\u6548\\u7684\\u60c5\\u51b5\\uff0c\\u4ee5\\u53ca\\u5728\\u9002\\u5408\\u7684\\u5730\\u65b9\\u5efa\\u7acb\\u7d22\\u5f15\\n\"}]}','white','2020-08-14 11:52:23'),(208,'如何优化数据库？-- 数据库表结构的优化','- 设计表时遵循**三大范式**；\n\n- 选择合适的**数据类型**：尽可能不要存储NULL字段；使用简单的数据类型（int, varchar/ text）；\n\n- 表的**水平切分**（Sharding）：将同一个表中的记录拆分到多个结构相同的表中（策略：哈希取模；根据ID范围来分）。当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓解单个数据库的压力；\n\n- 表的**垂直切分**：将一张表按列切分成多个表。可以将不常用的字段单独放在同一个表中；把大字段独立放入一个表中；或者把经常使用的字段（关系密切的）放在一张表中。垂直切分之后业务更加清晰，系统之间整合或扩展容易，数据维护简单\n','<p>- 设计表时遵循**三大范式**；</p><p><br></p><p>- 选择合适的**数据类型**：尽可能不要存储NULL字段；使用简单的数据类型（int, varchar/ text）；</p><p><br></p><p>- 表的**水平切分**（Sharding）：将同一个表中的记录拆分到多个结构相同的表中（策略：哈希取模；根据ID范围来分）。当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓解单个数据库的压力；</p><p><br></p><p>- 表的**垂直切分**：将一张表按列切分成多个表。可以将不常用的字段单独放在同一个表中；把大字段独立放入一个表中；或者把经常使用的字段（关系密切的）放在一张表中。垂直切分之后业务更加清晰，系统之间整合或扩展容易，数据维护简单</p>','{\"ops\": [{\"insert\": \"- \\u8bbe\\u8ba1\\u8868\\u65f6\\u9075\\u5faa**\\u4e09\\u5927\\u8303\\u5f0f**\\uff1b\\n\\n- \\u9009\\u62e9\\u5408\\u9002\\u7684**\\u6570\\u636e\\u7c7b\\u578b**\\uff1a\\u5c3d\\u53ef\\u80fd\\u4e0d\\u8981\\u5b58\\u50a8NULL\\u5b57\\u6bb5\\uff1b\\u4f7f\\u7528\\u7b80\\u5355\\u7684\\u6570\\u636e\\u7c7b\\u578b\\uff08int, varchar/ text\\uff09\\uff1b\\n\\n- \\u8868\\u7684**\\u6c34\\u5e73\\u5207\\u5206**\\uff08Sharding\\uff09\\uff1a\\u5c06\\u540c\\u4e00\\u4e2a\\u8868\\u4e2d\\u7684\\u8bb0\\u5f55\\u62c6\\u5206\\u5230\\u591a\\u4e2a\\u7ed3\\u6784\\u76f8\\u540c\\u7684\\u8868\\u4e2d\\uff08\\u7b56\\u7565\\uff1a\\u54c8\\u5e0c\\u53d6\\u6a21\\uff1b\\u6839\\u636eID\\u8303\\u56f4\\u6765\\u5206\\uff09\\u3002\\u5f53\\u4e00\\u4e2a\\u8868\\u7684\\u6570\\u636e\\u4e0d\\u65ad\\u589e\\u591a\\u65f6\\uff0cSharding \\u662f\\u5fc5\\u7136\\u7684\\u9009\\u62e9\\uff0c\\u5b83\\u53ef\\u4ee5\\u5c06\\u6570\\u636e\\u5206\\u5e03\\u5230\\u96c6\\u7fa4\\u7684\\u4e0d\\u540c\\u8282\\u70b9\\u4e0a\\uff0c\\u4ece\\u800c\\u7f13\\u89e3\\u5355\\u4e2a\\u6570\\u636e\\u5e93\\u7684\\u538b\\u529b\\uff1b\\n\\n- \\u8868\\u7684**\\u5782\\u76f4\\u5207\\u5206**\\uff1a\\u5c06\\u4e00\\u5f20\\u8868\\u6309\\u5217\\u5207\\u5206\\u6210\\u591a\\u4e2a\\u8868\\u3002\\u53ef\\u4ee5\\u5c06\\u4e0d\\u5e38\\u7528\\u7684\\u5b57\\u6bb5\\u5355\\u72ec\\u653e\\u5728\\u540c\\u4e00\\u4e2a\\u8868\\u4e2d\\uff1b\\u628a\\u5927\\u5b57\\u6bb5\\u72ec\\u7acb\\u653e\\u5165\\u4e00\\u4e2a\\u8868\\u4e2d\\uff1b\\u6216\\u8005\\u628a\\u7ecf\\u5e38\\u4f7f\\u7528\\u7684\\u5b57\\u6bb5\\uff08\\u5173\\u7cfb\\u5bc6\\u5207\\u7684\\uff09\\u653e\\u5728\\u4e00\\u5f20\\u8868\\u4e2d\\u3002\\u5782\\u76f4\\u5207\\u5206\\u4e4b\\u540e\\u4e1a\\u52a1\\u66f4\\u52a0\\u6e05\\u6670\\uff0c\\u7cfb\\u7edf\\u4e4b\\u95f4\\u6574\\u5408\\u6216\\u6269\\u5c55\\u5bb9\\u6613\\uff0c\\u6570\\u636e\\u7ef4\\u62a4\\u7b80\\u5355\\n\"}]}','white','2020-08-14 11:52:58'),(209,'如何优化数据库？-- 系统配置的优化','- 操作系统：增加TCP支持的队列数；\n- MySQL配置文件优化：缓存池大小和个数设置\n','<p>- 操作系统：增加TCP支持的队列数；</p><p>- MySQL配置文件优化：缓存池大小和个数设置</p>','{\"ops\": [{\"insert\": \"- \\u64cd\\u4f5c\\u7cfb\\u7edf\\uff1a\\u589e\\u52a0TCP\\u652f\\u6301\\u7684\\u961f\\u5217\\u6570\\uff1b\\n- MySQL\\u914d\\u7f6e\\u6587\\u4ef6\\u4f18\\u5316\\uff1a\\u7f13\\u5b58\\u6c60\\u5927\\u5c0f\\u548c\\u4e2a\\u6570\\u8bbe\\u7f6e\\n\"}]}','white','2020-08-14 11:53:22'),(210,'如何优化数据库？-- 硬件的优化','- 磁盘性能：固态硬盘；\n- CPU：多核且高频；\n- 内存：增大内存\n','<p>- 磁盘性能：固态硬盘；</p><p>- CPU：多核且高频；</p><p>- 内存：增大内存</p>','{\"ops\": [{\"insert\": \"- \\u78c1\\u76d8\\u6027\\u80fd\\uff1a\\u56fa\\u6001\\u786c\\u76d8\\uff1b\\n- CPU\\uff1a\\u591a\\u6838\\u4e14\\u9ad8\\u9891\\uff1b\\n- \\u5185\\u5b58\\uff1a\\u589e\\u5927\\u5185\\u5b58\\n\"}]}','white','2020-08-14 11:53:39'),(211,'什么是主从复制？实现原理是什么？','主从复制（Replication）是指数据可以从一个MySQL数据库主服务器复制到一个或多个从服务器，从服务器可以复制主服务器中的所有数据库或者特定的数据库，或者特定的表。默认采用异步模式。\n\n实现原理：\n\n- 主服务器 **binary log dump 线程**：将主服务器中的数据更改（增删改）日志写入 Binary log 中；\n- 从服务器 **I/O 线程**：负责从主服务器读取binary log，并写入本地的 Relay log；\n- 从服务器 **SQL 线程**：负责读取 Relay log，解析出主服务器已经执行的数据更改，并在从服务器中重新执行（Replay），保证主从数据的一致性\n','<p>主从复制（Replication）是指数据可以从一个MySQL数据库主服务器复制到一个或多个从服务器，从服务器可以复制主服务器中的所有数据库或者特定的数据库，或者特定的表。默认采用异步模式。</p><p><br></p><p>实现原理：</p><p><br></p><p>- 主服务器 **binary log dump 线程**：将主服务器中的数据更改（增删改）日志写入 Binary log 中；</p><p>- 从服务器 **I/O 线程**：负责从主服务器读取binary log，并写入本地的 Relay log；</p><p>- 从服务器 **SQL 线程**：负责读取 Relay log，解析出主服务器已经执行的数据更改，并在从服务器中重新执行（Replay），保证主从数据的一致性</p>','{\"ops\": [{\"insert\": \"\\u4e3b\\u4ece\\u590d\\u5236\\uff08Replication\\uff09\\u662f\\u6307\\u6570\\u636e\\u53ef\\u4ee5\\u4ece\\u4e00\\u4e2aMySQL\\u6570\\u636e\\u5e93\\u4e3b\\u670d\\u52a1\\u5668\\u590d\\u5236\\u5230\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u4ece\\u670d\\u52a1\\u5668\\uff0c\\u4ece\\u670d\\u52a1\\u5668\\u53ef\\u4ee5\\u590d\\u5236\\u4e3b\\u670d\\u52a1\\u5668\\u4e2d\\u7684\\u6240\\u6709\\u6570\\u636e\\u5e93\\u6216\\u8005\\u7279\\u5b9a\\u7684\\u6570\\u636e\\u5e93\\uff0c\\u6216\\u8005\\u7279\\u5b9a\\u7684\\u8868\\u3002\\u9ed8\\u8ba4\\u91c7\\u7528\\u5f02\\u6b65\\u6a21\\u5f0f\\u3002\\n\\n\\u5b9e\\u73b0\\u539f\\u7406\\uff1a\\n\\n- \\u4e3b\\u670d\\u52a1\\u5668 **binary log dump \\u7ebf\\u7a0b**\\uff1a\\u5c06\\u4e3b\\u670d\\u52a1\\u5668\\u4e2d\\u7684\\u6570\\u636e\\u66f4\\u6539\\uff08\\u589e\\u5220\\u6539\\uff09\\u65e5\\u5fd7\\u5199\\u5165 Binary log \\u4e2d\\uff1b\\n- \\u4ece\\u670d\\u52a1\\u5668 **I/O \\u7ebf\\u7a0b**\\uff1a\\u8d1f\\u8d23\\u4ece\\u4e3b\\u670d\\u52a1\\u5668\\u8bfb\\u53d6binary log\\uff0c\\u5e76\\u5199\\u5165\\u672c\\u5730\\u7684 Relay log\\uff1b\\n- \\u4ece\\u670d\\u52a1\\u5668 **SQL \\u7ebf\\u7a0b**\\uff1a\\u8d1f\\u8d23\\u8bfb\\u53d6 Relay log\\uff0c\\u89e3\\u6790\\u51fa\\u4e3b\\u670d\\u52a1\\u5668\\u5df2\\u7ecf\\u6267\\u884c\\u7684\\u6570\\u636e\\u66f4\\u6539\\uff0c\\u5e76\\u5728\\u4ece\\u670d\\u52a1\\u5668\\u4e2d\\u91cd\\u65b0\\u6267\\u884c\\uff08Replay\\uff09\\uff0c\\u4fdd\\u8bc1\\u4e3b\\u4ece\\u6570\\u636e\\u7684\\u4e00\\u81f4\\u6027\\n\"}]}','white','2020-08-14 11:54:19'),(212,'为什么要主从复制？','- 读写分离：主服务器负责写，从服务器负责读\n  - 缓解了锁的争用，即使主服务器中加了锁，依然可以进行读操作；\n  - 从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；\n  - 增加冗余，提高可用性\n- 数据实时备份，当系统中某个节点发生故障时，可以方便的故障切换\n- 降低单个服务器磁盘I/O访问的频率，提高单个机器的I/O性能\n','<p>- 读写分离：主服务器负责写，从服务器负责读</p><p>  - 缓解了锁的争用，即使主服务器中加了锁，依然可以进行读操作；</p><p>  - 从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</p><p>  - 增加冗余，提高可用性</p><p>- 数据实时备份，当系统中某个节点发生故障时，可以方便的故障切换</p><p>- 降低单个服务器磁盘I/O访问的频率，提高单个机器的I/O性能</p>','{\"ops\": [{\"insert\": \"- \\u8bfb\\u5199\\u5206\\u79bb\\uff1a\\u4e3b\\u670d\\u52a1\\u5668\\u8d1f\\u8d23\\u5199\\uff0c\\u4ece\\u670d\\u52a1\\u5668\\u8d1f\\u8d23\\u8bfb\\n  - \\u7f13\\u89e3\\u4e86\\u9501\\u7684\\u4e89\\u7528\\uff0c\\u5373\\u4f7f\\u4e3b\\u670d\\u52a1\\u5668\\u4e2d\\u52a0\\u4e86\\u9501\\uff0c\\u4f9d\\u7136\\u53ef\\u4ee5\\u8fdb\\u884c\\u8bfb\\u64cd\\u4f5c\\uff1b\\n  - \\u4ece\\u670d\\u52a1\\u5668\\u53ef\\u4ee5\\u4f7f\\u7528 MyISAM\\uff0c\\u63d0\\u5347\\u67e5\\u8be2\\u6027\\u80fd\\u4ee5\\u53ca\\u8282\\u7ea6\\u7cfb\\u7edf\\u5f00\\u9500\\uff1b\\n  - \\u589e\\u52a0\\u5197\\u4f59\\uff0c\\u63d0\\u9ad8\\u53ef\\u7528\\u6027\\n- \\u6570\\u636e\\u5b9e\\u65f6\\u5907\\u4efd\\uff0c\\u5f53\\u7cfb\\u7edf\\u4e2d\\u67d0\\u4e2a\\u8282\\u70b9\\u53d1\\u751f\\u6545\\u969c\\u65f6\\uff0c\\u53ef\\u4ee5\\u65b9\\u4fbf\\u7684\\u6545\\u969c\\u5207\\u6362\\n- \\u964d\\u4f4e\\u5355\\u4e2a\\u670d\\u52a1\\u5668\\u78c1\\u76d8I/O\\u8bbf\\u95ee\\u7684\\u9891\\u7387\\uff0c\\u63d0\\u9ad8\\u5355\\u4e2a\\u673a\\u5668\\u7684I/O\\u6027\\u80fd\\n\"}]}','white','2020-08-14 11:54:30'),(213,'什么是 Python 生成器？','generator，有两种产生生成器对象的方式：一种是列表生成式加括号：\n\n```g1 = (x for x in range(10))```\n\n一种是在函数定义中包含```yield```关键字：\n\n```python\ndef fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return \'done\'\n\ng2 = fib(8)\n```\n\n对于generator对象g1和g2，可以通过```next(g1)```不断获得下一个元素的值，如果没有更多的元素，就会报错```StopIteration```\n\n也可以通过for循环获得元素的值。\n\n生成器的好处是不用占用很多内存，只需要在用的时候计算元素的值就行了。\n','<p>generator，有两种产生生成器对象的方式：一种是列表生成式加括号：</p><p><br></p><p>```g1 = (x for x in range(10))```</p><p><br></p><p>一种是在函数定义中包含```yield```关键字：</p><p><br></p><p>```python</p><p>def fib(max):</p><p>    n, a, b = 0, 0, 1</p><p>    while n &lt; max:</p><p>        yield b</p><p>        a, b = b, a + b</p><p>        n = n + 1</p><p>    return \'done\'</p><p><br></p><p>g2 = fib(8)</p><p>```</p><p><br></p><p>对于generator对象g1和g2，可以通过```next(g1)```不断获得下一个元素的值，如果没有更多的元素，就会报错```StopIteration```</p><p><br></p><p>也可以通过for循环获得元素的值。</p><p><br></p><p>生成器的好处是不用占用很多内存，只需要在用的时候计算元素的值就行了。</p>','{\"ops\": [{\"insert\": \"generator\\uff0c\\u6709\\u4e24\\u79cd\\u4ea7\\u751f\\u751f\\u6210\\u5668\\u5bf9\\u8c61\\u7684\\u65b9\\u5f0f\\uff1a\\u4e00\\u79cd\\u662f\\u5217\\u8868\\u751f\\u6210\\u5f0f\\u52a0\\u62ec\\u53f7\\uff1a\\n\\n```g1 = (x for x in range(10))```\\n\\n\\u4e00\\u79cd\\u662f\\u5728\\u51fd\\u6570\\u5b9a\\u4e49\\u4e2d\\u5305\\u542b```yield```\\u5173\\u952e\\u5b57\\uff1a\\n\\n```python\\ndef fib(max):\\n    n, a, b = 0, 0, 1\\n    while n < max:\\n        yield b\\n        a, b = b, a + b\\n        n = n + 1\\n    return \'done\'\\n\\ng2 = fib(8)\\n```\\n\\n\\u5bf9\\u4e8egenerator\\u5bf9\\u8c61g1\\u548cg2\\uff0c\\u53ef\\u4ee5\\u901a\\u8fc7```next(g1)```\\u4e0d\\u65ad\\u83b7\\u5f97\\u4e0b\\u4e00\\u4e2a\\u5143\\u7d20\\u7684\\u503c\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u66f4\\u591a\\u7684\\u5143\\u7d20\\uff0c\\u5c31\\u4f1a\\u62a5\\u9519```StopIteration```\\n\\n\\u4e5f\\u53ef\\u4ee5\\u901a\\u8fc7for\\u5faa\\u73af\\u83b7\\u5f97\\u5143\\u7d20\\u7684\\u503c\\u3002\\n\\n\\u751f\\u6210\\u5668\\u7684\\u597d\\u5904\\u662f\\u4e0d\\u7528\\u5360\\u7528\\u5f88\\u591a\\u5185\\u5b58\\uff0c\\u53ea\\u9700\\u8981\\u5728\\u7528\\u7684\\u65f6\\u5019\\u8ba1\\u7b97\\u5143\\u7d20\\u7684\\u503c\\u5c31\\u884c\\u4e86\\u3002\\n\"}]}','white','2020-08-14 11:56:44'),(214,'什么是 Python 迭代器？','Python中可以用于for循环的，叫做可迭代```Iterable```，包括list/set/tuple/str/dict等数据结构以及生成器；可以用以下语句判断一个对象是否是可迭代的：\n\n```python\nfrom collections import Iterable\nisinstance(x, Iterable)\n```\n\n迭代器```Iterator```，是指可以被```next()```函数调用并不断返回下一个值，直到```StopIteration```；生成器都是Iterator，而列表等数据结构不是；可以通过以下语句将list变为Iterator：\n\n```iter([1,2,3,4,5])```\n\n生成器都是Iterator，但迭代器不一定是生成器。\n','<p>Python中可以用于for循环的，叫做可迭代```Iterable```，包括list/set/tuple/str/dict等数据结构以及生成器；可以用以下语句判断一个对象是否是可迭代的：</p><p><br></p><p>```python</p><p>from collections import Iterable</p><p>isinstance(x, Iterable)</p><p>```</p><p><br></p><p>迭代器```Iterator```，是指可以被```next()```函数调用并不断返回下一个值，直到```StopIteration```；生成器都是Iterator，而列表等数据结构不是；可以通过以下语句将list变为Iterator：</p><p><br></p><p>```iter([1,2,3,4,5])```</p><p><br></p><p>生成器都是Iterator，但迭代器不一定是生成器。</p>','{\"ops\": [{\"insert\": \"Python\\u4e2d\\u53ef\\u4ee5\\u7528\\u4e8efor\\u5faa\\u73af\\u7684\\uff0c\\u53eb\\u505a\\u53ef\\u8fed\\u4ee3```Iterable```\\uff0c\\u5305\\u62eclist/set/tuple/str/dict\\u7b49\\u6570\\u636e\\u7ed3\\u6784\\u4ee5\\u53ca\\u751f\\u6210\\u5668\\uff1b\\u53ef\\u4ee5\\u7528\\u4ee5\\u4e0b\\u8bed\\u53e5\\u5224\\u65ad\\u4e00\\u4e2a\\u5bf9\\u8c61\\u662f\\u5426\\u662f\\u53ef\\u8fed\\u4ee3\\u7684\\uff1a\\n\\n```python\\nfrom collections import Iterable\\nisinstance(x, Iterable)\\n```\\n\\n\\u8fed\\u4ee3\\u5668```Iterator```\\uff0c\\u662f\\u6307\\u53ef\\u4ee5\\u88ab```next()```\\u51fd\\u6570\\u8c03\\u7528\\u5e76\\u4e0d\\u65ad\\u8fd4\\u56de\\u4e0b\\u4e00\\u4e2a\\u503c\\uff0c\\u76f4\\u5230```StopIteration```\\uff1b\\u751f\\u6210\\u5668\\u90fd\\u662fIterator\\uff0c\\u800c\\u5217\\u8868\\u7b49\\u6570\\u636e\\u7ed3\\u6784\\u4e0d\\u662f\\uff1b\\u53ef\\u4ee5\\u901a\\u8fc7\\u4ee5\\u4e0b\\u8bed\\u53e5\\u5c06list\\u53d8\\u4e3aIterator\\uff1a\\n\\n```iter([1,2,3,4,5])```\\n\\n\\u751f\\u6210\\u5668\\u90fd\\u662fIterator\\uff0c\\u4f46\\u8fed\\u4ee3\\u5668\\u4e0d\\u4e00\\u5b9a\\u662f\\u751f\\u6210\\u5668\\u3002\\n\"}]}','white','2020-08-14 11:57:10'),(215,'list 和 tuple 有什么区别？','- list 长度可变，tuple不可变；\n- list 中元素的值可以改变，tuple 不能改变；\n- list 支持```append```; ```insert```; ```remove```; ```pop```等方法，tuple 都不支持\n','<p>- list 长度可变，tuple不可变；</p><p>- list 中元素的值可以改变，tuple 不能改变；</p><p>- list 支持```append```; ```insert```; ```remove```; ```pop```等方法，tuple 都不支持</p>','{\"ops\": [{\"insert\": \"- list \\u957f\\u5ea6\\u53ef\\u53d8\\uff0ctuple\\u4e0d\\u53ef\\u53d8\\uff1b\\n- list \\u4e2d\\u5143\\u7d20\\u7684\\u503c\\u53ef\\u4ee5\\u6539\\u53d8\\uff0ctuple \\u4e0d\\u80fd\\u6539\\u53d8\\uff1b\\n- list \\u652f\\u6301```append```; ```insert```; ```remove```; ```pop```\\u7b49\\u65b9\\u6cd5\\uff0ctuple \\u90fd\\u4e0d\\u652f\\u6301\\n\"}]}','white','2020-08-14 11:57:21'),(216,'Python 中使用多线程可以达到多核CPU一起使用吗？','Python中有一个被称为Global Interpreter Lock（GIL）的东西，它会确保任何时候你的多个线程中，只有一个被执行。线程的执行速度非常之快，会让你误以为线程是并行执行的，但是实际上都是轮流执行。经过GIL这一道关卡处理，会增加执行的开销。\n\n可以通过多进程实现多核任务。\n','<p>Python中有一个被称为Global Interpreter Lock（GIL）的东西，它会确保任何时候你的多个线程中，只有一个被执行。线程的执行速度非常之快，会让你误以为线程是并行执行的，但是实际上都是轮流执行。经过GIL这一道关卡处理，会增加执行的开销。</p><p><br></p><p>可以通过多进程实现多核任务。</p>','{\"ops\": [{\"insert\": \"Python\\u4e2d\\u6709\\u4e00\\u4e2a\\u88ab\\u79f0\\u4e3aGlobal Interpreter Lock\\uff08GIL\\uff09\\u7684\\u4e1c\\u897f\\uff0c\\u5b83\\u4f1a\\u786e\\u4fdd\\u4efb\\u4f55\\u65f6\\u5019\\u4f60\\u7684\\u591a\\u4e2a\\u7ebf\\u7a0b\\u4e2d\\uff0c\\u53ea\\u6709\\u4e00\\u4e2a\\u88ab\\u6267\\u884c\\u3002\\u7ebf\\u7a0b\\u7684\\u6267\\u884c\\u901f\\u5ea6\\u975e\\u5e38\\u4e4b\\u5feb\\uff0c\\u4f1a\\u8ba9\\u4f60\\u8bef\\u4ee5\\u4e3a\\u7ebf\\u7a0b\\u662f\\u5e76\\u884c\\u6267\\u884c\\u7684\\uff0c\\u4f46\\u662f\\u5b9e\\u9645\\u4e0a\\u90fd\\u662f\\u8f6e\\u6d41\\u6267\\u884c\\u3002\\u7ecf\\u8fc7GIL\\u8fd9\\u4e00\\u9053\\u5173\\u5361\\u5904\\u7406\\uff0c\\u4f1a\\u589e\\u52a0\\u6267\\u884c\\u7684\\u5f00\\u9500\\u3002\\n\\n\\u53ef\\u4ee5\\u901a\\u8fc7\\u591a\\u8fdb\\u7a0b\\u5b9e\\u73b0\\u591a\\u6838\\u4efb\\u52a1\\u3002\\n\"}]}','white','2020-08-14 11:57:59'),(217,'什么是 lambda 表达式？','简单来说，lambda表达式通常是当你需要使用一个函数，但是又不想费脑袋去命名一个函数的时候使用，也就是通常所说的匿名函数。\n\nlambda表达式一般的形式是：关键词lambda后面紧接一个或多个参数，紧接一个冒号“：”，紧接一个表达式\n','<p>简单来说，lambda表达式通常是当你需要使用一个函数，但是又不想费脑袋去命名一个函数的时候使用，也就是通常所说的匿名函数。</p><p><br></p><p>lambda表达式一般的形式是：关键词lambda后面紧接一个或多个参数，紧接一个冒号“：”，紧接一个表达式</p>','{\"ops\": [{\"insert\": \"\\u7b80\\u5355\\u6765\\u8bf4\\uff0clambda\\u8868\\u8fbe\\u5f0f\\u901a\\u5e38\\u662f\\u5f53\\u4f60\\u9700\\u8981\\u4f7f\\u7528\\u4e00\\u4e2a\\u51fd\\u6570\\uff0c\\u4f46\\u662f\\u53c8\\u4e0d\\u60f3\\u8d39\\u8111\\u888b\\u53bb\\u547d\\u540d\\u4e00\\u4e2a\\u51fd\\u6570\\u7684\\u65f6\\u5019\\u4f7f\\u7528\\uff0c\\u4e5f\\u5c31\\u662f\\u901a\\u5e38\\u6240\\u8bf4\\u7684\\u533f\\u540d\\u51fd\\u6570\\u3002\\n\\nlambda\\u8868\\u8fbe\\u5f0f\\u4e00\\u822c\\u7684\\u5f62\\u5f0f\\u662f\\uff1a\\u5173\\u952e\\u8bcdlambda\\u540e\\u9762\\u7d27\\u63a5\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u53c2\\u6570\\uff0c\\u7d27\\u63a5\\u4e00\\u4e2a\\u5192\\u53f7\\u201c\\uff1a\\u201d\\uff0c\\u7d27\\u63a5\\u4e00\\u4e2a\\u8868\\u8fbe\\u5f0f\\n\"}]}','white','2020-08-14 11:58:10'),(218,'什么是深拷贝和浅拷贝？','赋值（=），就是创建了对象的一个新的引用，修改其中任意一个变量都会影响到另一个。\n\n浅拷贝 copy.copy：创建一个新的对象，但它包含的是对原始对象中包含项的引用（如果用引用的方式修改其中一个对象，另外一个也会修改改变）\n\n深拷贝：创建一个新的对象，并且递归的复制它所包含的对象（修改其中一个，另外一个不会改变）{copy模块的deep.deepcopy()函数}\n','<p>赋值（=），就是创建了对象的一个新的引用，修改其中任意一个变量都会影响到另一个。</p><p><br></p><p>浅拷贝 copy.copy：创建一个新的对象，但它包含的是对原始对象中包含项的引用（如果用引用的方式修改其中一个对象，另外一个也会修改改变）</p><p><br></p><p>深拷贝：创建一个新的对象，并且递归的复制它所包含的对象（修改其中一个，另外一个不会改变）{copy模块的deep.deepcopy()函数}</p>','{\"ops\": [{\"insert\": \"\\u8d4b\\u503c\\uff08=\\uff09\\uff0c\\u5c31\\u662f\\u521b\\u5efa\\u4e86\\u5bf9\\u8c61\\u7684\\u4e00\\u4e2a\\u65b0\\u7684\\u5f15\\u7528\\uff0c\\u4fee\\u6539\\u5176\\u4e2d\\u4efb\\u610f\\u4e00\\u4e2a\\u53d8\\u91cf\\u90fd\\u4f1a\\u5f71\\u54cd\\u5230\\u53e6\\u4e00\\u4e2a\\u3002\\n\\n\\u6d45\\u62f7\\u8d1d copy.copy\\uff1a\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u5bf9\\u8c61\\uff0c\\u4f46\\u5b83\\u5305\\u542b\\u7684\\u662f\\u5bf9\\u539f\\u59cb\\u5bf9\\u8c61\\u4e2d\\u5305\\u542b\\u9879\\u7684\\u5f15\\u7528\\uff08\\u5982\\u679c\\u7528\\u5f15\\u7528\\u7684\\u65b9\\u5f0f\\u4fee\\u6539\\u5176\\u4e2d\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff0c\\u53e6\\u5916\\u4e00\\u4e2a\\u4e5f\\u4f1a\\u4fee\\u6539\\u6539\\u53d8\\uff09\\n\\n\\u6df1\\u62f7\\u8d1d\\uff1a\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u5bf9\\u8c61\\uff0c\\u5e76\\u4e14\\u9012\\u5f52\\u7684\\u590d\\u5236\\u5b83\\u6240\\u5305\\u542b\\u7684\\u5bf9\\u8c61\\uff08\\u4fee\\u6539\\u5176\\u4e2d\\u4e00\\u4e2a\\uff0c\\u53e6\\u5916\\u4e00\\u4e2a\\u4e0d\\u4f1a\\u6539\\u53d8\\uff09{copy\\u6a21\\u5757\\u7684deep.deepcopy()\\u51fd\\u6570}\\n\"}]}','white','2020-08-14 11:58:20'),(219,'双等于和 is 有什么区别？','```==```比较的是两个变量的 value，只要值相等就会返回True\n\n```is```比较的是两个变量的 id，即```id(a) == id(b)```，只有两个变量指向同一个对象的时候，才会返回True\n\n但是需要注意的是，比如以下代码：\n\n```\na = 2\nb = 2\nprint(a is b)\n```\n\n按照上面的解释，应该会输出False，但是事实上会输出True，这是因为Python中对小数据有缓存机制，-5~256之间的数据都会被缓存。\n','<p>```==```比较的是两个变量的 value，只要值相等就会返回True</p><p><br></p><p>```is```比较的是两个变量的 id，即```id(a) == id(b)```，只有两个变量指向同一个对象的时候，才会返回True</p><p><br></p><p>但是需要注意的是，比如以下代码：</p><p><br></p><p>```</p><p>a = 2</p><p>b = 2</p><p>print(a is b)</p><p>```</p><p><br></p><p>按照上面的解释，应该会输出False，但是事实上会输出True，这是因为Python中对小数据有缓存机制，-5~256之间的数据都会被缓存。</p>','{\"ops\": [{\"insert\": \"```==```\\u6bd4\\u8f83\\u7684\\u662f\\u4e24\\u4e2a\\u53d8\\u91cf\\u7684 value\\uff0c\\u53ea\\u8981\\u503c\\u76f8\\u7b49\\u5c31\\u4f1a\\u8fd4\\u56deTrue\\n\\n```is```\\u6bd4\\u8f83\\u7684\\u662f\\u4e24\\u4e2a\\u53d8\\u91cf\\u7684 id\\uff0c\\u5373```id(a) == id(b)```\\uff0c\\u53ea\\u6709\\u4e24\\u4e2a\\u53d8\\u91cf\\u6307\\u5411\\u540c\\u4e00\\u4e2a\\u5bf9\\u8c61\\u7684\\u65f6\\u5019\\uff0c\\u624d\\u4f1a\\u8fd4\\u56deTrue\\n\\n\\u4f46\\u662f\\u9700\\u8981\\u6ce8\\u610f\\u7684\\u662f\\uff0c\\u6bd4\\u5982\\u4ee5\\u4e0b\\u4ee3\\u7801\\uff1a\\n\\n```\\na = 2\\nb = 2\\nprint(a is b)\\n```\\n\\n\\u6309\\u7167\\u4e0a\\u9762\\u7684\\u89e3\\u91ca\\uff0c\\u5e94\\u8be5\\u4f1a\\u8f93\\u51faFalse\\uff0c\\u4f46\\u662f\\u4e8b\\u5b9e\\u4e0a\\u4f1a\\u8f93\\u51faTrue\\uff0c\\u8fd9\\u662f\\u56e0\\u4e3aPython\\u4e2d\\u5bf9\\u5c0f\\u6570\\u636e\\u6709\\u7f13\\u5b58\\u673a\\u5236\\uff0c-5~256\\u4e4b\\u95f4\\u7684\\u6570\\u636e\\u90fd\\u4f1a\\u88ab\\u7f13\\u5b58\\u3002\\n\"}]}','white','2020-08-14 11:58:41'),(220,'list函数','- ```lst[a:b]```：左闭右开\n\n- ```lst.append(value)```：在末尾添加元素，复杂度O(1)\n\n- ```lst.pop()```：弹出列表末尾元素，复杂度O(1)\n\n- ```lst.pop(index)```：弹出任意位置元素，将后面的元素前移，复杂度O(n)\n\n- ```lst.insert(index, value)```：插入元素，后面的元素后移，复杂度O(n)\n\n- ```lst.remove(value)```：移除等于value的第一个元素，后面的元素前移，复杂度O(n)\n\n- ```lst.count(value)```：计数值为value的元素个数\n\n- ```lst.sort(reverse = False)```：排序，默认升序\n','<p>- ```lst[a:b]```：左闭右开</p><p><br></p><p>- ```lst.append(value)```：在末尾添加元素，复杂度O(1)</p><p><br></p><p>- ```lst.pop()```：弹出列表末尾元素，复杂度O(1)</p><p><br></p><p>- ```lst.pop(index)```：弹出任意位置元素，将后面的元素前移，复杂度O(n)</p><p><br></p><p>- ```lst.insert(index, value)```：插入元素，后面的元素后移，复杂度O(n)</p><p><br></p><p>- ```lst.remove(value)```：移除等于value的第一个元素，后面的元素前移，复杂度O(n)</p><p><br></p><p>- ```lst.count(value)```：计数值为value的元素个数</p><p><br></p><p>- ```lst.sort(reverse = False)```：排序，默认升序</p>','{\"ops\": [{\"insert\": \"- ```lst[a:b]```\\uff1a\\u5de6\\u95ed\\u53f3\\u5f00\\n\\n- ```lst.append(value)```\\uff1a\\u5728\\u672b\\u5c3e\\u6dfb\\u52a0\\u5143\\u7d20\\uff0c\\u590d\\u6742\\u5ea6O(1)\\n\\n- ```lst.pop()```\\uff1a\\u5f39\\u51fa\\u5217\\u8868\\u672b\\u5c3e\\u5143\\u7d20\\uff0c\\u590d\\u6742\\u5ea6O(1)\\n\\n- ```lst.pop(index)```\\uff1a\\u5f39\\u51fa\\u4efb\\u610f\\u4f4d\\u7f6e\\u5143\\u7d20\\uff0c\\u5c06\\u540e\\u9762\\u7684\\u5143\\u7d20\\u524d\\u79fb\\uff0c\\u590d\\u6742\\u5ea6O(n)\\n\\n- ```lst.insert(index, value)```\\uff1a\\u63d2\\u5165\\u5143\\u7d20\\uff0c\\u540e\\u9762\\u7684\\u5143\\u7d20\\u540e\\u79fb\\uff0c\\u590d\\u6742\\u5ea6O(n)\\n\\n- ```lst.remove(value)```\\uff1a\\u79fb\\u9664\\u7b49\\u4e8evalue\\u7684\\u7b2c\\u4e00\\u4e2a\\u5143\\u7d20\\uff0c\\u540e\\u9762\\u7684\\u5143\\u7d20\\u524d\\u79fb\\uff0c\\u590d\\u6742\\u5ea6O(n)\\n\\n- ```lst.count(value)```\\uff1a\\u8ba1\\u6570\\u503c\\u4e3avalue\\u7684\\u5143\\u7d20\\u4e2a\\u6570\\n\\n- ```lst.sort(reverse = False)```\\uff1a\\u6392\\u5e8f\\uff0c\\u9ed8\\u8ba4\\u5347\\u5e8f\\n\"}]}','white','2020-08-14 11:59:27'),(221,'进程和线程有什么区别？','- 进程（Process）是系统进行资源分配和调度的基本单位，线程（Thread）是CPU调度和分派的基本单位；\n\n- 线程依赖于进程而存在，一个进程至少有一个线程；\n\n- 进程有自己的独立地址空间，线程共享所属进程的地址空间；\n\n- 进程是拥有系统资源的一个独立单位，而线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，和其他线程共享本进程的相关资源如内存、I/O、cpu等；\n\n- 在进程切换时，涉及到整个当前进程CPU环境的保存环境的设置以及新被调度运行的CPU环境的设置，而线程切换只需保存和设置少量的寄存器的内容，并不涉及存储器管理方面的操作，可见，进程切换的开销远大于线程切换的开销；\n\n- 线程之间的通信更方便，同一进程下的线程共享全局变量等数据，而进程之间的通信需要以进程间通信(IPC)的方式进行；\n\n- 多线程程序只要有一个线程崩溃，整个程序就崩溃了，但多进程程序中一个进程崩溃并不会对其它进程造成影响，因为进程有自己的独立地址空间，因此多进程更加健壮\n','<p>- 进程（Process）是系统进行资源分配和调度的基本单位，线程（Thread）是CPU调度和分派的基本单位；</p><p><br></p><p>- 线程依赖于进程而存在，一个进程至少有一个线程；</p><p><br></p><p>- 进程有自己的独立地址空间，线程共享所属进程的地址空间；</p><p><br></p><p>- 进程是拥有系统资源的一个独立单位，而线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，和其他线程共享本进程的相关资源如内存、I/O、cpu等；</p><p><br></p><p>- 在进程切换时，涉及到整个当前进程CPU环境的保存环境的设置以及新被调度运行的CPU环境的设置，而线程切换只需保存和设置少量的寄存器的内容，并不涉及存储器管理方面的操作，可见，进程切换的开销远大于线程切换的开销；</p><p><br></p><p>- 线程之间的通信更方便，同一进程下的线程共享全局变量等数据，而进程之间的通信需要以进程间通信(IPC)的方式进行；</p><p><br></p><p>- 多线程程序只要有一个线程崩溃，整个程序就崩溃了，但多进程程序中一个进程崩溃并不会对其它进程造成影响，因为进程有自己的独立地址空间，因此多进程更加健壮</p>','{\"ops\": [{\"insert\": \"- \\u8fdb\\u7a0b\\uff08Process\\uff09\\u662f\\u7cfb\\u7edf\\u8fdb\\u884c\\u8d44\\u6e90\\u5206\\u914d\\u548c\\u8c03\\u5ea6\\u7684\\u57fa\\u672c\\u5355\\u4f4d\\uff0c\\u7ebf\\u7a0b\\uff08Thread\\uff09\\u662fCPU\\u8c03\\u5ea6\\u548c\\u5206\\u6d3e\\u7684\\u57fa\\u672c\\u5355\\u4f4d\\uff1b\\n\\n- \\u7ebf\\u7a0b\\u4f9d\\u8d56\\u4e8e\\u8fdb\\u7a0b\\u800c\\u5b58\\u5728\\uff0c\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u81f3\\u5c11\\u6709\\u4e00\\u4e2a\\u7ebf\\u7a0b\\uff1b\\n\\n- \\u8fdb\\u7a0b\\u6709\\u81ea\\u5df1\\u7684\\u72ec\\u7acb\\u5730\\u5740\\u7a7a\\u95f4\\uff0c\\u7ebf\\u7a0b\\u5171\\u4eab\\u6240\\u5c5e\\u8fdb\\u7a0b\\u7684\\u5730\\u5740\\u7a7a\\u95f4\\uff1b\\n\\n- \\u8fdb\\u7a0b\\u662f\\u62e5\\u6709\\u7cfb\\u7edf\\u8d44\\u6e90\\u7684\\u4e00\\u4e2a\\u72ec\\u7acb\\u5355\\u4f4d\\uff0c\\u800c\\u7ebf\\u7a0b\\u81ea\\u5df1\\u57fa\\u672c\\u4e0a\\u4e0d\\u62e5\\u6709\\u7cfb\\u7edf\\u8d44\\u6e90\\uff0c\\u53ea\\u62e5\\u6709\\u4e00\\u70b9\\u5728\\u8fd0\\u884c\\u4e2d\\u5fc5\\u4e0d\\u53ef\\u5c11\\u7684\\u8d44\\u6e90(\\u5982\\u7a0b\\u5e8f\\u8ba1\\u6570\\u5668,\\u4e00\\u7ec4\\u5bc4\\u5b58\\u5668\\u548c\\u6808)\\uff0c\\u548c\\u5176\\u4ed6\\u7ebf\\u7a0b\\u5171\\u4eab\\u672c\\u8fdb\\u7a0b\\u7684\\u76f8\\u5173\\u8d44\\u6e90\\u5982\\u5185\\u5b58\\u3001I/O\\u3001cpu\\u7b49\\uff1b\\n\\n- \\u5728\\u8fdb\\u7a0b\\u5207\\u6362\\u65f6\\uff0c\\u6d89\\u53ca\\u5230\\u6574\\u4e2a\\u5f53\\u524d\\u8fdb\\u7a0bCPU\\u73af\\u5883\\u7684\\u4fdd\\u5b58\\u73af\\u5883\\u7684\\u8bbe\\u7f6e\\u4ee5\\u53ca\\u65b0\\u88ab\\u8c03\\u5ea6\\u8fd0\\u884c\\u7684CPU\\u73af\\u5883\\u7684\\u8bbe\\u7f6e\\uff0c\\u800c\\u7ebf\\u7a0b\\u5207\\u6362\\u53ea\\u9700\\u4fdd\\u5b58\\u548c\\u8bbe\\u7f6e\\u5c11\\u91cf\\u7684\\u5bc4\\u5b58\\u5668\\u7684\\u5185\\u5bb9\\uff0c\\u5e76\\u4e0d\\u6d89\\u53ca\\u5b58\\u50a8\\u5668\\u7ba1\\u7406\\u65b9\\u9762\\u7684\\u64cd\\u4f5c\\uff0c\\u53ef\\u89c1\\uff0c\\u8fdb\\u7a0b\\u5207\\u6362\\u7684\\u5f00\\u9500\\u8fdc\\u5927\\u4e8e\\u7ebf\\u7a0b\\u5207\\u6362\\u7684\\u5f00\\u9500\\uff1b\\n\\n- \\u7ebf\\u7a0b\\u4e4b\\u95f4\\u7684\\u901a\\u4fe1\\u66f4\\u65b9\\u4fbf\\uff0c\\u540c\\u4e00\\u8fdb\\u7a0b\\u4e0b\\u7684\\u7ebf\\u7a0b\\u5171\\u4eab\\u5168\\u5c40\\u53d8\\u91cf\\u7b49\\u6570\\u636e\\uff0c\\u800c\\u8fdb\\u7a0b\\u4e4b\\u95f4\\u7684\\u901a\\u4fe1\\u9700\\u8981\\u4ee5\\u8fdb\\u7a0b\\u95f4\\u901a\\u4fe1(IPC)\\u7684\\u65b9\\u5f0f\\u8fdb\\u884c\\uff1b\\n\\n- \\u591a\\u7ebf\\u7a0b\\u7a0b\\u5e8f\\u53ea\\u8981\\u6709\\u4e00\\u4e2a\\u7ebf\\u7a0b\\u5d29\\u6e83\\uff0c\\u6574\\u4e2a\\u7a0b\\u5e8f\\u5c31\\u5d29\\u6e83\\u4e86\\uff0c\\u4f46\\u591a\\u8fdb\\u7a0b\\u7a0b\\u5e8f\\u4e2d\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u5d29\\u6e83\\u5e76\\u4e0d\\u4f1a\\u5bf9\\u5176\\u5b83\\u8fdb\\u7a0b\\u9020\\u6210\\u5f71\\u54cd\\uff0c\\u56e0\\u4e3a\\u8fdb\\u7a0b\\u6709\\u81ea\\u5df1\\u7684\\u72ec\\u7acb\\u5730\\u5740\\u7a7a\\u95f4\\uff0c\\u56e0\\u6b64\\u591a\\u8fdb\\u7a0b\\u66f4\\u52a0\\u5065\\u58ee\\n\"}]}','white','2020-08-14 12:00:48'),(222,'同一进程中的线程可以共享哪些数据？','- 进程代码段\n- 进程的公有数据（全局变量、静态变量...）\n- 进程打开的文件描述符\n- 进程的当前目录\n- 信号处理器/信号处理函数：对收到的信号的处理方式\n- 进程ID与进程组ID\n','<p>- 进程代码段</p><p>- 进程的公有数据（全局变量、静态变量...）</p><p>- 进程打开的文件描述符</p><p>- 进程的当前目录</p><p>- 信号处理器/信号处理函数：对收到的信号的处理方式</p><p>- 进程ID与进程组ID</p>','{\"ops\": [{\"insert\": \"- \\u8fdb\\u7a0b\\u4ee3\\u7801\\u6bb5\\n- \\u8fdb\\u7a0b\\u7684\\u516c\\u6709\\u6570\\u636e\\uff08\\u5168\\u5c40\\u53d8\\u91cf\\u3001\\u9759\\u6001\\u53d8\\u91cf...\\uff09\\n- \\u8fdb\\u7a0b\\u6253\\u5f00\\u7684\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\n- \\u8fdb\\u7a0b\\u7684\\u5f53\\u524d\\u76ee\\u5f55\\n- \\u4fe1\\u53f7\\u5904\\u7406\\u5668/\\u4fe1\\u53f7\\u5904\\u7406\\u51fd\\u6570\\uff1a\\u5bf9\\u6536\\u5230\\u7684\\u4fe1\\u53f7\\u7684\\u5904\\u7406\\u65b9\\u5f0f\\n- \\u8fdb\\u7a0bID\\u4e0e\\u8fdb\\u7a0b\\u7ec4ID\\n\"}]}','white','2020-08-14 12:01:00'),(223,'线程独占哪些资源？','- 线程ID\n- 一组寄存器的值\n- 线程自身的栈（堆是共享的）\n- 错误返回码：线程可能会产生不同的错误返回码，一个线程的错误返回码不应该被其它线程修改；\n- 信号掩码/信号屏蔽字(Signal mask)：表示是否屏蔽/阻塞相应的信号（SIGKILL,SIGSTOP除外）\n','<p>- 线程ID</p><p>- 一组寄存器的值</p><p>- 线程自身的栈（堆是共享的）</p><p>- 错误返回码：线程可能会产生不同的错误返回码，一个线程的错误返回码不应该被其它线程修改；</p><p>- 信号掩码/信号屏蔽字(Signal mask)：表示是否屏蔽/阻塞相应的信号（SIGKILL,SIGSTOP除外）</p>','{\"ops\": [{\"insert\": \"- \\u7ebf\\u7a0bID\\n- \\u4e00\\u7ec4\\u5bc4\\u5b58\\u5668\\u7684\\u503c\\n- \\u7ebf\\u7a0b\\u81ea\\u8eab\\u7684\\u6808\\uff08\\u5806\\u662f\\u5171\\u4eab\\u7684\\uff09\\n- \\u9519\\u8bef\\u8fd4\\u56de\\u7801\\uff1a\\u7ebf\\u7a0b\\u53ef\\u80fd\\u4f1a\\u4ea7\\u751f\\u4e0d\\u540c\\u7684\\u9519\\u8bef\\u8fd4\\u56de\\u7801\\uff0c\\u4e00\\u4e2a\\u7ebf\\u7a0b\\u7684\\u9519\\u8bef\\u8fd4\\u56de\\u7801\\u4e0d\\u5e94\\u8be5\\u88ab\\u5176\\u5b83\\u7ebf\\u7a0b\\u4fee\\u6539\\uff1b\\n- \\u4fe1\\u53f7\\u63a9\\u7801/\\u4fe1\\u53f7\\u5c4f\\u853d\\u5b57(Signal mask)\\uff1a\\u8868\\u793a\\u662f\\u5426\\u5c4f\\u853d/\\u963b\\u585e\\u76f8\\u5e94\\u7684\\u4fe1\\u53f7\\uff08SIGKILL,SIGSTOP\\u9664\\u5916\\uff09\\n\"}]}','white','2020-08-14 12:01:09'),(224,'进程间通信有哪些方式？','1. 管道(Pipe)\n\n- 管道是半双工的，数据只能向一个方向流动；需要双方通信时，需要建立起两个管道；\n- 一个进程向管道中写的内容被管道另一端的进程读出。写入的内容每次都添加在管道缓冲区的末尾，并且每次都是从缓冲区的头部读出数据；\n- 只能用于父子进程或者兄弟进程之间(具有亲缘关系的进程)\n</details>\n\n2. 命名管道\n3. 消息队列\n4. 信号(Signal)\n5. 共享内存\n6. 信号量(Semaphore)：初始化操作、P操作、V操作；P操作：信号量-1，检测是否小于0，小于则进程进入阻塞状态；V操作：信号量+1，若小于等于0，则从队列中唤醒一个等待的进程进入就绪态\n7. 套接字(Socket)\n','<p>1. 管道(Pipe)</p><p><br></p><p>- 管道是半双工的，数据只能向一个方向流动；需要双方通信时，需要建立起两个管道；</p><p>- 一个进程向管道中写的内容被管道另一端的进程读出。写入的内容每次都添加在管道缓冲区的末尾，并且每次都是从缓冲区的头部读出数据；</p><p>- 只能用于父子进程或者兄弟进程之间(具有亲缘关系的进程)</p><p>&lt;/details&gt;</p><p><br></p><p>2. 命名管道</p><p>3. 消息队列</p><p>4. 信号(Signal)</p><p>5. 共享内存</p><p>6. 信号量(Semaphore)：初始化操作、P操作、V操作；P操作：信号量-1，检测是否小于0，小于则进程进入阻塞状态；V操作：信号量+1，若小于等于0，则从队列中唤醒一个等待的进程进入就绪态</p><p>7. 套接字(Socket)</p>','{\"ops\": [{\"insert\": \"1. \\u7ba1\\u9053(Pipe)\\n\\n- \\u7ba1\\u9053\\u662f\\u534a\\u53cc\\u5de5\\u7684\\uff0c\\u6570\\u636e\\u53ea\\u80fd\\u5411\\u4e00\\u4e2a\\u65b9\\u5411\\u6d41\\u52a8\\uff1b\\u9700\\u8981\\u53cc\\u65b9\\u901a\\u4fe1\\u65f6\\uff0c\\u9700\\u8981\\u5efa\\u7acb\\u8d77\\u4e24\\u4e2a\\u7ba1\\u9053\\uff1b\\n- \\u4e00\\u4e2a\\u8fdb\\u7a0b\\u5411\\u7ba1\\u9053\\u4e2d\\u5199\\u7684\\u5185\\u5bb9\\u88ab\\u7ba1\\u9053\\u53e6\\u4e00\\u7aef\\u7684\\u8fdb\\u7a0b\\u8bfb\\u51fa\\u3002\\u5199\\u5165\\u7684\\u5185\\u5bb9\\u6bcf\\u6b21\\u90fd\\u6dfb\\u52a0\\u5728\\u7ba1\\u9053\\u7f13\\u51b2\\u533a\\u7684\\u672b\\u5c3e\\uff0c\\u5e76\\u4e14\\u6bcf\\u6b21\\u90fd\\u662f\\u4ece\\u7f13\\u51b2\\u533a\\u7684\\u5934\\u90e8\\u8bfb\\u51fa\\u6570\\u636e\\uff1b\\n- \\u53ea\\u80fd\\u7528\\u4e8e\\u7236\\u5b50\\u8fdb\\u7a0b\\u6216\\u8005\\u5144\\u5f1f\\u8fdb\\u7a0b\\u4e4b\\u95f4(\\u5177\\u6709\\u4eb2\\u7f18\\u5173\\u7cfb\\u7684\\u8fdb\\u7a0b)\\n</details>\\n\\n2. \\u547d\\u540d\\u7ba1\\u9053\\n3. \\u6d88\\u606f\\u961f\\u5217\\n4. \\u4fe1\\u53f7(Signal)\\n5. \\u5171\\u4eab\\u5185\\u5b58\\n6. \\u4fe1\\u53f7\\u91cf(Semaphore)\\uff1a\\u521d\\u59cb\\u5316\\u64cd\\u4f5c\\u3001P\\u64cd\\u4f5c\\u3001V\\u64cd\\u4f5c\\uff1bP\\u64cd\\u4f5c\\uff1a\\u4fe1\\u53f7\\u91cf-1\\uff0c\\u68c0\\u6d4b\\u662f\\u5426\\u5c0f\\u4e8e0\\uff0c\\u5c0f\\u4e8e\\u5219\\u8fdb\\u7a0b\\u8fdb\\u5165\\u963b\\u585e\\u72b6\\u6001\\uff1bV\\u64cd\\u4f5c\\uff1a\\u4fe1\\u53f7\\u91cf+1\\uff0c\\u82e5\\u5c0f\\u4e8e\\u7b49\\u4e8e0\\uff0c\\u5219\\u4ece\\u961f\\u5217\\u4e2d\\u5524\\u9192\\u4e00\\u4e2a\\u7b49\\u5f85\\u7684\\u8fdb\\u7a0b\\u8fdb\\u5165\\u5c31\\u7eea\\u6001\\n7. \\u5957\\u63a5\\u5b57(Socket)\\n\"}]}','white','2020-08-14 12:01:49'),(225,'进程同步问题','> 进程的同步是目的，而进程间通信是实现进程同步的手段\n\n管程 Monitor\n\n\n管程将共享变量以及对这些共享变量的操作封装起来，形成一个具有一定接口的功能模块，这样只能通过管程提供的某个过程才能访问管程中的资源。进程只能互斥地使用管程，使用完之后必须释放管程并唤醒入口等待队列中的进程。\n\n当一个进程试图进入管程时，在**入口等待队列**等待。若P进程唤醒了Q进程，则Q进程先执行，P在**紧急等待队列**中等待。（**HOARE管程**）\n\nwait操作：执行wait操作的进程进入条件变量链末尾，唤醒紧急等待队列或者入口队列中的进程；signal操作：唤醒条件变量链中的进程，自己进入紧急等待队列，若条件变量链为空，则继续执行。（**HOARE管程**）\n\n**MESA管程**：将HOARE中的signal换成了notify（或者broadcast通知所有满足条件的），进行通知而不是立马交换管程的使用权，在合适的时候，条件队列首位的进程可以进入，进入之前必须用while检查条件是否合适。优点：没有额外的进程切换\n','<p>&gt; 进程的同步是目的，而进程间通信是实现进程同步的手段</p><p><br></p><p>管程 Monitor</p><p><br></p><p><br></p><p>管程将共享变量以及对这些共享变量的操作封装起来，形成一个具有一定接口的功能模块，这样只能通过管程提供的某个过程才能访问管程中的资源。进程只能互斥地使用管程，使用完之后必须释放管程并唤醒入口等待队列中的进程。</p><p><br></p><p>当一个进程试图进入管程时，在**入口等待队列**等待。若P进程唤醒了Q进程，则Q进程先执行，P在**紧急等待队列**中等待。（**HOARE管程**）</p><p><br></p><p>wait操作：执行wait操作的进程进入条件变量链末尾，唤醒紧急等待队列或者入口队列中的进程；signal操作：唤醒条件变量链中的进程，自己进入紧急等待队列，若条件变量链为空，则继续执行。（**HOARE管程**）</p><p><br></p><p>**MESA管程**：将HOARE中的signal换成了notify（或者broadcast通知所有满足条件的），进行通知而不是立马交换管程的使用权，在合适的时候，条件队列首位的进程可以进入，进入之前必须用while检查条件是否合适。优点：没有额外的进程切换</p>','{\"ops\": [{\"insert\": \"> \\u8fdb\\u7a0b\\u7684\\u540c\\u6b65\\u662f\\u76ee\\u7684\\uff0c\\u800c\\u8fdb\\u7a0b\\u95f4\\u901a\\u4fe1\\u662f\\u5b9e\\u73b0\\u8fdb\\u7a0b\\u540c\\u6b65\\u7684\\u624b\\u6bb5\\n\\n\\u7ba1\\u7a0b Monitor\\n\\n\\n\\u7ba1\\u7a0b\\u5c06\\u5171\\u4eab\\u53d8\\u91cf\\u4ee5\\u53ca\\u5bf9\\u8fd9\\u4e9b\\u5171\\u4eab\\u53d8\\u91cf\\u7684\\u64cd\\u4f5c\\u5c01\\u88c5\\u8d77\\u6765\\uff0c\\u5f62\\u6210\\u4e00\\u4e2a\\u5177\\u6709\\u4e00\\u5b9a\\u63a5\\u53e3\\u7684\\u529f\\u80fd\\u6a21\\u5757\\uff0c\\u8fd9\\u6837\\u53ea\\u80fd\\u901a\\u8fc7\\u7ba1\\u7a0b\\u63d0\\u4f9b\\u7684\\u67d0\\u4e2a\\u8fc7\\u7a0b\\u624d\\u80fd\\u8bbf\\u95ee\\u7ba1\\u7a0b\\u4e2d\\u7684\\u8d44\\u6e90\\u3002\\u8fdb\\u7a0b\\u53ea\\u80fd\\u4e92\\u65a5\\u5730\\u4f7f\\u7528\\u7ba1\\u7a0b\\uff0c\\u4f7f\\u7528\\u5b8c\\u4e4b\\u540e\\u5fc5\\u987b\\u91ca\\u653e\\u7ba1\\u7a0b\\u5e76\\u5524\\u9192\\u5165\\u53e3\\u7b49\\u5f85\\u961f\\u5217\\u4e2d\\u7684\\u8fdb\\u7a0b\\u3002\\n\\n\\u5f53\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u8bd5\\u56fe\\u8fdb\\u5165\\u7ba1\\u7a0b\\u65f6\\uff0c\\u5728**\\u5165\\u53e3\\u7b49\\u5f85\\u961f\\u5217**\\u7b49\\u5f85\\u3002\\u82e5P\\u8fdb\\u7a0b\\u5524\\u9192\\u4e86Q\\u8fdb\\u7a0b\\uff0c\\u5219Q\\u8fdb\\u7a0b\\u5148\\u6267\\u884c\\uff0cP\\u5728**\\u7d27\\u6025\\u7b49\\u5f85\\u961f\\u5217**\\u4e2d\\u7b49\\u5f85\\u3002\\uff08**HOARE\\u7ba1\\u7a0b**\\uff09\\n\\nwait\\u64cd\\u4f5c\\uff1a\\u6267\\u884cwait\\u64cd\\u4f5c\\u7684\\u8fdb\\u7a0b\\u8fdb\\u5165\\u6761\\u4ef6\\u53d8\\u91cf\\u94fe\\u672b\\u5c3e\\uff0c\\u5524\\u9192\\u7d27\\u6025\\u7b49\\u5f85\\u961f\\u5217\\u6216\\u8005\\u5165\\u53e3\\u961f\\u5217\\u4e2d\\u7684\\u8fdb\\u7a0b\\uff1bsignal\\u64cd\\u4f5c\\uff1a\\u5524\\u9192\\u6761\\u4ef6\\u53d8\\u91cf\\u94fe\\u4e2d\\u7684\\u8fdb\\u7a0b\\uff0c\\u81ea\\u5df1\\u8fdb\\u5165\\u7d27\\u6025\\u7b49\\u5f85\\u961f\\u5217\\uff0c\\u82e5\\u6761\\u4ef6\\u53d8\\u91cf\\u94fe\\u4e3a\\u7a7a\\uff0c\\u5219\\u7ee7\\u7eed\\u6267\\u884c\\u3002\\uff08**HOARE\\u7ba1\\u7a0b**\\uff09\\n\\n**MESA\\u7ba1\\u7a0b**\\uff1a\\u5c06HOARE\\u4e2d\\u7684signal\\u6362\\u6210\\u4e86notify\\uff08\\u6216\\u8005broadcast\\u901a\\u77e5\\u6240\\u6709\\u6ee1\\u8db3\\u6761\\u4ef6\\u7684\\uff09\\uff0c\\u8fdb\\u884c\\u901a\\u77e5\\u800c\\u4e0d\\u662f\\u7acb\\u9a6c\\u4ea4\\u6362\\u7ba1\\u7a0b\\u7684\\u4f7f\\u7528\\u6743\\uff0c\\u5728\\u5408\\u9002\\u7684\\u65f6\\u5019\\uff0c\\u6761\\u4ef6\\u961f\\u5217\\u9996\\u4f4d\\u7684\\u8fdb\\u7a0b\\u53ef\\u4ee5\\u8fdb\\u5165\\uff0c\\u8fdb\\u5165\\u4e4b\\u524d\\u5fc5\\u987b\\u7528while\\u68c0\\u67e5\\u6761\\u4ef6\\u662f\\u5426\\u5408\\u9002\\u3002\\u4f18\\u70b9\\uff1a\\u6ca1\\u6709\\u989d\\u5916\\u7684\\u8fdb\\u7a0b\\u5207\\u6362\\n\"}]}','white','2020-08-14 12:02:42'),(226,'生产者-消费者问题','> 问题描述：使用一个缓冲区来存放数据，只有缓冲区没有满，生产者才可以写入数据；只有缓冲区不为空，消费者才可以读出数据\n\n代码实现：\n\n```c\n// 伪代码描述 \n// 定义信号量 full记录缓冲区物品数量 empty代表缓冲区空位数量 mutex为互斥量\nsemaphore full = 0, empty = n, mutex = 1;\n\n// 生产者进程\nvoid producer(){\n	do{\n   	  P(empty);\n	  P(mutex);\n\n     // 生产者进行生产\n   	\n   	  V(mutex);\n   	  V(full);\n 	} while(1);\n}\n\nvoid consumer(){\n	do{\n	  P(full);\n	  P(mutex);\n\n    	// 消费者进行消费\n\n	  V(mutex);\n	  V(empty);\n 	} while(1);\n}\n\n```\n','<p>&gt; 问题描述：使用一个缓冲区来存放数据，只有缓冲区没有满，生产者才可以写入数据；只有缓冲区不为空，消费者才可以读出数据</p><p><br></p><p>代码实现：</p><p><br></p><p>```c</p><p>// 伪代码描述 </p><p>// 定义信号量 full记录缓冲区物品数量 empty代表缓冲区空位数量 mutex为互斥量</p><p>semaphore full = 0, empty = n, mutex = 1;</p><p><br></p><p>// 生产者进程</p><p>void producer(){</p><p>	do{</p><p>   	  P(empty);</p><p>	  P(mutex);</p><p><br></p><p>     // 生产者进行生产</p><p>   	</p><p>   	  V(mutex);</p><p>   	  V(full);</p><p> 	} while(1);</p><p>}</p><p><br></p><p>void consumer(){</p><p>	do{</p><p>	  P(full);</p><p>	  P(mutex);</p><p><br></p><p>    	// 消费者进行消费</p><p><br></p><p>	  V(mutex);</p><p>	  V(empty);</p><p> 	} while(1);</p><p>}</p><p><br></p><p>```</p>','{\"ops\": [{\"insert\": \"> \\u95ee\\u9898\\u63cf\\u8ff0\\uff1a\\u4f7f\\u7528\\u4e00\\u4e2a\\u7f13\\u51b2\\u533a\\u6765\\u5b58\\u653e\\u6570\\u636e\\uff0c\\u53ea\\u6709\\u7f13\\u51b2\\u533a\\u6ca1\\u6709\\u6ee1\\uff0c\\u751f\\u4ea7\\u8005\\u624d\\u53ef\\u4ee5\\u5199\\u5165\\u6570\\u636e\\uff1b\\u53ea\\u6709\\u7f13\\u51b2\\u533a\\u4e0d\\u4e3a\\u7a7a\\uff0c\\u6d88\\u8d39\\u8005\\u624d\\u53ef\\u4ee5\\u8bfb\\u51fa\\u6570\\u636e\\n\\n\\u4ee3\\u7801\\u5b9e\\u73b0\\uff1a\\n\\n```c\\n// \\u4f2a\\u4ee3\\u7801\\u63cf\\u8ff0 \\n// \\u5b9a\\u4e49\\u4fe1\\u53f7\\u91cf full\\u8bb0\\u5f55\\u7f13\\u51b2\\u533a\\u7269\\u54c1\\u6570\\u91cf empty\\u4ee3\\u8868\\u7f13\\u51b2\\u533a\\u7a7a\\u4f4d\\u6570\\u91cf mutex\\u4e3a\\u4e92\\u65a5\\u91cf\\nsemaphore full = 0, empty = n, mutex = 1;\\n\\n// \\u751f\\u4ea7\\u8005\\u8fdb\\u7a0b\\nvoid producer(){\\n\\tdo{\\n   \\t  P(empty);\\n\\t  P(mutex);\\n\\n     // \\u751f\\u4ea7\\u8005\\u8fdb\\u884c\\u751f\\u4ea7\\n   \\t\\n   \\t  V(mutex);\\n   \\t  V(full);\\n \\t} while(1);\\n}\\n\\nvoid consumer(){\\n\\tdo{\\n\\t  P(full);\\n\\t  P(mutex);\\n\\n    \\t// \\u6d88\\u8d39\\u8005\\u8fdb\\u884c\\u6d88\\u8d39\\n\\n\\t  V(mutex);\\n\\t  V(empty);\\n \\t} while(1);\\n}\\n\\n```\\n\"}]}','white','2020-08-14 12:03:35'),(227,'哲学家就餐问题​','> 问题描述：有五位哲学家围绕着餐桌坐，每一位哲学家要么思考，要么吃饭。为了吃饭，哲学家必须拿起两双筷子（分别放于左右两端）不幸的是，筷子的数量和哲学家相等，所以每只筷子必须由两位哲学家共享。\n\n代码实现：\n\n```c\n#define N 5  // number of philosopher\n#define LEFT (i + N - 1)%N // number of i\'s left neighbors\n#define RIGHT (i + 1)%N // number of i\'s right neighbors\n#define THINKING 0\n#define HUNGRY 1\n#define EATING 2\ntypedef int semaphore;\nint state[N]; // array to keep track of everyone\'s state\nsemaphore mutex = 1; // mutual exclusion of critical region\nsemaphore s[N]; \n\nvoid philosopher(int i) {\n	while (TRUE) {\n		think();\n		take_forks(i);\n		eat();\n		put_forks(i);\n	}\n}\n\nvoid take_forks(int i) {\n	down(&mutex); // enter critical region\n	state[i] = HUNGRY; // record that i is hungry\n	test_forks(i); // try to acquire two forks\n	up(&mutex); // exit critical region\n	down(&s[i]); // block if forks are not acquired\n}\n\nvoid put_forks(int i) {\n	down(&mutex); // enter critical region\n	state[i] = THINKING; // record that has finished eating\n	test_forks(LEFT); // see if left neighbor can now eat\n	test_forks(RIGHT); // see if right neighbor can now eat\n	up(&mutex); // exit critical region\n}\n\nvoid test_forks(int i) {\n	if (state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING) {\n		state[i] = EATING;\n		up(&s[i]);\n	}\n}\n```\n','<p>&gt; 问题描述：有五位哲学家围绕着餐桌坐，每一位哲学家要么思考，要么吃饭。为了吃饭，哲学家必须拿起两双筷子（分别放于左右两端）不幸的是，筷子的数量和哲学家相等，所以每只筷子必须由两位哲学家共享。</p><p><br></p><p>代码实现：</p><p><br></p><p>```c</p><p>#define N 5  // number of philosopher</p><p>#define LEFT (i + N - 1)%N // number of i\'s left neighbors</p><p>#define RIGHT (i + 1)%N // number of i\'s right neighbors</p><p>#define THINKING 0</p><p>#define HUNGRY 1</p><p>#define EATING 2</p><p>typedef int semaphore;</p><p>int state[N]; // array to keep track of everyone\'s state</p><p>semaphore mutex = 1; // mutual exclusion of critical region</p><p>semaphore s[N]; </p><p><br></p><p>void philosopher(int i) {</p><p>	while (TRUE) {</p><p>		think();</p><p>		take_forks(i);</p><p>		eat();</p><p>		put_forks(i);</p><p>	}</p><p>}</p><p><br></p><p>void take_forks(int i) {</p><p>	down(&amp;mutex); // enter critical region</p><p>	state[i] = HUNGRY; // record that i is hungry</p><p>	test_forks(i); // try to acquire two forks</p><p>	up(&amp;mutex); // exit critical region</p><p>	down(&amp;s[i]); // block if forks are not acquired</p><p>}</p><p><br></p><p>void put_forks(int i) {</p><p>	down(&amp;mutex); // enter critical region</p><p>	state[i] = THINKING; // record that has finished eating</p><p>	test_forks(LEFT); // see if left neighbor can now eat</p><p>	test_forks(RIGHT); // see if right neighbor can now eat</p><p>	up(&amp;mutex); // exit critical region</p><p>}</p><p><br></p><p>void test_forks(int i) {</p><p>	if (state[i] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp; state[RIGHT] != EATING) {</p><p>		state[i] = EATING;</p><p>		up(&amp;s[i]);</p><p>	}</p><p>}</p><p>```</p>','{\"ops\": [{\"insert\": \"> \\u95ee\\u9898\\u63cf\\u8ff0\\uff1a\\u6709\\u4e94\\u4f4d\\u54f2\\u5b66\\u5bb6\\u56f4\\u7ed5\\u7740\\u9910\\u684c\\u5750\\uff0c\\u6bcf\\u4e00\\u4f4d\\u54f2\\u5b66\\u5bb6\\u8981\\u4e48\\u601d\\u8003\\uff0c\\u8981\\u4e48\\u5403\\u996d\\u3002\\u4e3a\\u4e86\\u5403\\u996d\\uff0c\\u54f2\\u5b66\\u5bb6\\u5fc5\\u987b\\u62ff\\u8d77\\u4e24\\u53cc\\u7b77\\u5b50\\uff08\\u5206\\u522b\\u653e\\u4e8e\\u5de6\\u53f3\\u4e24\\u7aef\\uff09\\u4e0d\\u5e78\\u7684\\u662f\\uff0c\\u7b77\\u5b50\\u7684\\u6570\\u91cf\\u548c\\u54f2\\u5b66\\u5bb6\\u76f8\\u7b49\\uff0c\\u6240\\u4ee5\\u6bcf\\u53ea\\u7b77\\u5b50\\u5fc5\\u987b\\u7531\\u4e24\\u4f4d\\u54f2\\u5b66\\u5bb6\\u5171\\u4eab\\u3002\\n\\n\\u4ee3\\u7801\\u5b9e\\u73b0\\uff1a\\n\\n```c\\n#define N 5  // number of philosopher\\n#define LEFT (i + N - 1)%N // number of i\'s left neighbors\\n#define RIGHT (i + 1)%N // number of i\'s right neighbors\\n#define THINKING 0\\n#define HUNGRY 1\\n#define EATING 2\\ntypedef int semaphore;\\nint state[N]; // array to keep track of everyone\'s state\\nsemaphore mutex = 1; // mutual exclusion of critical region\\nsemaphore s[N]; \\n\\nvoid philosopher(int i) {\\n\\twhile (TRUE) {\\n\\t\\tthink();\\n\\t\\ttake_forks(i);\\n\\t\\teat();\\n\\t\\tput_forks(i);\\n\\t}\\n}\\n\\nvoid take_forks(int i) {\\n\\tdown(&mutex); // enter critical region\\n\\tstate[i] = HUNGRY; // record that i is hungry\\n\\ttest_forks(i); // try to acquire two forks\\n\\tup(&mutex); // exit critical region\\n\\tdown(&s[i]); // block if forks are not acquired\\n}\\n\\nvoid put_forks(int i) {\\n\\tdown(&mutex); // enter critical region\\n\\tstate[i] = THINKING; // record that has finished eating\\n\\ttest_forks(LEFT); // see if left neighbor can now eat\\n\\ttest_forks(RIGHT); // see if right neighbor can now eat\\n\\tup(&mutex); // exit critical region\\n}\\n\\nvoid test_forks(int i) {\\n\\tif (state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING) {\\n\\t\\tstate[i] = EATING;\\n\\t\\tup(&s[i]);\\n\\t}\\n}\\n```\\n\"}]}','white','2020-08-14 12:04:20'),(228,'临界区的概念？','各个进程中对临界资源（互斥资源/共享变量，一次只能给一个进程使用）进行操作的程序片段\n','<p>各个进程中对临界资源（互斥资源/共享变量，一次只能给一个进程使用）进行操作的程序片段</p>','{\"ops\": [{\"insert\": \"\\u5404\\u4e2a\\u8fdb\\u7a0b\\u4e2d\\u5bf9\\u4e34\\u754c\\u8d44\\u6e90\\uff08\\u4e92\\u65a5\\u8d44\\u6e90/\\u5171\\u4eab\\u53d8\\u91cf\\uff0c\\u4e00\\u6b21\\u53ea\\u80fd\\u7ed9\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u4f7f\\u7528\\uff09\\u8fdb\\u884c\\u64cd\\u4f5c\\u7684\\u7a0b\\u5e8f\\u7247\\u6bb5\\n\"}]}','white','2020-08-14 12:04:30'),(229,'同步与互斥的概念？','- 同步：多个进程因为合作而使得进程的执行有一定的先后顺序。比如某个进程需要另一个进程提供的消息，获得消息之前进入阻塞态；\n- 互斥：多个进程在同一时刻只有一个进程能进入临界区\n','<p>- 同步：多个进程因为合作而使得进程的执行有一定的先后顺序。比如某个进程需要另一个进程提供的消息，获得消息之前进入阻塞态；</p><p>- 互斥：多个进程在同一时刻只有一个进程能进入临界区</p>','{\"ops\": [{\"insert\": \"- \\u540c\\u6b65\\uff1a\\u591a\\u4e2a\\u8fdb\\u7a0b\\u56e0\\u4e3a\\u5408\\u4f5c\\u800c\\u4f7f\\u5f97\\u8fdb\\u7a0b\\u7684\\u6267\\u884c\\u6709\\u4e00\\u5b9a\\u7684\\u5148\\u540e\\u987a\\u5e8f\\u3002\\u6bd4\\u5982\\u67d0\\u4e2a\\u8fdb\\u7a0b\\u9700\\u8981\\u53e6\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u63d0\\u4f9b\\u7684\\u6d88\\u606f\\uff0c\\u83b7\\u5f97\\u6d88\\u606f\\u4e4b\\u524d\\u8fdb\\u5165\\u963b\\u585e\\u6001\\uff1b\\n- \\u4e92\\u65a5\\uff1a\\u591a\\u4e2a\\u8fdb\\u7a0b\\u5728\\u540c\\u4e00\\u65f6\\u523b\\u53ea\\u6709\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u80fd\\u8fdb\\u5165\\u4e34\\u754c\\u533a\\n\"}]}','white','2020-08-14 12:04:39'),(230,'并发、并行、异步的区别？','并发：在一个时间段中同时有多个程序在运行，但其实任一时刻，只有一个程序在CPU上运行，宏观上的并发是通过不断的切换实现的；\n\n多线程：并发运行的一段代码。是实现异步的手段\n\n并行（和串行相比）：在多CPU系统中，多个程序无论宏观还是微观上都是同时执行的\n\n异步（和同步相比）：同步是顺序执行，异步是在等待某个资源的时候继续做自己的事\n','<p>并发：在一个时间段中同时有多个程序在运行，但其实任一时刻，只有一个程序在CPU上运行，宏观上的并发是通过不断的切换实现的；</p><p><br></p><p>多线程：并发运行的一段代码。是实现异步的手段</p><p><br></p><p>并行（和串行相比）：在多CPU系统中，多个程序无论宏观还是微观上都是同时执行的</p><p><br></p><p>异步（和同步相比）：同步是顺序执行，异步是在等待某个资源的时候继续做自己的事</p>','{\"ops\": [{\"insert\": \"\\u5e76\\u53d1\\uff1a\\u5728\\u4e00\\u4e2a\\u65f6\\u95f4\\u6bb5\\u4e2d\\u540c\\u65f6\\u6709\\u591a\\u4e2a\\u7a0b\\u5e8f\\u5728\\u8fd0\\u884c\\uff0c\\u4f46\\u5176\\u5b9e\\u4efb\\u4e00\\u65f6\\u523b\\uff0c\\u53ea\\u6709\\u4e00\\u4e2a\\u7a0b\\u5e8f\\u5728CPU\\u4e0a\\u8fd0\\u884c\\uff0c\\u5b8f\\u89c2\\u4e0a\\u7684\\u5e76\\u53d1\\u662f\\u901a\\u8fc7\\u4e0d\\u65ad\\u7684\\u5207\\u6362\\u5b9e\\u73b0\\u7684\\uff1b\\n\\n\\u591a\\u7ebf\\u7a0b\\uff1a\\u5e76\\u53d1\\u8fd0\\u884c\\u7684\\u4e00\\u6bb5\\u4ee3\\u7801\\u3002\\u662f\\u5b9e\\u73b0\\u5f02\\u6b65\\u7684\\u624b\\u6bb5\\n\\n\\u5e76\\u884c\\uff08\\u548c\\u4e32\\u884c\\u76f8\\u6bd4\\uff09\\uff1a\\u5728\\u591aCPU\\u7cfb\\u7edf\\u4e2d\\uff0c\\u591a\\u4e2a\\u7a0b\\u5e8f\\u65e0\\u8bba\\u5b8f\\u89c2\\u8fd8\\u662f\\u5fae\\u89c2\\u4e0a\\u90fd\\u662f\\u540c\\u65f6\\u6267\\u884c\\u7684\\n\\n\\u5f02\\u6b65\\uff08\\u548c\\u540c\\u6b65\\u76f8\\u6bd4\\uff09\\uff1a\\u540c\\u6b65\\u662f\\u987a\\u5e8f\\u6267\\u884c\\uff0c\\u5f02\\u6b65\\u662f\\u5728\\u7b49\\u5f85\\u67d0\\u4e2a\\u8d44\\u6e90\\u7684\\u65f6\\u5019\\u7ee7\\u7eed\\u505a\\u81ea\\u5df1\\u7684\\u4e8b\\n\"}]}','white','2020-08-14 12:04:50'),(231,'进程有哪几种状态？','![Process State](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191202090217863_1873.png)\n\n- 就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源\n- 运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数\n- 阻塞状态： 进程等待某种条件，在条件满足之前无法执行\n','<p>![Process State](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191202090217863_1873.png)</p><p><br></p><p>- 就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源</p><p>- 运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数</p><p>- 阻塞状态： 进程等待某种条件，在条件满足之前无法执行</p>','{\"ops\": [{\"insert\": \"![Process State](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191202090217863_1873.png)\\n\\n- \\u5c31\\u7eea\\u72b6\\u6001\\uff1a\\u8fdb\\u7a0b\\u5df2\\u83b7\\u5f97\\u9664\\u5904\\u7406\\u673a\\u4ee5\\u5916\\u7684\\u6240\\u9700\\u8d44\\u6e90\\uff0c\\u7b49\\u5f85\\u5206\\u914d\\u5904\\u7406\\u673a\\u8d44\\u6e90\\n- \\u8fd0\\u884c\\u72b6\\u6001\\uff1a\\u5360\\u7528\\u5904\\u7406\\u673a\\u8d44\\u6e90\\u8fd0\\u884c\\uff0c\\u5904\\u4e8e\\u6b64\\u72b6\\u6001\\u7684\\u8fdb\\u7a0b\\u6570\\u5c0f\\u4e8e\\u7b49\\u4e8eCPU\\u6570\\n- \\u963b\\u585e\\u72b6\\u6001\\uff1a \\u8fdb\\u7a0b\\u7b49\\u5f85\\u67d0\\u79cd\\u6761\\u4ef6\\uff0c\\u5728\\u6761\\u4ef6\\u6ee1\\u8db3\\u4e4b\\u524d\\u65e0\\u6cd5\\u6267\\u884c\\n\"}]}','white','2020-08-14 12:06:39'),(232,'批处理系统','先来先服务 first-come first-serverd（FCFS）\n\n\n按照请求的顺序进行调度。非抢占式，开销小，无饥饿问题，响应时间不确定（可能很慢）；\n\n对短进程不利，对IO密集型进程不利。\n\n最短作业优先 shortest job first（SJF）\n\n\n按估计运行时间最短的顺序进行调度。非抢占式，吞吐量高，开销可能较大，可能导致饥饿问题；\n\n对短进程提供好的响应时间，对长进程不利。\n\n最短剩余时间优先 shortest remaining time next（SRTN）\n\n\n按剩余运行时间的顺序进行调度。(最短作业优先的抢占式版本)。吞吐量高，开销可能较大，提供好的响应时间；\n\n可能导致饥饿问题，对长进程不利。\n\n最高响应比优先 Highest Response Ratio Next（HRRN）\n\n响应比 = 1+ 等待时间/处理时间。同时考虑了等待时间的长短和估计需要的执行时间长短，很好的平衡了长短进程。非抢占，吞吐量高，开销可能较大，提供好的响应时间，无饥饿问题。\n','<p>先来先服务 first-come first-serverd（FCFS）</p><p><br></p><p><br></p><p>按照请求的顺序进行调度。非抢占式，开销小，无饥饿问题，响应时间不确定（可能很慢）；</p><p><br></p><p>对短进程不利，对IO密集型进程不利。</p><p><br></p><p>最短作业优先 shortest job first（SJF）</p><p><br></p><p><br></p><p>按估计运行时间最短的顺序进行调度。非抢占式，吞吐量高，开销可能较大，可能导致饥饿问题；</p><p><br></p><p>对短进程提供好的响应时间，对长进程不利。</p><p><br></p><p>最短剩余时间优先 shortest remaining time next（SRTN）</p><p><br></p><p><br></p><p>按剩余运行时间的顺序进行调度。(最短作业优先的抢占式版本)。吞吐量高，开销可能较大，提供好的响应时间；</p><p><br></p><p>可能导致饥饿问题，对长进程不利。</p><p><br></p><p>最高响应比优先 Highest Response Ratio Next（HRRN）</p><p><br></p><p>响应比 = 1+ 等待时间/处理时间。同时考虑了等待时间的长短和估计需要的执行时间长短，很好的平衡了长短进程。非抢占，吞吐量高，开销可能较大，提供好的响应时间，无饥饿问题。</p>','{\"ops\": [{\"insert\": \"\\u5148\\u6765\\u5148\\u670d\\u52a1 first-come first-serverd\\uff08FCFS\\uff09\\n\\n\\n\\u6309\\u7167\\u8bf7\\u6c42\\u7684\\u987a\\u5e8f\\u8fdb\\u884c\\u8c03\\u5ea6\\u3002\\u975e\\u62a2\\u5360\\u5f0f\\uff0c\\u5f00\\u9500\\u5c0f\\uff0c\\u65e0\\u9965\\u997f\\u95ee\\u9898\\uff0c\\u54cd\\u5e94\\u65f6\\u95f4\\u4e0d\\u786e\\u5b9a\\uff08\\u53ef\\u80fd\\u5f88\\u6162\\uff09\\uff1b\\n\\n\\u5bf9\\u77ed\\u8fdb\\u7a0b\\u4e0d\\u5229\\uff0c\\u5bf9IO\\u5bc6\\u96c6\\u578b\\u8fdb\\u7a0b\\u4e0d\\u5229\\u3002\\n\\n\\u6700\\u77ed\\u4f5c\\u4e1a\\u4f18\\u5148 shortest job first\\uff08SJF\\uff09\\n\\n\\n\\u6309\\u4f30\\u8ba1\\u8fd0\\u884c\\u65f6\\u95f4\\u6700\\u77ed\\u7684\\u987a\\u5e8f\\u8fdb\\u884c\\u8c03\\u5ea6\\u3002\\u975e\\u62a2\\u5360\\u5f0f\\uff0c\\u541e\\u5410\\u91cf\\u9ad8\\uff0c\\u5f00\\u9500\\u53ef\\u80fd\\u8f83\\u5927\\uff0c\\u53ef\\u80fd\\u5bfc\\u81f4\\u9965\\u997f\\u95ee\\u9898\\uff1b\\n\\n\\u5bf9\\u77ed\\u8fdb\\u7a0b\\u63d0\\u4f9b\\u597d\\u7684\\u54cd\\u5e94\\u65f6\\u95f4\\uff0c\\u5bf9\\u957f\\u8fdb\\u7a0b\\u4e0d\\u5229\\u3002\\n\\n\\u6700\\u77ed\\u5269\\u4f59\\u65f6\\u95f4\\u4f18\\u5148 shortest remaining time next\\uff08SRTN\\uff09\\n\\n\\n\\u6309\\u5269\\u4f59\\u8fd0\\u884c\\u65f6\\u95f4\\u7684\\u987a\\u5e8f\\u8fdb\\u884c\\u8c03\\u5ea6\\u3002(\\u6700\\u77ed\\u4f5c\\u4e1a\\u4f18\\u5148\\u7684\\u62a2\\u5360\\u5f0f\\u7248\\u672c)\\u3002\\u541e\\u5410\\u91cf\\u9ad8\\uff0c\\u5f00\\u9500\\u53ef\\u80fd\\u8f83\\u5927\\uff0c\\u63d0\\u4f9b\\u597d\\u7684\\u54cd\\u5e94\\u65f6\\u95f4\\uff1b\\n\\n\\u53ef\\u80fd\\u5bfc\\u81f4\\u9965\\u997f\\u95ee\\u9898\\uff0c\\u5bf9\\u957f\\u8fdb\\u7a0b\\u4e0d\\u5229\\u3002\\n\\n\\u6700\\u9ad8\\u54cd\\u5e94\\u6bd4\\u4f18\\u5148 Highest Response Ratio Next\\uff08HRRN\\uff09\\n\\n\\u54cd\\u5e94\\u6bd4 = 1+ \\u7b49\\u5f85\\u65f6\\u95f4/\\u5904\\u7406\\u65f6\\u95f4\\u3002\\u540c\\u65f6\\u8003\\u8651\\u4e86\\u7b49\\u5f85\\u65f6\\u95f4\\u7684\\u957f\\u77ed\\u548c\\u4f30\\u8ba1\\u9700\\u8981\\u7684\\u6267\\u884c\\u65f6\\u95f4\\u957f\\u77ed\\uff0c\\u5f88\\u597d\\u7684\\u5e73\\u8861\\u4e86\\u957f\\u77ed\\u8fdb\\u7a0b\\u3002\\u975e\\u62a2\\u5360\\uff0c\\u541e\\u5410\\u91cf\\u9ad8\\uff0c\\u5f00\\u9500\\u53ef\\u80fd\\u8f83\\u5927\\uff0c\\u63d0\\u4f9b\\u597d\\u7684\\u54cd\\u5e94\\u65f6\\u95f4\\uff0c\\u65e0\\u9965\\u997f\\u95ee\\u9898\\u3002\\n\"}]}','white','2020-08-14 12:08:24'),(233,'交互式系统','> 有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。\n\n**时间片轮转 Round Robin**\n\n将所有就绪进程按 FCFS 的原则排成一个队列，用完时间片的进程排到队列最后。抢占式（时间片用完时），开销小，无饥饿问题，为短进程提供好的响应时间；\n\n若时间片小，进程切换频繁，吞吐量低；若时间片太长，实时性得不到保证。\n\n**优先级调度算法**\n\n\n为每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。\n\n**多级反馈队列调度算法 Multilevel Feedback Queue**\n\n\n设置多个就绪队列1、2、3...，优先级递减，时间片递增。只有等到优先级更高的队列为空时才会调度当前队列中的进程。如果进程用完了当前队列的时间片还未执行完，则会被移到下一队列。\n\n抢占式（时间片用完时），开销可能较大，对IO型进程有利，可能会出现饥饿问题。\n','<p>&gt; 有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p><p><br></p><p>**时间片轮转 Round Robin**</p><p><br></p><p>将所有就绪进程按 FCFS 的原则排成一个队列，用完时间片的进程排到队列最后。抢占式（时间片用完时），开销小，无饥饿问题，为短进程提供好的响应时间；</p><p><br></p><p>若时间片小，进程切换频繁，吞吐量低；若时间片太长，实时性得不到保证。</p><p><br></p><p>**优先级调度算法**</p><p><br></p><p><br></p><p>为每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p><p><br></p><p>**多级反馈队列调度算法 Multilevel Feedback Queue**</p><p><br></p><p><br></p><p>设置多个就绪队列1、2、3...，优先级递减，时间片递增。只有等到优先级更高的队列为空时才会调度当前队列中的进程。如果进程用完了当前队列的时间片还未执行完，则会被移到下一队列。</p><p><br></p><p>抢占式（时间片用完时），开销可能较大，对IO型进程有利，可能会出现饥饿问题。</p>','{\"ops\": [{\"insert\": \"> \\u6709\\u5927\\u91cf\\u7684\\u7528\\u6237\\u4ea4\\u4e92\\u64cd\\u4f5c\\uff0c\\u5728\\u8be5\\u7cfb\\u7edf\\u4e2d\\u8c03\\u5ea6\\u7b97\\u6cd5\\u7684\\u76ee\\u6807\\u662f\\u5feb\\u901f\\u5730\\u8fdb\\u884c\\u54cd\\u5e94\\u3002\\n\\n**\\u65f6\\u95f4\\u7247\\u8f6e\\u8f6c Round Robin**\\n\\n\\u5c06\\u6240\\u6709\\u5c31\\u7eea\\u8fdb\\u7a0b\\u6309 FCFS \\u7684\\u539f\\u5219\\u6392\\u6210\\u4e00\\u4e2a\\u961f\\u5217\\uff0c\\u7528\\u5b8c\\u65f6\\u95f4\\u7247\\u7684\\u8fdb\\u7a0b\\u6392\\u5230\\u961f\\u5217\\u6700\\u540e\\u3002\\u62a2\\u5360\\u5f0f\\uff08\\u65f6\\u95f4\\u7247\\u7528\\u5b8c\\u65f6\\uff09\\uff0c\\u5f00\\u9500\\u5c0f\\uff0c\\u65e0\\u9965\\u997f\\u95ee\\u9898\\uff0c\\u4e3a\\u77ed\\u8fdb\\u7a0b\\u63d0\\u4f9b\\u597d\\u7684\\u54cd\\u5e94\\u65f6\\u95f4\\uff1b\\n\\n\\u82e5\\u65f6\\u95f4\\u7247\\u5c0f\\uff0c\\u8fdb\\u7a0b\\u5207\\u6362\\u9891\\u7e41\\uff0c\\u541e\\u5410\\u91cf\\u4f4e\\uff1b\\u82e5\\u65f6\\u95f4\\u7247\\u592a\\u957f\\uff0c\\u5b9e\\u65f6\\u6027\\u5f97\\u4e0d\\u5230\\u4fdd\\u8bc1\\u3002\\n\\n**\\u4f18\\u5148\\u7ea7\\u8c03\\u5ea6\\u7b97\\u6cd5**\\n\\n\\n\\u4e3a\\u6bcf\\u4e2a\\u8fdb\\u7a0b\\u5206\\u914d\\u4e00\\u4e2a\\u4f18\\u5148\\u7ea7\\uff0c\\u6309\\u4f18\\u5148\\u7ea7\\u8fdb\\u884c\\u8c03\\u5ea6\\u3002\\u4e3a\\u4e86\\u9632\\u6b62\\u4f4e\\u4f18\\u5148\\u7ea7\\u7684\\u8fdb\\u7a0b\\u6c38\\u8fdc\\u7b49\\u4e0d\\u5230\\u8c03\\u5ea6\\uff0c\\u53ef\\u4ee5\\u968f\\u7740\\u65f6\\u95f4\\u7684\\u63a8\\u79fb\\u589e\\u52a0\\u7b49\\u5f85\\u8fdb\\u7a0b\\u7684\\u4f18\\u5148\\u7ea7\\u3002\\n\\n**\\u591a\\u7ea7\\u53cd\\u9988\\u961f\\u5217\\u8c03\\u5ea6\\u7b97\\u6cd5 Multilevel Feedback Queue**\\n\\n\\n\\u8bbe\\u7f6e\\u591a\\u4e2a\\u5c31\\u7eea\\u961f\\u52171\\u30012\\u30013...\\uff0c\\u4f18\\u5148\\u7ea7\\u9012\\u51cf\\uff0c\\u65f6\\u95f4\\u7247\\u9012\\u589e\\u3002\\u53ea\\u6709\\u7b49\\u5230\\u4f18\\u5148\\u7ea7\\u66f4\\u9ad8\\u7684\\u961f\\u5217\\u4e3a\\u7a7a\\u65f6\\u624d\\u4f1a\\u8c03\\u5ea6\\u5f53\\u524d\\u961f\\u5217\\u4e2d\\u7684\\u8fdb\\u7a0b\\u3002\\u5982\\u679c\\u8fdb\\u7a0b\\u7528\\u5b8c\\u4e86\\u5f53\\u524d\\u961f\\u5217\\u7684\\u65f6\\u95f4\\u7247\\u8fd8\\u672a\\u6267\\u884c\\u5b8c\\uff0c\\u5219\\u4f1a\\u88ab\\u79fb\\u5230\\u4e0b\\u4e00\\u961f\\u5217\\u3002\\n\\n\\u62a2\\u5360\\u5f0f\\uff08\\u65f6\\u95f4\\u7247\\u7528\\u5b8c\\u65f6\\uff09\\uff0c\\u5f00\\u9500\\u53ef\\u80fd\\u8f83\\u5927\\uff0c\\u5bf9IO\\u578b\\u8fdb\\u7a0b\\u6709\\u5229\\uff0c\\u53ef\\u80fd\\u4f1a\\u51fa\\u73b0\\u9965\\u997f\\u95ee\\u9898\\u3002\\n\"}]}','white','2020-08-14 12:09:57'),(234,'什么叫优先级反转？如何解决？','高优先级的进程等待被一个低优先级进程占用的资源时，就会出现优先级反转，即优先级较低的进程比优先级较高的进程先执行。\n\n解决方法：\n\n- 优先级天花板(priority ceiling)：当任务申请某资源时，把该任务的优先级提升到可访问这个资源的所有任务中的最高优先级，这个优先级称为该资源的优先级天花板。简单易行。\n- 优先级继承(priority inheritance)：当任务A申请共享资源S时，如果S正在被任务C使用，通过比较任务C与自身的优先级，如发现任务C的优先级小于自身的优先级，则将任务C的优先级提升到自身的优先级，任务C释放资源S后，再恢复任务C的原优先级。\n','<p>高优先级的进程等待被一个低优先级进程占用的资源时，就会出现优先级反转，即优先级较低的进程比优先级较高的进程先执行。</p><p><br></p><p>解决方法：</p><p><br></p><p>- 优先级天花板(priority ceiling)：当任务申请某资源时，把该任务的优先级提升到可访问这个资源的所有任务中的最高优先级，这个优先级称为该资源的优先级天花板。简单易行。</p><p>- 优先级继承(priority inheritance)：当任务A申请共享资源S时，如果S正在被任务C使用，通过比较任务C与自身的优先级，如发现任务C的优先级小于自身的优先级，则将任务C的优先级提升到自身的优先级，任务C释放资源S后，再恢复任务C的原优先级。</p>','{\"ops\": [{\"insert\": \"\\u9ad8\\u4f18\\u5148\\u7ea7\\u7684\\u8fdb\\u7a0b\\u7b49\\u5f85\\u88ab\\u4e00\\u4e2a\\u4f4e\\u4f18\\u5148\\u7ea7\\u8fdb\\u7a0b\\u5360\\u7528\\u7684\\u8d44\\u6e90\\u65f6\\uff0c\\u5c31\\u4f1a\\u51fa\\u73b0\\u4f18\\u5148\\u7ea7\\u53cd\\u8f6c\\uff0c\\u5373\\u4f18\\u5148\\u7ea7\\u8f83\\u4f4e\\u7684\\u8fdb\\u7a0b\\u6bd4\\u4f18\\u5148\\u7ea7\\u8f83\\u9ad8\\u7684\\u8fdb\\u7a0b\\u5148\\u6267\\u884c\\u3002\\n\\n\\u89e3\\u51b3\\u65b9\\u6cd5\\uff1a\\n\\n- \\u4f18\\u5148\\u7ea7\\u5929\\u82b1\\u677f(priority ceiling)\\uff1a\\u5f53\\u4efb\\u52a1\\u7533\\u8bf7\\u67d0\\u8d44\\u6e90\\u65f6\\uff0c\\u628a\\u8be5\\u4efb\\u52a1\\u7684\\u4f18\\u5148\\u7ea7\\u63d0\\u5347\\u5230\\u53ef\\u8bbf\\u95ee\\u8fd9\\u4e2a\\u8d44\\u6e90\\u7684\\u6240\\u6709\\u4efb\\u52a1\\u4e2d\\u7684\\u6700\\u9ad8\\u4f18\\u5148\\u7ea7\\uff0c\\u8fd9\\u4e2a\\u4f18\\u5148\\u7ea7\\u79f0\\u4e3a\\u8be5\\u8d44\\u6e90\\u7684\\u4f18\\u5148\\u7ea7\\u5929\\u82b1\\u677f\\u3002\\u7b80\\u5355\\u6613\\u884c\\u3002\\n- \\u4f18\\u5148\\u7ea7\\u7ee7\\u627f(priority inheritance)\\uff1a\\u5f53\\u4efb\\u52a1A\\u7533\\u8bf7\\u5171\\u4eab\\u8d44\\u6e90S\\u65f6\\uff0c\\u5982\\u679cS\\u6b63\\u5728\\u88ab\\u4efb\\u52a1C\\u4f7f\\u7528\\uff0c\\u901a\\u8fc7\\u6bd4\\u8f83\\u4efb\\u52a1C\\u4e0e\\u81ea\\u8eab\\u7684\\u4f18\\u5148\\u7ea7\\uff0c\\u5982\\u53d1\\u73b0\\u4efb\\u52a1C\\u7684\\u4f18\\u5148\\u7ea7\\u5c0f\\u4e8e\\u81ea\\u8eab\\u7684\\u4f18\\u5148\\u7ea7\\uff0c\\u5219\\u5c06\\u4efb\\u52a1C\\u7684\\u4f18\\u5148\\u7ea7\\u63d0\\u5347\\u5230\\u81ea\\u8eab\\u7684\\u4f18\\u5148\\u7ea7\\uff0c\\u4efb\\u52a1C\\u91ca\\u653e\\u8d44\\u6e90S\\u540e\\uff0c\\u518d\\u6062\\u590d\\u4efb\\u52a1C\\u7684\\u539f\\u4f18\\u5148\\u7ea7\\u3002\\n\"}]}','white','2020-08-14 12:10:10'),(235,'什么是僵尸进程？','一个子进程结束后，它的父进程并没有等待它（调用wait或者waitpid），那么这个子进程将成为一个僵尸进程。僵尸进程是一个已经死亡的进程，但是并没有真正被销毁。它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程表中保留一个位置，记载该进程的进程ID、终止状态以及资源利用信息(CPU时间，内存使用量等等)供父进程收集，除此之外，僵尸进程不再占有任何内存空间。这个僵尸进程可能会一直留在系统中直到系统重启。\n\n危害：占用进程号，而系统所能使用的进程号是有限的；占用内存。\n\n以下情况不会产生僵尸进程：\n\n- 该进程的父进程先结束了。每个进程结束的时候，系统都会扫描是否存在子进程，如果有则用Init进程接管，成为该进程的父进程，并且会调用wait等待其结束。\n- 父进程调用wait或者waitpid等待子进程结束（需要每隔一段时间查询子进程是否结束）。wait系统调用会使父进程暂停执行，直到它的一个子进程结束为止。waitpid则可以加入```WNOHANG```(wait-no-hang)选项，如果没有发现结束的子进程，就会立即返回，不会将调用waitpid的进程阻塞。同时，waitpid还可以选择是等待任一子进程（同wait），还是等待指定pid的子进程，还是等待同一进程组下的任一子进程，还是等待组ID等于pid的任一子进程；\n- 子进程结束时，系统会产生```SIGCHLD```(signal-child)信号，可以注册一个信号处理函数，在该函数中调用waitpid，等待所有结束的子进程（注意：一般都需要循环调用waitpid，因为在信号处理函数开始执行之前，可能已经有多个子进程结束了，而信号处理函数只执行一次，所以要循环调用将所有结束的子进程回收）；\n- 也可以用```signal(SIGCLD, SIG_IGN)```(signal-ignore)通知内核，表示忽略```SIGCHLD```信号，那么子进程结束后，内核会进行回收。\n','<p>一个子进程结束后，它的父进程并没有等待它（调用wait或者waitpid），那么这个子进程将成为一个僵尸进程。僵尸进程是一个已经死亡的进程，但是并没有真正被销毁。它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程表中保留一个位置，记载该进程的进程ID、终止状态以及资源利用信息(CPU时间，内存使用量等等)供父进程收集，除此之外，僵尸进程不再占有任何内存空间。这个僵尸进程可能会一直留在系统中直到系统重启。</p><p><br></p><p>危害：占用进程号，而系统所能使用的进程号是有限的；占用内存。</p><p><br></p><p>以下情况不会产生僵尸进程：</p><p><br></p><p>- 该进程的父进程先结束了。每个进程结束的时候，系统都会扫描是否存在子进程，如果有则用Init进程接管，成为该进程的父进程，并且会调用wait等待其结束。</p><p>- 父进程调用wait或者waitpid等待子进程结束（需要每隔一段时间查询子进程是否结束）。wait系统调用会使父进程暂停执行，直到它的一个子进程结束为止。waitpid则可以加入```WNOHANG```(wait-no-hang)选项，如果没有发现结束的子进程，就会立即返回，不会将调用waitpid的进程阻塞。同时，waitpid还可以选择是等待任一子进程（同wait），还是等待指定pid的子进程，还是等待同一进程组下的任一子进程，还是等待组ID等于pid的任一子进程；</p><p>- 子进程结束时，系统会产生```SIGCHLD```(signal-child)信号，可以注册一个信号处理函数，在该函数中调用waitpid，等待所有结束的子进程（注意：一般都需要循环调用waitpid，因为在信号处理函数开始执行之前，可能已经有多个子进程结束了，而信号处理函数只执行一次，所以要循环调用将所有结束的子进程回收）；</p><p>- 也可以用```signal(SIGCLD, SIG_IGN)```(signal-ignore)通知内核，表示忽略```SIGCHLD```信号，那么子进程结束后，内核会进行回收。</p>','{\"ops\": [{\"insert\": \"\\u4e00\\u4e2a\\u5b50\\u8fdb\\u7a0b\\u7ed3\\u675f\\u540e\\uff0c\\u5b83\\u7684\\u7236\\u8fdb\\u7a0b\\u5e76\\u6ca1\\u6709\\u7b49\\u5f85\\u5b83\\uff08\\u8c03\\u7528wait\\u6216\\u8005waitpid\\uff09\\uff0c\\u90a3\\u4e48\\u8fd9\\u4e2a\\u5b50\\u8fdb\\u7a0b\\u5c06\\u6210\\u4e3a\\u4e00\\u4e2a\\u50f5\\u5c38\\u8fdb\\u7a0b\\u3002\\u50f5\\u5c38\\u8fdb\\u7a0b\\u662f\\u4e00\\u4e2a\\u5df2\\u7ecf\\u6b7b\\u4ea1\\u7684\\u8fdb\\u7a0b\\uff0c\\u4f46\\u662f\\u5e76\\u6ca1\\u6709\\u771f\\u6b63\\u88ab\\u9500\\u6bc1\\u3002\\u5b83\\u5df2\\u7ecf\\u653e\\u5f03\\u4e86\\u51e0\\u4e4e\\u6240\\u6709\\u5185\\u5b58\\u7a7a\\u95f4\\uff0c\\u6ca1\\u6709\\u4efb\\u4f55\\u53ef\\u6267\\u884c\\u4ee3\\u7801\\uff0c\\u4e5f\\u4e0d\\u80fd\\u88ab\\u8c03\\u5ea6\\uff0c\\u4ec5\\u4ec5\\u5728\\u8fdb\\u7a0b\\u8868\\u4e2d\\u4fdd\\u7559\\u4e00\\u4e2a\\u4f4d\\u7f6e\\uff0c\\u8bb0\\u8f7d\\u8be5\\u8fdb\\u7a0b\\u7684\\u8fdb\\u7a0bID\\u3001\\u7ec8\\u6b62\\u72b6\\u6001\\u4ee5\\u53ca\\u8d44\\u6e90\\u5229\\u7528\\u4fe1\\u606f(CPU\\u65f6\\u95f4\\uff0c\\u5185\\u5b58\\u4f7f\\u7528\\u91cf\\u7b49\\u7b49)\\u4f9b\\u7236\\u8fdb\\u7a0b\\u6536\\u96c6\\uff0c\\u9664\\u6b64\\u4e4b\\u5916\\uff0c\\u50f5\\u5c38\\u8fdb\\u7a0b\\u4e0d\\u518d\\u5360\\u6709\\u4efb\\u4f55\\u5185\\u5b58\\u7a7a\\u95f4\\u3002\\u8fd9\\u4e2a\\u50f5\\u5c38\\u8fdb\\u7a0b\\u53ef\\u80fd\\u4f1a\\u4e00\\u76f4\\u7559\\u5728\\u7cfb\\u7edf\\u4e2d\\u76f4\\u5230\\u7cfb\\u7edf\\u91cd\\u542f\\u3002\\n\\n\\u5371\\u5bb3\\uff1a\\u5360\\u7528\\u8fdb\\u7a0b\\u53f7\\uff0c\\u800c\\u7cfb\\u7edf\\u6240\\u80fd\\u4f7f\\u7528\\u7684\\u8fdb\\u7a0b\\u53f7\\u662f\\u6709\\u9650\\u7684\\uff1b\\u5360\\u7528\\u5185\\u5b58\\u3002\\n\\n\\u4ee5\\u4e0b\\u60c5\\u51b5\\u4e0d\\u4f1a\\u4ea7\\u751f\\u50f5\\u5c38\\u8fdb\\u7a0b\\uff1a\\n\\n- \\u8be5\\u8fdb\\u7a0b\\u7684\\u7236\\u8fdb\\u7a0b\\u5148\\u7ed3\\u675f\\u4e86\\u3002\\u6bcf\\u4e2a\\u8fdb\\u7a0b\\u7ed3\\u675f\\u7684\\u65f6\\u5019\\uff0c\\u7cfb\\u7edf\\u90fd\\u4f1a\\u626b\\u63cf\\u662f\\u5426\\u5b58\\u5728\\u5b50\\u8fdb\\u7a0b\\uff0c\\u5982\\u679c\\u6709\\u5219\\u7528Init\\u8fdb\\u7a0b\\u63a5\\u7ba1\\uff0c\\u6210\\u4e3a\\u8be5\\u8fdb\\u7a0b\\u7684\\u7236\\u8fdb\\u7a0b\\uff0c\\u5e76\\u4e14\\u4f1a\\u8c03\\u7528wait\\u7b49\\u5f85\\u5176\\u7ed3\\u675f\\u3002\\n- \\u7236\\u8fdb\\u7a0b\\u8c03\\u7528wait\\u6216\\u8005waitpid\\u7b49\\u5f85\\u5b50\\u8fdb\\u7a0b\\u7ed3\\u675f\\uff08\\u9700\\u8981\\u6bcf\\u9694\\u4e00\\u6bb5\\u65f6\\u95f4\\u67e5\\u8be2\\u5b50\\u8fdb\\u7a0b\\u662f\\u5426\\u7ed3\\u675f\\uff09\\u3002wait\\u7cfb\\u7edf\\u8c03\\u7528\\u4f1a\\u4f7f\\u7236\\u8fdb\\u7a0b\\u6682\\u505c\\u6267\\u884c\\uff0c\\u76f4\\u5230\\u5b83\\u7684\\u4e00\\u4e2a\\u5b50\\u8fdb\\u7a0b\\u7ed3\\u675f\\u4e3a\\u6b62\\u3002waitpid\\u5219\\u53ef\\u4ee5\\u52a0\\u5165```WNOHANG```(wait-no-hang)\\u9009\\u9879\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u53d1\\u73b0\\u7ed3\\u675f\\u7684\\u5b50\\u8fdb\\u7a0b\\uff0c\\u5c31\\u4f1a\\u7acb\\u5373\\u8fd4\\u56de\\uff0c\\u4e0d\\u4f1a\\u5c06\\u8c03\\u7528waitpid\\u7684\\u8fdb\\u7a0b\\u963b\\u585e\\u3002\\u540c\\u65f6\\uff0cwaitpid\\u8fd8\\u53ef\\u4ee5\\u9009\\u62e9\\u662f\\u7b49\\u5f85\\u4efb\\u4e00\\u5b50\\u8fdb\\u7a0b\\uff08\\u540cwait\\uff09\\uff0c\\u8fd8\\u662f\\u7b49\\u5f85\\u6307\\u5b9apid\\u7684\\u5b50\\u8fdb\\u7a0b\\uff0c\\u8fd8\\u662f\\u7b49\\u5f85\\u540c\\u4e00\\u8fdb\\u7a0b\\u7ec4\\u4e0b\\u7684\\u4efb\\u4e00\\u5b50\\u8fdb\\u7a0b\\uff0c\\u8fd8\\u662f\\u7b49\\u5f85\\u7ec4ID\\u7b49\\u4e8epid\\u7684\\u4efb\\u4e00\\u5b50\\u8fdb\\u7a0b\\uff1b\\n- \\u5b50\\u8fdb\\u7a0b\\u7ed3\\u675f\\u65f6\\uff0c\\u7cfb\\u7edf\\u4f1a\\u4ea7\\u751f```SIGCHLD```(signal-child)\\u4fe1\\u53f7\\uff0c\\u53ef\\u4ee5\\u6ce8\\u518c\\u4e00\\u4e2a\\u4fe1\\u53f7\\u5904\\u7406\\u51fd\\u6570\\uff0c\\u5728\\u8be5\\u51fd\\u6570\\u4e2d\\u8c03\\u7528waitpid\\uff0c\\u7b49\\u5f85\\u6240\\u6709\\u7ed3\\u675f\\u7684\\u5b50\\u8fdb\\u7a0b\\uff08\\u6ce8\\u610f\\uff1a\\u4e00\\u822c\\u90fd\\u9700\\u8981\\u5faa\\u73af\\u8c03\\u7528waitpid\\uff0c\\u56e0\\u4e3a\\u5728\\u4fe1\\u53f7\\u5904\\u7406\\u51fd\\u6570\\u5f00\\u59cb\\u6267\\u884c\\u4e4b\\u524d\\uff0c\\u53ef\\u80fd\\u5df2\\u7ecf\\u6709\\u591a\\u4e2a\\u5b50\\u8fdb\\u7a0b\\u7ed3\\u675f\\u4e86\\uff0c\\u800c\\u4fe1\\u53f7\\u5904\\u7406\\u51fd\\u6570\\u53ea\\u6267\\u884c\\u4e00\\u6b21\\uff0c\\u6240\\u4ee5\\u8981\\u5faa\\u73af\\u8c03\\u7528\\u5c06\\u6240\\u6709\\u7ed3\\u675f\\u7684\\u5b50\\u8fdb\\u7a0b\\u56de\\u6536\\uff09\\uff1b\\n- \\u4e5f\\u53ef\\u4ee5\\u7528```signal(SIGCLD, SIG_IGN)```(signal-ignore)\\u901a\\u77e5\\u5185\\u6838\\uff0c\\u8868\\u793a\\u5ffd\\u7565```SIGCHLD```\\u4fe1\\u53f7\\uff0c\\u90a3\\u4e48\\u5b50\\u8fdb\\u7a0b\\u7ed3\\u675f\\u540e\\uff0c\\u5185\\u6838\\u4f1a\\u8fdb\\u884c\\u56de\\u6536\\u3002\\n\"}]}','white','2020-08-14 12:10:37'),(236,'什么是孤儿进程？','一个父进程已经结束了，但是它的子进程还在运行，那么这些子进程将成为孤儿进程。孤儿进程会被Init（进程ID为1）接管，当这些孤儿进程结束时由Init完成状态收集工作。\n','<p>一个父进程已经结束了，但是它的子进程还在运行，那么这些子进程将成为孤儿进程。孤儿进程会被Init（进程ID为1）接管，当这些孤儿进程结束时由Init完成状态收集工作。</p>','{\"ops\": [{\"insert\": \"\\u4e00\\u4e2a\\u7236\\u8fdb\\u7a0b\\u5df2\\u7ecf\\u7ed3\\u675f\\u4e86\\uff0c\\u4f46\\u662f\\u5b83\\u7684\\u5b50\\u8fdb\\u7a0b\\u8fd8\\u5728\\u8fd0\\u884c\\uff0c\\u90a3\\u4e48\\u8fd9\\u4e9b\\u5b50\\u8fdb\\u7a0b\\u5c06\\u6210\\u4e3a\\u5b64\\u513f\\u8fdb\\u7a0b\\u3002\\u5b64\\u513f\\u8fdb\\u7a0b\\u4f1a\\u88abInit\\uff08\\u8fdb\\u7a0bID\\u4e3a1\\uff09\\u63a5\\u7ba1\\uff0c\\u5f53\\u8fd9\\u4e9b\\u5b64\\u513f\\u8fdb\\u7a0b\\u7ed3\\u675f\\u65f6\\u7531Init\\u5b8c\\u6210\\u72b6\\u6001\\u6536\\u96c6\\u5de5\\u4f5c\\u3002\\n\"}]}','white','2020-08-14 12:10:51'),(237,'线程同步有哪些方式？','> 为什么需要线程同步：线程有时候会和其他线程共享一些资源，比如内存、数据库等。当多个线程同时读写同一份共享资源的时候，可能会发生冲突。因此需要线程的同步，多个线程按顺序访问资源。\n\n- **互斥量** Mutex：互斥量是内核对象，只有拥有互斥对象的线程才有访问互斥资源的权限。因为互斥对象只有一个，所以可以保证互斥资源不会被多个线程同时访问；当前拥有互斥对象的线程处理完任务后必须将互斥对象交出，以便其他线程访问该资源；\n- **信号量** Semaphore：信号量是内核对象，它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。信号量对象保存了**最大资源计数**和**当前可用资源计数**，每增加一个线程对共享资源的访问，当前可用资源计数就减1，只要当前可用资源计数大于0，就可以发出信号量信号，如果为0，则将线程放入一个队列中等待。线程处理完共享资源后，应在离开的同时通过```ReleaseSemaphore```函数将当前可用资源数加1。如果信号量的取值只能为0或1，那么信号量就成为了互斥量；\n- **事件** Event：允许一个线程在处理完一个任务后，主动唤醒另外一个线程执行任务。事件分为手动重置事件和自动重置事件。手动重置事件被设置为激发状态后，会唤醒所有等待的线程，而且一直保持为激发状态，直到程序重新把它设置为未激发状态。自动重置事件被设置为激发状态后，会唤醒**一个**等待中的线程，然后自动恢复为未激发状态。\n- **临界区** Critical Section：任意时刻只允许一个线程对临界资源进行访问。拥有临界区对象的线程可以访问该临界资源，其它试图访问该资源的线程将被挂起，直到临界区对象被释放。\n','<p>&gt; 为什么需要线程同步：线程有时候会和其他线程共享一些资源，比如内存、数据库等。当多个线程同时读写同一份共享资源的时候，可能会发生冲突。因此需要线程的同步，多个线程按顺序访问资源。</p><p><br></p><p>- **互斥量** Mutex：互斥量是内核对象，只有拥有互斥对象的线程才有访问互斥资源的权限。因为互斥对象只有一个，所以可以保证互斥资源不会被多个线程同时访问；当前拥有互斥对象的线程处理完任务后必须将互斥对象交出，以便其他线程访问该资源；</p><p>- **信号量** Semaphore：信号量是内核对象，它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。信号量对象保存了**最大资源计数**和**当前可用资源计数**，每增加一个线程对共享资源的访问，当前可用资源计数就减1，只要当前可用资源计数大于0，就可以发出信号量信号，如果为0，则将线程放入一个队列中等待。线程处理完共享资源后，应在离开的同时通过```ReleaseSemaphore```函数将当前可用资源数加1。如果信号量的取值只能为0或1，那么信号量就成为了互斥量；</p><p>- **事件** Event：允许一个线程在处理完一个任务后，主动唤醒另外一个线程执行任务。事件分为手动重置事件和自动重置事件。手动重置事件被设置为激发状态后，会唤醒所有等待的线程，而且一直保持为激发状态，直到程序重新把它设置为未激发状态。自动重置事件被设置为激发状态后，会唤醒**一个**等待中的线程，然后自动恢复为未激发状态。</p><p>- **临界区** Critical Section：任意时刻只允许一个线程对临界资源进行访问。拥有临界区对象的线程可以访问该临界资源，其它试图访问该资源的线程将被挂起，直到临界区对象被释放。</p>','{\"ops\": [{\"insert\": \"> \\u4e3a\\u4ec0\\u4e48\\u9700\\u8981\\u7ebf\\u7a0b\\u540c\\u6b65\\uff1a\\u7ebf\\u7a0b\\u6709\\u65f6\\u5019\\u4f1a\\u548c\\u5176\\u4ed6\\u7ebf\\u7a0b\\u5171\\u4eab\\u4e00\\u4e9b\\u8d44\\u6e90\\uff0c\\u6bd4\\u5982\\u5185\\u5b58\\u3001\\u6570\\u636e\\u5e93\\u7b49\\u3002\\u5f53\\u591a\\u4e2a\\u7ebf\\u7a0b\\u540c\\u65f6\\u8bfb\\u5199\\u540c\\u4e00\\u4efd\\u5171\\u4eab\\u8d44\\u6e90\\u7684\\u65f6\\u5019\\uff0c\\u53ef\\u80fd\\u4f1a\\u53d1\\u751f\\u51b2\\u7a81\\u3002\\u56e0\\u6b64\\u9700\\u8981\\u7ebf\\u7a0b\\u7684\\u540c\\u6b65\\uff0c\\u591a\\u4e2a\\u7ebf\\u7a0b\\u6309\\u987a\\u5e8f\\u8bbf\\u95ee\\u8d44\\u6e90\\u3002\\n\\n- **\\u4e92\\u65a5\\u91cf** Mutex\\uff1a\\u4e92\\u65a5\\u91cf\\u662f\\u5185\\u6838\\u5bf9\\u8c61\\uff0c\\u53ea\\u6709\\u62e5\\u6709\\u4e92\\u65a5\\u5bf9\\u8c61\\u7684\\u7ebf\\u7a0b\\u624d\\u6709\\u8bbf\\u95ee\\u4e92\\u65a5\\u8d44\\u6e90\\u7684\\u6743\\u9650\\u3002\\u56e0\\u4e3a\\u4e92\\u65a5\\u5bf9\\u8c61\\u53ea\\u6709\\u4e00\\u4e2a\\uff0c\\u6240\\u4ee5\\u53ef\\u4ee5\\u4fdd\\u8bc1\\u4e92\\u65a5\\u8d44\\u6e90\\u4e0d\\u4f1a\\u88ab\\u591a\\u4e2a\\u7ebf\\u7a0b\\u540c\\u65f6\\u8bbf\\u95ee\\uff1b\\u5f53\\u524d\\u62e5\\u6709\\u4e92\\u65a5\\u5bf9\\u8c61\\u7684\\u7ebf\\u7a0b\\u5904\\u7406\\u5b8c\\u4efb\\u52a1\\u540e\\u5fc5\\u987b\\u5c06\\u4e92\\u65a5\\u5bf9\\u8c61\\u4ea4\\u51fa\\uff0c\\u4ee5\\u4fbf\\u5176\\u4ed6\\u7ebf\\u7a0b\\u8bbf\\u95ee\\u8be5\\u8d44\\u6e90\\uff1b\\n- **\\u4fe1\\u53f7\\u91cf** Semaphore\\uff1a\\u4fe1\\u53f7\\u91cf\\u662f\\u5185\\u6838\\u5bf9\\u8c61\\uff0c\\u5b83\\u5141\\u8bb8\\u540c\\u4e00\\u65f6\\u523b\\u591a\\u4e2a\\u7ebf\\u7a0b\\u8bbf\\u95ee\\u540c\\u4e00\\u8d44\\u6e90\\uff0c\\u4f46\\u662f\\u9700\\u8981\\u63a7\\u5236\\u540c\\u4e00\\u65f6\\u523b\\u8bbf\\u95ee\\u6b64\\u8d44\\u6e90\\u7684\\u6700\\u5927\\u7ebf\\u7a0b\\u6570\\u91cf\\u3002\\u4fe1\\u53f7\\u91cf\\u5bf9\\u8c61\\u4fdd\\u5b58\\u4e86**\\u6700\\u5927\\u8d44\\u6e90\\u8ba1\\u6570**\\u548c**\\u5f53\\u524d\\u53ef\\u7528\\u8d44\\u6e90\\u8ba1\\u6570**\\uff0c\\u6bcf\\u589e\\u52a0\\u4e00\\u4e2a\\u7ebf\\u7a0b\\u5bf9\\u5171\\u4eab\\u8d44\\u6e90\\u7684\\u8bbf\\u95ee\\uff0c\\u5f53\\u524d\\u53ef\\u7528\\u8d44\\u6e90\\u8ba1\\u6570\\u5c31\\u51cf1\\uff0c\\u53ea\\u8981\\u5f53\\u524d\\u53ef\\u7528\\u8d44\\u6e90\\u8ba1\\u6570\\u5927\\u4e8e0\\uff0c\\u5c31\\u53ef\\u4ee5\\u53d1\\u51fa\\u4fe1\\u53f7\\u91cf\\u4fe1\\u53f7\\uff0c\\u5982\\u679c\\u4e3a0\\uff0c\\u5219\\u5c06\\u7ebf\\u7a0b\\u653e\\u5165\\u4e00\\u4e2a\\u961f\\u5217\\u4e2d\\u7b49\\u5f85\\u3002\\u7ebf\\u7a0b\\u5904\\u7406\\u5b8c\\u5171\\u4eab\\u8d44\\u6e90\\u540e\\uff0c\\u5e94\\u5728\\u79bb\\u5f00\\u7684\\u540c\\u65f6\\u901a\\u8fc7```ReleaseSemaphore```\\u51fd\\u6570\\u5c06\\u5f53\\u524d\\u53ef\\u7528\\u8d44\\u6e90\\u6570\\u52a01\\u3002\\u5982\\u679c\\u4fe1\\u53f7\\u91cf\\u7684\\u53d6\\u503c\\u53ea\\u80fd\\u4e3a0\\u62161\\uff0c\\u90a3\\u4e48\\u4fe1\\u53f7\\u91cf\\u5c31\\u6210\\u4e3a\\u4e86\\u4e92\\u65a5\\u91cf\\uff1b\\n- **\\u4e8b\\u4ef6** Event\\uff1a\\u5141\\u8bb8\\u4e00\\u4e2a\\u7ebf\\u7a0b\\u5728\\u5904\\u7406\\u5b8c\\u4e00\\u4e2a\\u4efb\\u52a1\\u540e\\uff0c\\u4e3b\\u52a8\\u5524\\u9192\\u53e6\\u5916\\u4e00\\u4e2a\\u7ebf\\u7a0b\\u6267\\u884c\\u4efb\\u52a1\\u3002\\u4e8b\\u4ef6\\u5206\\u4e3a\\u624b\\u52a8\\u91cd\\u7f6e\\u4e8b\\u4ef6\\u548c\\u81ea\\u52a8\\u91cd\\u7f6e\\u4e8b\\u4ef6\\u3002\\u624b\\u52a8\\u91cd\\u7f6e\\u4e8b\\u4ef6\\u88ab\\u8bbe\\u7f6e\\u4e3a\\u6fc0\\u53d1\\u72b6\\u6001\\u540e\\uff0c\\u4f1a\\u5524\\u9192\\u6240\\u6709\\u7b49\\u5f85\\u7684\\u7ebf\\u7a0b\\uff0c\\u800c\\u4e14\\u4e00\\u76f4\\u4fdd\\u6301\\u4e3a\\u6fc0\\u53d1\\u72b6\\u6001\\uff0c\\u76f4\\u5230\\u7a0b\\u5e8f\\u91cd\\u65b0\\u628a\\u5b83\\u8bbe\\u7f6e\\u4e3a\\u672a\\u6fc0\\u53d1\\u72b6\\u6001\\u3002\\u81ea\\u52a8\\u91cd\\u7f6e\\u4e8b\\u4ef6\\u88ab\\u8bbe\\u7f6e\\u4e3a\\u6fc0\\u53d1\\u72b6\\u6001\\u540e\\uff0c\\u4f1a\\u5524\\u9192**\\u4e00\\u4e2a**\\u7b49\\u5f85\\u4e2d\\u7684\\u7ebf\\u7a0b\\uff0c\\u7136\\u540e\\u81ea\\u52a8\\u6062\\u590d\\u4e3a\\u672a\\u6fc0\\u53d1\\u72b6\\u6001\\u3002\\n- **\\u4e34\\u754c\\u533a** Critical Section\\uff1a\\u4efb\\u610f\\u65f6\\u523b\\u53ea\\u5141\\u8bb8\\u4e00\\u4e2a\\u7ebf\\u7a0b\\u5bf9\\u4e34\\u754c\\u8d44\\u6e90\\u8fdb\\u884c\\u8bbf\\u95ee\\u3002\\u62e5\\u6709\\u4e34\\u754c\\u533a\\u5bf9\\u8c61\\u7684\\u7ebf\\u7a0b\\u53ef\\u4ee5\\u8bbf\\u95ee\\u8be5\\u4e34\\u754c\\u8d44\\u6e90\\uff0c\\u5176\\u5b83\\u8bd5\\u56fe\\u8bbf\\u95ee\\u8be5\\u8d44\\u6e90\\u7684\\u7ebf\\u7a0b\\u5c06\\u88ab\\u6302\\u8d77\\uff0c\\u76f4\\u5230\\u4e34\\u754c\\u533a\\u5bf9\\u8c61\\u88ab\\u91ca\\u653e\\u3002\\n\"}]}','white','2020-08-14 12:11:17'),(238,'互斥量和临界区有什么区别？','互斥量是可以命名的，可以用于不同进程之间的同步；而临界区只能用于同一进程中线程的同步。创建互斥量需要的资源更多，因此临界区的优势是速度快，节省资源。\n','<p>互斥量是可以命名的，可以用于不同进程之间的同步；而临界区只能用于同一进程中线程的同步。创建互斥量需要的资源更多，因此临界区的优势是速度快，节省资源。</p>','{\"ops\": [{\"insert\": \"\\u4e92\\u65a5\\u91cf\\u662f\\u53ef\\u4ee5\\u547d\\u540d\\u7684\\uff0c\\u53ef\\u4ee5\\u7528\\u4e8e\\u4e0d\\u540c\\u8fdb\\u7a0b\\u4e4b\\u95f4\\u7684\\u540c\\u6b65\\uff1b\\u800c\\u4e34\\u754c\\u533a\\u53ea\\u80fd\\u7528\\u4e8e\\u540c\\u4e00\\u8fdb\\u7a0b\\u4e2d\\u7ebf\\u7a0b\\u7684\\u540c\\u6b65\\u3002\\u521b\\u5efa\\u4e92\\u65a5\\u91cf\\u9700\\u8981\\u7684\\u8d44\\u6e90\\u66f4\\u591a\\uff0c\\u56e0\\u6b64\\u4e34\\u754c\\u533a\\u7684\\u4f18\\u52bf\\u662f\\u901f\\u5ea6\\u5feb\\uff0c\\u8282\\u7701\\u8d44\\u6e90\\u3002\\n\"}]}','white','2020-08-14 12:11:26'),(239,'什么是协程？','协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\n','<p>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p>','{\"ops\": [{\"insert\": \"\\u534f\\u7a0b\\u662f\\u4e00\\u79cd\\u7528\\u6237\\u6001\\u7684\\u8f7b\\u91cf\\u7ea7\\u7ebf\\u7a0b\\uff0c\\u534f\\u7a0b\\u7684\\u8c03\\u5ea6\\u5b8c\\u5168\\u7531\\u7528\\u6237\\u63a7\\u5236\\u3002\\u534f\\u7a0b\\u62e5\\u6709\\u81ea\\u5df1\\u7684\\u5bc4\\u5b58\\u5668\\u4e0a\\u4e0b\\u6587\\u548c\\u6808\\u3002\\u534f\\u7a0b\\u8c03\\u5ea6\\u5207\\u6362\\u65f6\\uff0c\\u5c06\\u5bc4\\u5b58\\u5668\\u4e0a\\u4e0b\\u6587\\u548c\\u6808\\u4fdd\\u5b58\\u5230\\u5176\\u4ed6\\u5730\\u65b9\\uff0c\\u5728\\u5207\\u56de\\u6765\\u7684\\u65f6\\u5019\\uff0c\\u6062\\u590d\\u5148\\u524d\\u4fdd\\u5b58\\u7684\\u5bc4\\u5b58\\u5668\\u4e0a\\u4e0b\\u6587\\u548c\\u6808\\uff0c\\u76f4\\u63a5\\u64cd\\u4f5c\\u6808\\u5219\\u57fa\\u672c\\u6ca1\\u6709\\u5185\\u6838\\u5207\\u6362\\u7684\\u5f00\\u9500\\uff0c\\u53ef\\u4ee5\\u4e0d\\u52a0\\u9501\\u7684\\u8bbf\\u95ee\\u5168\\u5c40\\u53d8\\u91cf\\uff0c\\u6240\\u4ee5\\u4e0a\\u4e0b\\u6587\\u7684\\u5207\\u6362\\u975e\\u5e38\\u5feb\\u3002\\n\"}]}','white','2020-08-14 12:11:39'),(240,'协程多与线程进行比较？','1. 一个线程可以拥有多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。\n\n2. 线程进程都是同步机制，而协程则是异步\n\n3. 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态\n','<p>1. 一个线程可以拥有多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</p><p><br></p><p>2. 线程进程都是同步机制，而协程则是异步</p><p><br></p><p>3. 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</p>','{\"ops\": [{\"insert\": \"1. \\u4e00\\u4e2a\\u7ebf\\u7a0b\\u53ef\\u4ee5\\u62e5\\u6709\\u591a\\u4e2a\\u534f\\u7a0b\\uff0c\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u4e5f\\u53ef\\u4ee5\\u5355\\u72ec\\u62e5\\u6709\\u591a\\u4e2a\\u534f\\u7a0b\\uff0c\\u8fd9\\u6837python\\u4e2d\\u5219\\u80fd\\u4f7f\\u7528\\u591a\\u6838CPU\\u3002\\n\\n2. \\u7ebf\\u7a0b\\u8fdb\\u7a0b\\u90fd\\u662f\\u540c\\u6b65\\u673a\\u5236\\uff0c\\u800c\\u534f\\u7a0b\\u5219\\u662f\\u5f02\\u6b65\\n\\n3. \\u534f\\u7a0b\\u80fd\\u4fdd\\u7559\\u4e0a\\u4e00\\u6b21\\u8c03\\u7528\\u65f6\\u7684\\u72b6\\u6001\\uff0c\\u6bcf\\u6b21\\u8fc7\\u7a0b\\u91cd\\u5165\\u65f6\\uff0c\\u5c31\\u76f8\\u5f53\\u4e8e\\u8fdb\\u5165\\u4e0a\\u4e00\\u6b21\\u8c03\\u7528\\u7684\\u72b6\\u6001\\n\"}]}','white','2020-08-14 12:11:48'),(241,'什么是IO多路复用？怎么实现？','IO多路复用（IO Multiplexing）是指单个进程/线程就可以同时处理多个IO请求。\n\n实现原理：用户将想要监视的文件描述符（File Descriptor）添加到select/poll/epoll函数中，由内核监视，函数阻塞。一旦有文件描述符就绪（读就绪或写就绪），或者超时（设置timeout），函数就会返回，然后该进程可以进行相应的读/写操作。\n','<p>IO多路复用（IO Multiplexing）是指单个进程/线程就可以同时处理多个IO请求。</p><p><br></p><p>实现原理：用户将想要监视的文件描述符（File Descriptor）添加到select/poll/epoll函数中，由内核监视，函数阻塞。一旦有文件描述符就绪（读就绪或写就绪），或者超时（设置timeout），函数就会返回，然后该进程可以进行相应的读/写操作。</p>','{\"ops\": [{\"insert\": \"IO\\u591a\\u8def\\u590d\\u7528\\uff08IO Multiplexing\\uff09\\u662f\\u6307\\u5355\\u4e2a\\u8fdb\\u7a0b/\\u7ebf\\u7a0b\\u5c31\\u53ef\\u4ee5\\u540c\\u65f6\\u5904\\u7406\\u591a\\u4e2aIO\\u8bf7\\u6c42\\u3002\\n\\n\\u5b9e\\u73b0\\u539f\\u7406\\uff1a\\u7528\\u6237\\u5c06\\u60f3\\u8981\\u76d1\\u89c6\\u7684\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\uff08File Descriptor\\uff09\\u6dfb\\u52a0\\u5230select/poll/epoll\\u51fd\\u6570\\u4e2d\\uff0c\\u7531\\u5185\\u6838\\u76d1\\u89c6\\uff0c\\u51fd\\u6570\\u963b\\u585e\\u3002\\u4e00\\u65e6\\u6709\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u5c31\\u7eea\\uff08\\u8bfb\\u5c31\\u7eea\\u6216\\u5199\\u5c31\\u7eea\\uff09\\uff0c\\u6216\\u8005\\u8d85\\u65f6\\uff08\\u8bbe\\u7f6etimeout\\uff09\\uff0c\\u51fd\\u6570\\u5c31\\u4f1a\\u8fd4\\u56de\\uff0c\\u7136\\u540e\\u8be5\\u8fdb\\u7a0b\\u53ef\\u4ee5\\u8fdb\\u884c\\u76f8\\u5e94\\u7684\\u8bfb/\\u5199\\u64cd\\u4f5c\\u3002\\n\"}]}','white','2020-08-14 12:12:02'),(242,'select/poll/epoll三者的区别？','- ```select```：将文件描述符放入一个集合中，调用select时，将这个集合从用户空间拷贝到内核空间（缺点1：每次都要复制，**开销大**），由内核根据就绪状态修改该集合的内容。（缺点2）**集合大小有限制**，32位机默认是1024（64位：2048）；采用水平触发机制。select函数返回后，需要通过遍历这个集合，找到就绪的文件描述符（缺点3：**轮询的方式效率较低**），当文件描述符的数量增加时，效率会线性下降；\n\n\n- ```poll```：和select几乎没有区别，区别在于文件描述符的存储方式不同，poll采用链表的方式存储，没有最大存储数量的限制；\n\n\n- ```epoll```：通过内核和用户空间共享内存，避免了不断复制的问题；支持的同时连接数上限很高（1G左右的内存支持10W左右的连接数）；文件描述符就绪时，采用回调机制，避免了轮询（回调函数将就绪的描述符添加到一个链表中，执行epoll_wait时，返回这个链表）；支持水平触发和边缘触发，采用边缘触发机制时，只有活跃的描述符才会触发回调函数。\n\n总结，区别主要在于：\n\n- 一个线程/进程所能打开的最大连接数\n- 文件描述符传递方式（是否复制）\n- 水平触发 or 边缘触发\n- 查询就绪的描述符时的效率（是否轮询）\n','<p>- ```select```：将文件描述符放入一个集合中，调用select时，将这个集合从用户空间拷贝到内核空间（缺点1：每次都要复制，**开销大**），由内核根据就绪状态修改该集合的内容。（缺点2）**集合大小有限制**，32位机默认是1024（64位：2048）；采用水平触发机制。select函数返回后，需要通过遍历这个集合，找到就绪的文件描述符（缺点3：**轮询的方式效率较低**），当文件描述符的数量增加时，效率会线性下降；</p><p><br></p><p><br></p><p>- ```poll```：和select几乎没有区别，区别在于文件描述符的存储方式不同，poll采用链表的方式存储，没有最大存储数量的限制；</p><p><br></p><p><br></p><p>- ```epoll```：通过内核和用户空间共享内存，避免了不断复制的问题；支持的同时连接数上限很高（1G左右的内存支持10W左右的连接数）；文件描述符就绪时，采用回调机制，避免了轮询（回调函数将就绪的描述符添加到一个链表中，执行epoll_wait时，返回这个链表）；支持水平触发和边缘触发，采用边缘触发机制时，只有活跃的描述符才会触发回调函数。</p><p><br></p><p>总结，区别主要在于：</p><p><br></p><p>- 一个线程/进程所能打开的最大连接数</p><p>- 文件描述符传递方式（是否复制）</p><p>- 水平触发 or 边缘触发</p><p>- 查询就绪的描述符时的效率（是否轮询）</p>','{\"ops\": [{\"insert\": \"- ```select```\\uff1a\\u5c06\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u653e\\u5165\\u4e00\\u4e2a\\u96c6\\u5408\\u4e2d\\uff0c\\u8c03\\u7528select\\u65f6\\uff0c\\u5c06\\u8fd9\\u4e2a\\u96c6\\u5408\\u4ece\\u7528\\u6237\\u7a7a\\u95f4\\u62f7\\u8d1d\\u5230\\u5185\\u6838\\u7a7a\\u95f4\\uff08\\u7f3a\\u70b91\\uff1a\\u6bcf\\u6b21\\u90fd\\u8981\\u590d\\u5236\\uff0c**\\u5f00\\u9500\\u5927**\\uff09\\uff0c\\u7531\\u5185\\u6838\\u6839\\u636e\\u5c31\\u7eea\\u72b6\\u6001\\u4fee\\u6539\\u8be5\\u96c6\\u5408\\u7684\\u5185\\u5bb9\\u3002\\uff08\\u7f3a\\u70b92\\uff09**\\u96c6\\u5408\\u5927\\u5c0f\\u6709\\u9650\\u5236**\\uff0c32\\u4f4d\\u673a\\u9ed8\\u8ba4\\u662f1024\\uff0864\\u4f4d\\uff1a2048\\uff09\\uff1b\\u91c7\\u7528\\u6c34\\u5e73\\u89e6\\u53d1\\u673a\\u5236\\u3002select\\u51fd\\u6570\\u8fd4\\u56de\\u540e\\uff0c\\u9700\\u8981\\u901a\\u8fc7\\u904d\\u5386\\u8fd9\\u4e2a\\u96c6\\u5408\\uff0c\\u627e\\u5230\\u5c31\\u7eea\\u7684\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\uff08\\u7f3a\\u70b93\\uff1a**\\u8f6e\\u8be2\\u7684\\u65b9\\u5f0f\\u6548\\u7387\\u8f83\\u4f4e**\\uff09\\uff0c\\u5f53\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u7684\\u6570\\u91cf\\u589e\\u52a0\\u65f6\\uff0c\\u6548\\u7387\\u4f1a\\u7ebf\\u6027\\u4e0b\\u964d\\uff1b\\n\\n\\n- ```poll```\\uff1a\\u548cselect\\u51e0\\u4e4e\\u6ca1\\u6709\\u533a\\u522b\\uff0c\\u533a\\u522b\\u5728\\u4e8e\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u7684\\u5b58\\u50a8\\u65b9\\u5f0f\\u4e0d\\u540c\\uff0cpoll\\u91c7\\u7528\\u94fe\\u8868\\u7684\\u65b9\\u5f0f\\u5b58\\u50a8\\uff0c\\u6ca1\\u6709\\u6700\\u5927\\u5b58\\u50a8\\u6570\\u91cf\\u7684\\u9650\\u5236\\uff1b\\n\\n\\n- ```epoll```\\uff1a\\u901a\\u8fc7\\u5185\\u6838\\u548c\\u7528\\u6237\\u7a7a\\u95f4\\u5171\\u4eab\\u5185\\u5b58\\uff0c\\u907f\\u514d\\u4e86\\u4e0d\\u65ad\\u590d\\u5236\\u7684\\u95ee\\u9898\\uff1b\\u652f\\u6301\\u7684\\u540c\\u65f6\\u8fde\\u63a5\\u6570\\u4e0a\\u9650\\u5f88\\u9ad8\\uff081G\\u5de6\\u53f3\\u7684\\u5185\\u5b58\\u652f\\u630110W\\u5de6\\u53f3\\u7684\\u8fde\\u63a5\\u6570\\uff09\\uff1b\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u5c31\\u7eea\\u65f6\\uff0c\\u91c7\\u7528\\u56de\\u8c03\\u673a\\u5236\\uff0c\\u907f\\u514d\\u4e86\\u8f6e\\u8be2\\uff08\\u56de\\u8c03\\u51fd\\u6570\\u5c06\\u5c31\\u7eea\\u7684\\u63cf\\u8ff0\\u7b26\\u6dfb\\u52a0\\u5230\\u4e00\\u4e2a\\u94fe\\u8868\\u4e2d\\uff0c\\u6267\\u884cepoll_wait\\u65f6\\uff0c\\u8fd4\\u56de\\u8fd9\\u4e2a\\u94fe\\u8868\\uff09\\uff1b\\u652f\\u6301\\u6c34\\u5e73\\u89e6\\u53d1\\u548c\\u8fb9\\u7f18\\u89e6\\u53d1\\uff0c\\u91c7\\u7528\\u8fb9\\u7f18\\u89e6\\u53d1\\u673a\\u5236\\u65f6\\uff0c\\u53ea\\u6709\\u6d3b\\u8dc3\\u7684\\u63cf\\u8ff0\\u7b26\\u624d\\u4f1a\\u89e6\\u53d1\\u56de\\u8c03\\u51fd\\u6570\\u3002\\n\\n\\u603b\\u7ed3\\uff0c\\u533a\\u522b\\u4e3b\\u8981\\u5728\\u4e8e\\uff1a\\n\\n- \\u4e00\\u4e2a\\u7ebf\\u7a0b/\\u8fdb\\u7a0b\\u6240\\u80fd\\u6253\\u5f00\\u7684\\u6700\\u5927\\u8fde\\u63a5\\u6570\\n- \\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u4f20\\u9012\\u65b9\\u5f0f\\uff08\\u662f\\u5426\\u590d\\u5236\\uff09\\n- \\u6c34\\u5e73\\u89e6\\u53d1 or \\u8fb9\\u7f18\\u89e6\\u53d1\\n- \\u67e5\\u8be2\\u5c31\\u7eea\\u7684\\u63cf\\u8ff0\\u7b26\\u65f6\\u7684\\u6548\\u7387\\uff08\\u662f\\u5426\\u8f6e\\u8be2\\uff09\\n\"}]}','white','2020-08-14 12:13:10'),(243,'什么时候使用select/poll，什么时候使用epoll？','当连接数较多并且有很多的不活跃连接时，epoll的效率比其它两者高很多；但是当连接数较少并且都十分活跃的情况下，由于epoll需要很多回调，因此性能可能低于其它两者。\n','<p>当连接数较多并且有很多的不活跃连接时，epoll的效率比其它两者高很多；但是当连接数较少并且都十分活跃的情况下，由于epoll需要很多回调，因此性能可能低于其它两者。</p>','{\"ops\": [{\"insert\": \"\\u5f53\\u8fde\\u63a5\\u6570\\u8f83\\u591a\\u5e76\\u4e14\\u6709\\u5f88\\u591a\\u7684\\u4e0d\\u6d3b\\u8dc3\\u8fde\\u63a5\\u65f6\\uff0cepoll\\u7684\\u6548\\u7387\\u6bd4\\u5176\\u5b83\\u4e24\\u8005\\u9ad8\\u5f88\\u591a\\uff1b\\u4f46\\u662f\\u5f53\\u8fde\\u63a5\\u6570\\u8f83\\u5c11\\u5e76\\u4e14\\u90fd\\u5341\\u5206\\u6d3b\\u8dc3\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u7531\\u4e8eepoll\\u9700\\u8981\\u5f88\\u591a\\u56de\\u8c03\\uff0c\\u56e0\\u6b64\\u6027\\u80fd\\u53ef\\u80fd\\u4f4e\\u4e8e\\u5176\\u5b83\\u4e24\\u8005\\u3002\\n\"}]}','white','2020-08-14 12:14:20'),(244,'什么是文件描述符？','文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。\n\n内核通过文件描述符来访问文件。文件描述符指向一个文件。\n','<p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。</p><p><br></p><p>内核通过文件描述符来访问文件。文件描述符指向一个文件。</p>','{\"ops\": [{\"insert\": \"\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u5728\\u5f62\\u5f0f\\u4e0a\\u662f\\u4e00\\u4e2a\\u975e\\u8d1f\\u6574\\u6570\\u3002\\u5b9e\\u9645\\u4e0a\\uff0c\\u5b83\\u662f\\u4e00\\u4e2a\\u7d22\\u5f15\\u503c\\uff0c\\u6307\\u5411\\u5185\\u6838\\u4e3a\\u6bcf\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u6240\\u7ef4\\u62a4\\u7684\\u8be5\\u8fdb\\u7a0b\\u6253\\u5f00\\u6587\\u4ef6\\u7684\\u8bb0\\u5f55\\u8868\\u3002\\u5f53\\u7a0b\\u5e8f\\u6253\\u5f00\\u4e00\\u4e2a\\u73b0\\u6709\\u6587\\u4ef6\\u6216\\u8005\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u6587\\u4ef6\\u65f6\\uff0c\\u5185\\u6838\\u5411\\u8fdb\\u7a0b\\u8fd4\\u56de\\u4e00\\u4e2a\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u3002\\n\\n\\u5185\\u6838\\u901a\\u8fc7\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u6765\\u8bbf\\u95ee\\u6587\\u4ef6\\u3002\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u6307\\u5411\\u4e00\\u4e2a\\u6587\\u4ef6\\u3002\\n\"}]}','white','2020-08-14 12:14:52'),(245,'什么是水平触发？什么是边缘触发？','- 水平触发（LT，Level Trigger）模式下，只要一个文件描述符就绪，就会触发通知，如果用户程序没有一次性把数据读写完，下次还会通知；\n- 边缘触发（ET，Edge Trigger）模式下，当描述符从未就绪变为就绪时通知一次，之后不会再通知，直到再次从未就绪变为就绪（缓冲区从不可读/写变为可读/写）。\n- 区别：边缘触发效率更高，减少了被重复触发的次数，函数不会返回大量用户程序可能不需要的文件描述符。\n- 为什么边缘触发一定要用非阻塞（non-block）IO：避免由于一个描述符的阻塞读/阻塞写操作让处理其它描述符的任务出现饥饿状态。\n','<p>- 水平触发（LT，Level Trigger）模式下，只要一个文件描述符就绪，就会触发通知，如果用户程序没有一次性把数据读写完，下次还会通知；</p><p>- 边缘触发（ET，Edge Trigger）模式下，当描述符从未就绪变为就绪时通知一次，之后不会再通知，直到再次从未就绪变为就绪（缓冲区从不可读/写变为可读/写）。</p><p>- 区别：边缘触发效率更高，减少了被重复触发的次数，函数不会返回大量用户程序可能不需要的文件描述符。</p><p>- 为什么边缘触发一定要用非阻塞（non-block）IO：避免由于一个描述符的阻塞读/阻塞写操作让处理其它描述符的任务出现饥饿状态。</p>','{\"ops\": [{\"insert\": \"- \\u6c34\\u5e73\\u89e6\\u53d1\\uff08LT\\uff0cLevel Trigger\\uff09\\u6a21\\u5f0f\\u4e0b\\uff0c\\u53ea\\u8981\\u4e00\\u4e2a\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u5c31\\u7eea\\uff0c\\u5c31\\u4f1a\\u89e6\\u53d1\\u901a\\u77e5\\uff0c\\u5982\\u679c\\u7528\\u6237\\u7a0b\\u5e8f\\u6ca1\\u6709\\u4e00\\u6b21\\u6027\\u628a\\u6570\\u636e\\u8bfb\\u5199\\u5b8c\\uff0c\\u4e0b\\u6b21\\u8fd8\\u4f1a\\u901a\\u77e5\\uff1b\\n- \\u8fb9\\u7f18\\u89e6\\u53d1\\uff08ET\\uff0cEdge Trigger\\uff09\\u6a21\\u5f0f\\u4e0b\\uff0c\\u5f53\\u63cf\\u8ff0\\u7b26\\u4ece\\u672a\\u5c31\\u7eea\\u53d8\\u4e3a\\u5c31\\u7eea\\u65f6\\u901a\\u77e5\\u4e00\\u6b21\\uff0c\\u4e4b\\u540e\\u4e0d\\u4f1a\\u518d\\u901a\\u77e5\\uff0c\\u76f4\\u5230\\u518d\\u6b21\\u4ece\\u672a\\u5c31\\u7eea\\u53d8\\u4e3a\\u5c31\\u7eea\\uff08\\u7f13\\u51b2\\u533a\\u4ece\\u4e0d\\u53ef\\u8bfb/\\u5199\\u53d8\\u4e3a\\u53ef\\u8bfb/\\u5199\\uff09\\u3002\\n- \\u533a\\u522b\\uff1a\\u8fb9\\u7f18\\u89e6\\u53d1\\u6548\\u7387\\u66f4\\u9ad8\\uff0c\\u51cf\\u5c11\\u4e86\\u88ab\\u91cd\\u590d\\u89e6\\u53d1\\u7684\\u6b21\\u6570\\uff0c\\u51fd\\u6570\\u4e0d\\u4f1a\\u8fd4\\u56de\\u5927\\u91cf\\u7528\\u6237\\u7a0b\\u5e8f\\u53ef\\u80fd\\u4e0d\\u9700\\u8981\\u7684\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u3002\\n- \\u4e3a\\u4ec0\\u4e48\\u8fb9\\u7f18\\u89e6\\u53d1\\u4e00\\u5b9a\\u8981\\u7528\\u975e\\u963b\\u585e\\uff08non-block\\uff09IO\\uff1a\\u907f\\u514d\\u7531\\u4e8e\\u4e00\\u4e2a\\u63cf\\u8ff0\\u7b26\\u7684\\u963b\\u585e\\u8bfb/\\u963b\\u585e\\u5199\\u64cd\\u4f5c\\u8ba9\\u5904\\u7406\\u5176\\u5b83\\u63cf\\u8ff0\\u7b26\\u7684\\u4efb\\u52a1\\u51fa\\u73b0\\u9965\\u997f\\u72b6\\u6001\\u3002\\n\"}]}','white','2020-08-14 12:15:08'),(246,'有哪些常见的IO模型？','- 同步阻塞IO（Blocking IO）：用户线程发起IO读/写操作之后，线程阻塞，直到可以开始处理数据；对CPU资源的利用率不够；\n- 同步非阻塞IO（Non-blocking IO）：发起IO请求之后可以立即返回，如果没有就绪的数据，需要不断地发起IO请求直到数据就绪；不断重复请求消耗了大量的CPU资源；\n- IO多路复用\n- 异步IO（Asynchronous IO）：用户线程发出IO请求之后，继续执行，由内核进行数据的读取并放在用户指定的缓冲区内，在IO完成之后通知用户线程直接使用。\n','<p>- 同步阻塞IO（Blocking IO）：用户线程发起IO读/写操作之后，线程阻塞，直到可以开始处理数据；对CPU资源的利用率不够；</p><p>- 同步非阻塞IO（Non-blocking IO）：发起IO请求之后可以立即返回，如果没有就绪的数据，需要不断地发起IO请求直到数据就绪；不断重复请求消耗了大量的CPU资源；</p><p>- IO多路复用</p><p>- 异步IO（Asynchronous IO）：用户线程发出IO请求之后，继续执行，由内核进行数据的读取并放在用户指定的缓冲区内，在IO完成之后通知用户线程直接使用。</p>','{\"ops\": [{\"insert\": \"- \\u540c\\u6b65\\u963b\\u585eIO\\uff08Blocking IO\\uff09\\uff1a\\u7528\\u6237\\u7ebf\\u7a0b\\u53d1\\u8d77IO\\u8bfb/\\u5199\\u64cd\\u4f5c\\u4e4b\\u540e\\uff0c\\u7ebf\\u7a0b\\u963b\\u585e\\uff0c\\u76f4\\u5230\\u53ef\\u4ee5\\u5f00\\u59cb\\u5904\\u7406\\u6570\\u636e\\uff1b\\u5bf9CPU\\u8d44\\u6e90\\u7684\\u5229\\u7528\\u7387\\u4e0d\\u591f\\uff1b\\n- \\u540c\\u6b65\\u975e\\u963b\\u585eIO\\uff08Non-blocking IO\\uff09\\uff1a\\u53d1\\u8d77IO\\u8bf7\\u6c42\\u4e4b\\u540e\\u53ef\\u4ee5\\u7acb\\u5373\\u8fd4\\u56de\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5c31\\u7eea\\u7684\\u6570\\u636e\\uff0c\\u9700\\u8981\\u4e0d\\u65ad\\u5730\\u53d1\\u8d77IO\\u8bf7\\u6c42\\u76f4\\u5230\\u6570\\u636e\\u5c31\\u7eea\\uff1b\\u4e0d\\u65ad\\u91cd\\u590d\\u8bf7\\u6c42\\u6d88\\u8017\\u4e86\\u5927\\u91cf\\u7684CPU\\u8d44\\u6e90\\uff1b\\n- IO\\u591a\\u8def\\u590d\\u7528\\n- \\u5f02\\u6b65IO\\uff08Asynchronous IO\\uff09\\uff1a\\u7528\\u6237\\u7ebf\\u7a0b\\u53d1\\u51faIO\\u8bf7\\u6c42\\u4e4b\\u540e\\uff0c\\u7ee7\\u7eed\\u6267\\u884c\\uff0c\\u7531\\u5185\\u6838\\u8fdb\\u884c\\u6570\\u636e\\u7684\\u8bfb\\u53d6\\u5e76\\u653e\\u5728\\u7528\\u6237\\u6307\\u5b9a\\u7684\\u7f13\\u51b2\\u533a\\u5185\\uff0c\\u5728IO\\u5b8c\\u6210\\u4e4b\\u540e\\u901a\\u77e5\\u7528\\u6237\\u7ebf\\u7a0b\\u76f4\\u63a5\\u4f7f\\u7528\\u3002\\n\"}]}','white','2020-08-14 12:15:23'),(247,'什么是用户态和内核态？','为了限制不同程序的访问能力，防止一些程序访问其它程序的内存数据，CPU划分了用户态和内核态两个权限等级。\n\n- 用户态只能受限地访问内存，且不允许访问外围设备，没有占用CPU的能力，CPU资源可以被其它程序获取；\n- 内核态可以访问内存所有数据以及外围设备，也可以进行程序的切换。\n\n所有用户程序都运行在用户态，但有时需要进行一些内核态的操作，比如从硬盘或者键盘读数据，这时就需要进行系统调用，使用**陷阱指令**，CPU切换到内核态，执行相应的服务，再切换为用户态并返回系统调用的结果。\n','<p>为了限制不同程序的访问能力，防止一些程序访问其它程序的内存数据，CPU划分了用户态和内核态两个权限等级。</p><p><br></p><p>- 用户态只能受限地访问内存，且不允许访问外围设备，没有占用CPU的能力，CPU资源可以被其它程序获取；</p><p>- 内核态可以访问内存所有数据以及外围设备，也可以进行程序的切换。</p><p><br></p><p>所有用户程序都运行在用户态，但有时需要进行一些内核态的操作，比如从硬盘或者键盘读数据，这时就需要进行系统调用，使用**陷阱指令**，CPU切换到内核态，执行相应的服务，再切换为用户态并返回系统调用的结果。</p>','{\"ops\": [{\"insert\": \"\\u4e3a\\u4e86\\u9650\\u5236\\u4e0d\\u540c\\u7a0b\\u5e8f\\u7684\\u8bbf\\u95ee\\u80fd\\u529b\\uff0c\\u9632\\u6b62\\u4e00\\u4e9b\\u7a0b\\u5e8f\\u8bbf\\u95ee\\u5176\\u5b83\\u7a0b\\u5e8f\\u7684\\u5185\\u5b58\\u6570\\u636e\\uff0cCPU\\u5212\\u5206\\u4e86\\u7528\\u6237\\u6001\\u548c\\u5185\\u6838\\u6001\\u4e24\\u4e2a\\u6743\\u9650\\u7b49\\u7ea7\\u3002\\n\\n- \\u7528\\u6237\\u6001\\u53ea\\u80fd\\u53d7\\u9650\\u5730\\u8bbf\\u95ee\\u5185\\u5b58\\uff0c\\u4e14\\u4e0d\\u5141\\u8bb8\\u8bbf\\u95ee\\u5916\\u56f4\\u8bbe\\u5907\\uff0c\\u6ca1\\u6709\\u5360\\u7528CPU\\u7684\\u80fd\\u529b\\uff0cCPU\\u8d44\\u6e90\\u53ef\\u4ee5\\u88ab\\u5176\\u5b83\\u7a0b\\u5e8f\\u83b7\\u53d6\\uff1b\\n- \\u5185\\u6838\\u6001\\u53ef\\u4ee5\\u8bbf\\u95ee\\u5185\\u5b58\\u6240\\u6709\\u6570\\u636e\\u4ee5\\u53ca\\u5916\\u56f4\\u8bbe\\u5907\\uff0c\\u4e5f\\u53ef\\u4ee5\\u8fdb\\u884c\\u7a0b\\u5e8f\\u7684\\u5207\\u6362\\u3002\\n\\n\\u6240\\u6709\\u7528\\u6237\\u7a0b\\u5e8f\\u90fd\\u8fd0\\u884c\\u5728\\u7528\\u6237\\u6001\\uff0c\\u4f46\\u6709\\u65f6\\u9700\\u8981\\u8fdb\\u884c\\u4e00\\u4e9b\\u5185\\u6838\\u6001\\u7684\\u64cd\\u4f5c\\uff0c\\u6bd4\\u5982\\u4ece\\u786c\\u76d8\\u6216\\u8005\\u952e\\u76d8\\u8bfb\\u6570\\u636e\\uff0c\\u8fd9\\u65f6\\u5c31\\u9700\\u8981\\u8fdb\\u884c\\u7cfb\\u7edf\\u8c03\\u7528\\uff0c\\u4f7f\\u7528**\\u9677\\u9631\\u6307\\u4ee4**\\uff0cCPU\\u5207\\u6362\\u5230\\u5185\\u6838\\u6001\\uff0c\\u6267\\u884c\\u76f8\\u5e94\\u7684\\u670d\\u52a1\\uff0c\\u518d\\u5207\\u6362\\u4e3a\\u7528\\u6237\\u6001\\u5e76\\u8fd4\\u56de\\u7cfb\\u7edf\\u8c03\\u7528\\u7684\\u7ed3\\u679c\\u3002\\n\"}]}','white','2020-08-14 12:15:37'),(248,'为什么要分用户态和内核态？','- 安全性：防止用户程序恶意或者不小心破坏系统/内存/硬件资源；\n- 封装性：用户程序不需要实现更加底层的代码；\n- 利于调度：如果多个用户程序都在等待键盘输入，这时就需要进行调度；统一交给操作系统调度更加方便。\n','<p>- 安全性：防止用户程序恶意或者不小心破坏系统/内存/硬件资源；</p><p>- 封装性：用户程序不需要实现更加底层的代码；</p><p>- 利于调度：如果多个用户程序都在等待键盘输入，这时就需要进行调度；统一交给操作系统调度更加方便。</p>','{\"ops\": [{\"insert\": \"- \\u5b89\\u5168\\u6027\\uff1a\\u9632\\u6b62\\u7528\\u6237\\u7a0b\\u5e8f\\u6076\\u610f\\u6216\\u8005\\u4e0d\\u5c0f\\u5fc3\\u7834\\u574f\\u7cfb\\u7edf/\\u5185\\u5b58/\\u786c\\u4ef6\\u8d44\\u6e90\\uff1b\\n- \\u5c01\\u88c5\\u6027\\uff1a\\u7528\\u6237\\u7a0b\\u5e8f\\u4e0d\\u9700\\u8981\\u5b9e\\u73b0\\u66f4\\u52a0\\u5e95\\u5c42\\u7684\\u4ee3\\u7801\\uff1b\\n- \\u5229\\u4e8e\\u8c03\\u5ea6\\uff1a\\u5982\\u679c\\u591a\\u4e2a\\u7528\\u6237\\u7a0b\\u5e8f\\u90fd\\u5728\\u7b49\\u5f85\\u952e\\u76d8\\u8f93\\u5165\\uff0c\\u8fd9\\u65f6\\u5c31\\u9700\\u8981\\u8fdb\\u884c\\u8c03\\u5ea6\\uff1b\\u7edf\\u4e00\\u4ea4\\u7ed9\\u64cd\\u4f5c\\u7cfb\\u7edf\\u8c03\\u5ea6\\u66f4\\u52a0\\u65b9\\u4fbf\\u3002\\n\"}]}','white','2020-08-14 12:15:56'),(249,'如何从用户态切换到内核态？','- 系统调用：比如读取命令行输入。本质上还是通过中断实现\n- 用户程序发生异常时：比如缺页异常\n- 外围设备的中断：外围设备完成用户请求的操作之后，会向CPU发出中断信号，这时CPU会转去处理对应的中断处理程序\n','<p>- 系统调用：比如读取命令行输入。本质上还是通过中断实现</p><p>- 用户程序发生异常时：比如缺页异常</p><p>- 外围设备的中断：外围设备完成用户请求的操作之后，会向CPU发出中断信号，这时CPU会转去处理对应的中断处理程序</p>','{\"ops\": [{\"insert\": \"- \\u7cfb\\u7edf\\u8c03\\u7528\\uff1a\\u6bd4\\u5982\\u8bfb\\u53d6\\u547d\\u4ee4\\u884c\\u8f93\\u5165\\u3002\\u672c\\u8d28\\u4e0a\\u8fd8\\u662f\\u901a\\u8fc7\\u4e2d\\u65ad\\u5b9e\\u73b0\\n- \\u7528\\u6237\\u7a0b\\u5e8f\\u53d1\\u751f\\u5f02\\u5e38\\u65f6\\uff1a\\u6bd4\\u5982\\u7f3a\\u9875\\u5f02\\u5e38\\n- \\u5916\\u56f4\\u8bbe\\u5907\\u7684\\u4e2d\\u65ad\\uff1a\\u5916\\u56f4\\u8bbe\\u5907\\u5b8c\\u6210\\u7528\\u6237\\u8bf7\\u6c42\\u7684\\u64cd\\u4f5c\\u4e4b\\u540e\\uff0c\\u4f1a\\u5411CPU\\u53d1\\u51fa\\u4e2d\\u65ad\\u4fe1\\u53f7\\uff0c\\u8fd9\\u65f6CPU\\u4f1a\\u8f6c\\u53bb\\u5904\\u7406\\u5bf9\\u5e94\\u7684\\u4e2d\\u65ad\\u5904\\u7406\\u7a0b\\u5e8f\\n\"}]}','white','2020-08-14 12:16:08'),(250,'什么是死锁？','在两个或者多个并发进程中，每个进程持有某种资源而又等待其它进程释放它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁(deadlock)。\n','<p>在两个或者多个并发进程中，每个进程持有某种资源而又等待其它进程释放它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁(deadlock)。</p>','{\"ops\": [{\"insert\": \"\\u5728\\u4e24\\u4e2a\\u6216\\u8005\\u591a\\u4e2a\\u5e76\\u53d1\\u8fdb\\u7a0b\\u4e2d\\uff0c\\u6bcf\\u4e2a\\u8fdb\\u7a0b\\u6301\\u6709\\u67d0\\u79cd\\u8d44\\u6e90\\u800c\\u53c8\\u7b49\\u5f85\\u5176\\u5b83\\u8fdb\\u7a0b\\u91ca\\u653e\\u5b83\\u4eec\\u73b0\\u5728\\u4fdd\\u6301\\u7740\\u7684\\u8d44\\u6e90\\uff0c\\u5728\\u672a\\u6539\\u53d8\\u8fd9\\u79cd\\u72b6\\u6001\\u4e4b\\u524d\\u90fd\\u4e0d\\u80fd\\u5411\\u524d\\u63a8\\u8fdb\\uff0c\\u79f0\\u8fd9\\u4e00\\u7ec4\\u8fdb\\u7a0b\\u4ea7\\u751f\\u4e86\\u6b7b\\u9501(deadlock)\\u3002\\n\"}]}','white','2020-08-14 12:16:32'),(251,'死锁产生的必要条件？','- **互斥**：一个资源一次只能被一个进程使用；\n- **占有并等待**：一个进程至少占有一个资源，并在等待另一个被其它进程占用的资源；\n- **非抢占**：已经分配给一个进程的资源不能被强制性抢占，只能由进程完成任务之后自愿释放；\n- **循环等待**：若干进程之间形成一种头尾相接的环形等待资源关系，该环路中的每个进程都在等待下一个进程所占有的资源。\n','<p>- **互斥**：一个资源一次只能被一个进程使用；</p><p>- **占有并等待**：一个进程至少占有一个资源，并在等待另一个被其它进程占用的资源；</p><p>- **非抢占**：已经分配给一个进程的资源不能被强制性抢占，只能由进程完成任务之后自愿释放；</p><p>- **循环等待**：若干进程之间形成一种头尾相接的环形等待资源关系，该环路中的每个进程都在等待下一个进程所占有的资源。</p>','{\"ops\": [{\"insert\": \"- **\\u4e92\\u65a5**\\uff1a\\u4e00\\u4e2a\\u8d44\\u6e90\\u4e00\\u6b21\\u53ea\\u80fd\\u88ab\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u4f7f\\u7528\\uff1b\\n- **\\u5360\\u6709\\u5e76\\u7b49\\u5f85**\\uff1a\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u81f3\\u5c11\\u5360\\u6709\\u4e00\\u4e2a\\u8d44\\u6e90\\uff0c\\u5e76\\u5728\\u7b49\\u5f85\\u53e6\\u4e00\\u4e2a\\u88ab\\u5176\\u5b83\\u8fdb\\u7a0b\\u5360\\u7528\\u7684\\u8d44\\u6e90\\uff1b\\n- **\\u975e\\u62a2\\u5360**\\uff1a\\u5df2\\u7ecf\\u5206\\u914d\\u7ed9\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u7684\\u8d44\\u6e90\\u4e0d\\u80fd\\u88ab\\u5f3a\\u5236\\u6027\\u62a2\\u5360\\uff0c\\u53ea\\u80fd\\u7531\\u8fdb\\u7a0b\\u5b8c\\u6210\\u4efb\\u52a1\\u4e4b\\u540e\\u81ea\\u613f\\u91ca\\u653e\\uff1b\\n- **\\u5faa\\u73af\\u7b49\\u5f85**\\uff1a\\u82e5\\u5e72\\u8fdb\\u7a0b\\u4e4b\\u95f4\\u5f62\\u6210\\u4e00\\u79cd\\u5934\\u5c3e\\u76f8\\u63a5\\u7684\\u73af\\u5f62\\u7b49\\u5f85\\u8d44\\u6e90\\u5173\\u7cfb\\uff0c\\u8be5\\u73af\\u8def\\u4e2d\\u7684\\u6bcf\\u4e2a\\u8fdb\\u7a0b\\u90fd\\u5728\\u7b49\\u5f85\\u4e0b\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u6240\\u5360\\u6709\\u7684\\u8d44\\u6e90\\u3002\\n\"}]}','white','2020-08-14 12:16:43'),(252,'死锁有哪些处理方法？- 鸵鸟策略','直接忽略死锁。因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。\n','<p>直接忽略死锁。因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。</p>','{\"ops\": [{\"insert\": \"\\u76f4\\u63a5\\u5ffd\\u7565\\u6b7b\\u9501\\u3002\\u56e0\\u4e3a\\u89e3\\u51b3\\u6b7b\\u9501\\u95ee\\u9898\\u7684\\u4ee3\\u4ef7\\u5f88\\u9ad8\\uff0c\\u56e0\\u6b64\\u9e35\\u9e1f\\u7b56\\u7565\\u8fd9\\u79cd\\u4e0d\\u91c7\\u53d6\\u4efb\\u52a1\\u63aa\\u65bd\\u7684\\u65b9\\u6848\\u4f1a\\u83b7\\u5f97\\u66f4\\u9ad8\\u7684\\u6027\\u80fd\\u3002\\u5f53\\u53d1\\u751f\\u6b7b\\u9501\\u65f6\\u4e0d\\u4f1a\\u5bf9\\u7528\\u6237\\u9020\\u6210\\u591a\\u5927\\u5f71\\u54cd\\uff0c\\u6216\\u53d1\\u751f\\u6b7b\\u9501\\u7684\\u6982\\u7387\\u5f88\\u4f4e\\uff0c\\u53ef\\u4ee5\\u91c7\\u7528\\u9e35\\u9e1f\\u7b56\\u7565\\u3002\\n\"}]}','white','2020-08-14 12:17:41'),(253,'死锁有哪些处理方法？- 死锁预防','基本思想是破坏形成死锁的四个必要条件：\n\n- 破坏互斥条件：允许某些资源同时被多个进程访问。但是有些资源本身并不具有这种属性，因此这种方案实用性有限；\n- 破坏占有并等待条件：\n  - 实行资源预先分配策略（当一个进程开始运行之前，必须一次性向系统申请它所需要的全部资源，否则不运行）；\n  - 或者只允许进程在没有占用资源的时候才能申请资源（申请资源前先释放占有的资源）；\n  - 缺点：很多时候无法预知一个进程所需的全部资源；同时，会降低资源利用率，降低系统的并发性；\n- 破坏非抢占条件：允许进程强行抢占被其它进程占有的资源。会降低系统性能；\n- 破坏循环等待条件：对所有资源统一编号，所有进程对资源的请求必须按照序号递增的顺序提出，即只有占有了编号较小的资源才能申请编号较大的资源。这样避免了占有大号资源的进程去申请小号资源。\n','<p>基本思想是破坏形成死锁的四个必要条件：</p><p><br></p><p>- 破坏互斥条件：允许某些资源同时被多个进程访问。但是有些资源本身并不具有这种属性，因此这种方案实用性有限；</p><p>- 破坏占有并等待条件：</p><p>  - 实行资源预先分配策略（当一个进程开始运行之前，必须一次性向系统申请它所需要的全部资源，否则不运行）；</p><p>  - 或者只允许进程在没有占用资源的时候才能申请资源（申请资源前先释放占有的资源）；</p><p>  - 缺点：很多时候无法预知一个进程所需的全部资源；同时，会降低资源利用率，降低系统的并发性；</p><p>- 破坏非抢占条件：允许进程强行抢占被其它进程占有的资源。会降低系统性能；</p><p>- 破坏循环等待条件：对所有资源统一编号，所有进程对资源的请求必须按照序号递增的顺序提出，即只有占有了编号较小的资源才能申请编号较大的资源。这样避免了占有大号资源的进程去申请小号资源。</p>','{\"ops\": [{\"insert\": \"\\u57fa\\u672c\\u601d\\u60f3\\u662f\\u7834\\u574f\\u5f62\\u6210\\u6b7b\\u9501\\u7684\\u56db\\u4e2a\\u5fc5\\u8981\\u6761\\u4ef6\\uff1a\\n\\n- \\u7834\\u574f\\u4e92\\u65a5\\u6761\\u4ef6\\uff1a\\u5141\\u8bb8\\u67d0\\u4e9b\\u8d44\\u6e90\\u540c\\u65f6\\u88ab\\u591a\\u4e2a\\u8fdb\\u7a0b\\u8bbf\\u95ee\\u3002\\u4f46\\u662f\\u6709\\u4e9b\\u8d44\\u6e90\\u672c\\u8eab\\u5e76\\u4e0d\\u5177\\u6709\\u8fd9\\u79cd\\u5c5e\\u6027\\uff0c\\u56e0\\u6b64\\u8fd9\\u79cd\\u65b9\\u6848\\u5b9e\\u7528\\u6027\\u6709\\u9650\\uff1b\\n- \\u7834\\u574f\\u5360\\u6709\\u5e76\\u7b49\\u5f85\\u6761\\u4ef6\\uff1a\\n  - \\u5b9e\\u884c\\u8d44\\u6e90\\u9884\\u5148\\u5206\\u914d\\u7b56\\u7565\\uff08\\u5f53\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u5f00\\u59cb\\u8fd0\\u884c\\u4e4b\\u524d\\uff0c\\u5fc5\\u987b\\u4e00\\u6b21\\u6027\\u5411\\u7cfb\\u7edf\\u7533\\u8bf7\\u5b83\\u6240\\u9700\\u8981\\u7684\\u5168\\u90e8\\u8d44\\u6e90\\uff0c\\u5426\\u5219\\u4e0d\\u8fd0\\u884c\\uff09\\uff1b\\n  - \\u6216\\u8005\\u53ea\\u5141\\u8bb8\\u8fdb\\u7a0b\\u5728\\u6ca1\\u6709\\u5360\\u7528\\u8d44\\u6e90\\u7684\\u65f6\\u5019\\u624d\\u80fd\\u7533\\u8bf7\\u8d44\\u6e90\\uff08\\u7533\\u8bf7\\u8d44\\u6e90\\u524d\\u5148\\u91ca\\u653e\\u5360\\u6709\\u7684\\u8d44\\u6e90\\uff09\\uff1b\\n  - \\u7f3a\\u70b9\\uff1a\\u5f88\\u591a\\u65f6\\u5019\\u65e0\\u6cd5\\u9884\\u77e5\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u6240\\u9700\\u7684\\u5168\\u90e8\\u8d44\\u6e90\\uff1b\\u540c\\u65f6\\uff0c\\u4f1a\\u964d\\u4f4e\\u8d44\\u6e90\\u5229\\u7528\\u7387\\uff0c\\u964d\\u4f4e\\u7cfb\\u7edf\\u7684\\u5e76\\u53d1\\u6027\\uff1b\\n- \\u7834\\u574f\\u975e\\u62a2\\u5360\\u6761\\u4ef6\\uff1a\\u5141\\u8bb8\\u8fdb\\u7a0b\\u5f3a\\u884c\\u62a2\\u5360\\u88ab\\u5176\\u5b83\\u8fdb\\u7a0b\\u5360\\u6709\\u7684\\u8d44\\u6e90\\u3002\\u4f1a\\u964d\\u4f4e\\u7cfb\\u7edf\\u6027\\u80fd\\uff1b\\n- \\u7834\\u574f\\u5faa\\u73af\\u7b49\\u5f85\\u6761\\u4ef6\\uff1a\\u5bf9\\u6240\\u6709\\u8d44\\u6e90\\u7edf\\u4e00\\u7f16\\u53f7\\uff0c\\u6240\\u6709\\u8fdb\\u7a0b\\u5bf9\\u8d44\\u6e90\\u7684\\u8bf7\\u6c42\\u5fc5\\u987b\\u6309\\u7167\\u5e8f\\u53f7\\u9012\\u589e\\u7684\\u987a\\u5e8f\\u63d0\\u51fa\\uff0c\\u5373\\u53ea\\u6709\\u5360\\u6709\\u4e86\\u7f16\\u53f7\\u8f83\\u5c0f\\u7684\\u8d44\\u6e90\\u624d\\u80fd\\u7533\\u8bf7\\u7f16\\u53f7\\u8f83\\u5927\\u7684\\u8d44\\u6e90\\u3002\\u8fd9\\u6837\\u907f\\u514d\\u4e86\\u5360\\u6709\\u5927\\u53f7\\u8d44\\u6e90\\u7684\\u8fdb\\u7a0b\\u53bb\\u7533\\u8bf7\\u5c0f\\u53f7\\u8d44\\u6e90\\u3002\\n\"}]}','white','2020-08-14 12:18:02'),(254,'死锁有哪些处理方法？ - 死锁避免','动态地检测资源分配状态，以确保系统处于安全状态，只有处于安全状态时才会进行资源的分配。所谓安全状态是指：即使所有进程突然请求需要的所有资源，也能存在某种对进程的资源分配顺序，使得每一个进程运行完毕。\n','<p>动态地检测资源分配状态，以确保系统处于安全状态，只有处于安全状态时才会进行资源的分配。所谓安全状态是指：即使所有进程突然请求需要的所有资源，也能存在某种对进程的资源分配顺序，使得每一个进程运行完毕。</p>','{\"ops\": [{\"insert\": \"\\u52a8\\u6001\\u5730\\u68c0\\u6d4b\\u8d44\\u6e90\\u5206\\u914d\\u72b6\\u6001\\uff0c\\u4ee5\\u786e\\u4fdd\\u7cfb\\u7edf\\u5904\\u4e8e\\u5b89\\u5168\\u72b6\\u6001\\uff0c\\u53ea\\u6709\\u5904\\u4e8e\\u5b89\\u5168\\u72b6\\u6001\\u65f6\\u624d\\u4f1a\\u8fdb\\u884c\\u8d44\\u6e90\\u7684\\u5206\\u914d\\u3002\\u6240\\u8c13\\u5b89\\u5168\\u72b6\\u6001\\u662f\\u6307\\uff1a\\u5373\\u4f7f\\u6240\\u6709\\u8fdb\\u7a0b\\u7a81\\u7136\\u8bf7\\u6c42\\u9700\\u8981\\u7684\\u6240\\u6709\\u8d44\\u6e90\\uff0c\\u4e5f\\u80fd\\u5b58\\u5728\\u67d0\\u79cd\\u5bf9\\u8fdb\\u7a0b\\u7684\\u8d44\\u6e90\\u5206\\u914d\\u987a\\u5e8f\\uff0c\\u4f7f\\u5f97\\u6bcf\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u8fd0\\u884c\\u5b8c\\u6bd5\\u3002\\n\"}]}','white','2020-08-14 12:18:29'),(255,'死锁有哪些处理方法？- 死锁解除','> 如何检测死锁：检测有向图是否存在环；或者使用类似死锁避免的检测算法。\n\n死锁解除的方法：\n\n- 利用抢占：挂起某些进程，并抢占它的资源。但应防止某些进程被长时间挂起而处于饥饿状态；\n- 利用回滚：让某些进程回退到足以解除死锁的地步，进程回退时自愿释放资源。要求系统保持进程的历史信息，设置还原点；\n- 利用杀死进程：强制杀死某些进程直到死锁解除为止，可以按照优先级进行。\n','<p>&gt; 如何检测死锁：检测有向图是否存在环；或者使用类似死锁避免的检测算法。</p><p><br></p><p>死锁解除的方法：</p><p><br></p><p>- 利用抢占：挂起某些进程，并抢占它的资源。但应防止某些进程被长时间挂起而处于饥饿状态；</p><p>- 利用回滚：让某些进程回退到足以解除死锁的地步，进程回退时自愿释放资源。要求系统保持进程的历史信息，设置还原点；</p><p>- 利用杀死进程：强制杀死某些进程直到死锁解除为止，可以按照优先级进行。</p>','{\"ops\": [{\"insert\": \"> \\u5982\\u4f55\\u68c0\\u6d4b\\u6b7b\\u9501\\uff1a\\u68c0\\u6d4b\\u6709\\u5411\\u56fe\\u662f\\u5426\\u5b58\\u5728\\u73af\\uff1b\\u6216\\u8005\\u4f7f\\u7528\\u7c7b\\u4f3c\\u6b7b\\u9501\\u907f\\u514d\\u7684\\u68c0\\u6d4b\\u7b97\\u6cd5\\u3002\\n\\n\\u6b7b\\u9501\\u89e3\\u9664\\u7684\\u65b9\\u6cd5\\uff1a\\n\\n- \\u5229\\u7528\\u62a2\\u5360\\uff1a\\u6302\\u8d77\\u67d0\\u4e9b\\u8fdb\\u7a0b\\uff0c\\u5e76\\u62a2\\u5360\\u5b83\\u7684\\u8d44\\u6e90\\u3002\\u4f46\\u5e94\\u9632\\u6b62\\u67d0\\u4e9b\\u8fdb\\u7a0b\\u88ab\\u957f\\u65f6\\u95f4\\u6302\\u8d77\\u800c\\u5904\\u4e8e\\u9965\\u997f\\u72b6\\u6001\\uff1b\\n- \\u5229\\u7528\\u56de\\u6eda\\uff1a\\u8ba9\\u67d0\\u4e9b\\u8fdb\\u7a0b\\u56de\\u9000\\u5230\\u8db3\\u4ee5\\u89e3\\u9664\\u6b7b\\u9501\\u7684\\u5730\\u6b65\\uff0c\\u8fdb\\u7a0b\\u56de\\u9000\\u65f6\\u81ea\\u613f\\u91ca\\u653e\\u8d44\\u6e90\\u3002\\u8981\\u6c42\\u7cfb\\u7edf\\u4fdd\\u6301\\u8fdb\\u7a0b\\u7684\\u5386\\u53f2\\u4fe1\\u606f\\uff0c\\u8bbe\\u7f6e\\u8fd8\\u539f\\u70b9\\uff1b\\n- \\u5229\\u7528\\u6740\\u6b7b\\u8fdb\\u7a0b\\uff1a\\u5f3a\\u5236\\u6740\\u6b7b\\u67d0\\u4e9b\\u8fdb\\u7a0b\\u76f4\\u5230\\u6b7b\\u9501\\u89e3\\u9664\\u4e3a\\u6b62\\uff0c\\u53ef\\u4ee5\\u6309\\u7167\\u4f18\\u5148\\u7ea7\\u8fdb\\u884c\\u3002\\n\"}]}','white','2020-08-14 12:18:56'),(256,'分页和分段有什么区别？','- 页式存储：用户空间划分为大小相等的部分称为页（page），内存空间划分为同样大小的区域称为页框，分配时以页为单位，按进程需要的页数分配，逻辑上相邻的页物理上不一定相邻；\n- 段式存储：用户进程地址空间按照自身逻辑关系划分为若干个段（segment）（如代码段，数据段，堆栈段），内存空间被动态划分为长度不同的区域，分配时以段为单位，每段在内存中占据连续空间，各段可以不相邻；\n- 段页式存储：用户进程先按段划分，段内再按页划分，内存划分和分配按页。\n\n区别：\n\n- 目的不同：分页的目的是管理内存，用于虚拟内存以获得更大的地址空间；分段的目的是满足用户的需要，使程序和数据可以被划分为逻辑上独立的地址空间；\n- 大小不同：段的大小不固定，由其所完成的功能决定；页的大小固定，由系统决定；\n- 地址空间维度不同：分段是二维地址空间（段号+段内偏移），分页是一维地址空间（每个进程一个页表/多级页表，通过一个逻辑地址就能找到对应的物理地址）；\n- 分段便于信息的保护和共享；分页的共享收到限制；\n- 碎片：分段没有内碎片，但会产生外碎片；分页没有外碎片，但会产生内碎片（一个页填不满）\n','<p>- 页式存储：用户空间划分为大小相等的部分称为页（page），内存空间划分为同样大小的区域称为页框，分配时以页为单位，按进程需要的页数分配，逻辑上相邻的页物理上不一定相邻；</p><p>- 段式存储：用户进程地址空间按照自身逻辑关系划分为若干个段（segment）（如代码段，数据段，堆栈段），内存空间被动态划分为长度不同的区域，分配时以段为单位，每段在内存中占据连续空间，各段可以不相邻；</p><p>- 段页式存储：用户进程先按段划分，段内再按页划分，内存划分和分配按页。</p><p><br></p><p>区别：</p><p><br></p><p>- 目的不同：分页的目的是管理内存，用于虚拟内存以获得更大的地址空间；分段的目的是满足用户的需要，使程序和数据可以被划分为逻辑上独立的地址空间；</p><p>- 大小不同：段的大小不固定，由其所完成的功能决定；页的大小固定，由系统决定；</p><p>- 地址空间维度不同：分段是二维地址空间（段号+段内偏移），分页是一维地址空间（每个进程一个页表/多级页表，通过一个逻辑地址就能找到对应的物理地址）；</p><p>- 分段便于信息的保护和共享；分页的共享收到限制；</p><p>- 碎片：分段没有内碎片，但会产生外碎片；分页没有外碎片，但会产生内碎片（一个页填不满）</p>','{\"ops\": [{\"insert\": \"- \\u9875\\u5f0f\\u5b58\\u50a8\\uff1a\\u7528\\u6237\\u7a7a\\u95f4\\u5212\\u5206\\u4e3a\\u5927\\u5c0f\\u76f8\\u7b49\\u7684\\u90e8\\u5206\\u79f0\\u4e3a\\u9875\\uff08page\\uff09\\uff0c\\u5185\\u5b58\\u7a7a\\u95f4\\u5212\\u5206\\u4e3a\\u540c\\u6837\\u5927\\u5c0f\\u7684\\u533a\\u57df\\u79f0\\u4e3a\\u9875\\u6846\\uff0c\\u5206\\u914d\\u65f6\\u4ee5\\u9875\\u4e3a\\u5355\\u4f4d\\uff0c\\u6309\\u8fdb\\u7a0b\\u9700\\u8981\\u7684\\u9875\\u6570\\u5206\\u914d\\uff0c\\u903b\\u8f91\\u4e0a\\u76f8\\u90bb\\u7684\\u9875\\u7269\\u7406\\u4e0a\\u4e0d\\u4e00\\u5b9a\\u76f8\\u90bb\\uff1b\\n- \\u6bb5\\u5f0f\\u5b58\\u50a8\\uff1a\\u7528\\u6237\\u8fdb\\u7a0b\\u5730\\u5740\\u7a7a\\u95f4\\u6309\\u7167\\u81ea\\u8eab\\u903b\\u8f91\\u5173\\u7cfb\\u5212\\u5206\\u4e3a\\u82e5\\u5e72\\u4e2a\\u6bb5\\uff08segment\\uff09\\uff08\\u5982\\u4ee3\\u7801\\u6bb5\\uff0c\\u6570\\u636e\\u6bb5\\uff0c\\u5806\\u6808\\u6bb5\\uff09\\uff0c\\u5185\\u5b58\\u7a7a\\u95f4\\u88ab\\u52a8\\u6001\\u5212\\u5206\\u4e3a\\u957f\\u5ea6\\u4e0d\\u540c\\u7684\\u533a\\u57df\\uff0c\\u5206\\u914d\\u65f6\\u4ee5\\u6bb5\\u4e3a\\u5355\\u4f4d\\uff0c\\u6bcf\\u6bb5\\u5728\\u5185\\u5b58\\u4e2d\\u5360\\u636e\\u8fde\\u7eed\\u7a7a\\u95f4\\uff0c\\u5404\\u6bb5\\u53ef\\u4ee5\\u4e0d\\u76f8\\u90bb\\uff1b\\n- \\u6bb5\\u9875\\u5f0f\\u5b58\\u50a8\\uff1a\\u7528\\u6237\\u8fdb\\u7a0b\\u5148\\u6309\\u6bb5\\u5212\\u5206\\uff0c\\u6bb5\\u5185\\u518d\\u6309\\u9875\\u5212\\u5206\\uff0c\\u5185\\u5b58\\u5212\\u5206\\u548c\\u5206\\u914d\\u6309\\u9875\\u3002\\n\\n\\u533a\\u522b\\uff1a\\n\\n- \\u76ee\\u7684\\u4e0d\\u540c\\uff1a\\u5206\\u9875\\u7684\\u76ee\\u7684\\u662f\\u7ba1\\u7406\\u5185\\u5b58\\uff0c\\u7528\\u4e8e\\u865a\\u62df\\u5185\\u5b58\\u4ee5\\u83b7\\u5f97\\u66f4\\u5927\\u7684\\u5730\\u5740\\u7a7a\\u95f4\\uff1b\\u5206\\u6bb5\\u7684\\u76ee\\u7684\\u662f\\u6ee1\\u8db3\\u7528\\u6237\\u7684\\u9700\\u8981\\uff0c\\u4f7f\\u7a0b\\u5e8f\\u548c\\u6570\\u636e\\u53ef\\u4ee5\\u88ab\\u5212\\u5206\\u4e3a\\u903b\\u8f91\\u4e0a\\u72ec\\u7acb\\u7684\\u5730\\u5740\\u7a7a\\u95f4\\uff1b\\n- \\u5927\\u5c0f\\u4e0d\\u540c\\uff1a\\u6bb5\\u7684\\u5927\\u5c0f\\u4e0d\\u56fa\\u5b9a\\uff0c\\u7531\\u5176\\u6240\\u5b8c\\u6210\\u7684\\u529f\\u80fd\\u51b3\\u5b9a\\uff1b\\u9875\\u7684\\u5927\\u5c0f\\u56fa\\u5b9a\\uff0c\\u7531\\u7cfb\\u7edf\\u51b3\\u5b9a\\uff1b\\n- \\u5730\\u5740\\u7a7a\\u95f4\\u7ef4\\u5ea6\\u4e0d\\u540c\\uff1a\\u5206\\u6bb5\\u662f\\u4e8c\\u7ef4\\u5730\\u5740\\u7a7a\\u95f4\\uff08\\u6bb5\\u53f7+\\u6bb5\\u5185\\u504f\\u79fb\\uff09\\uff0c\\u5206\\u9875\\u662f\\u4e00\\u7ef4\\u5730\\u5740\\u7a7a\\u95f4\\uff08\\u6bcf\\u4e2a\\u8fdb\\u7a0b\\u4e00\\u4e2a\\u9875\\u8868/\\u591a\\u7ea7\\u9875\\u8868\\uff0c\\u901a\\u8fc7\\u4e00\\u4e2a\\u903b\\u8f91\\u5730\\u5740\\u5c31\\u80fd\\u627e\\u5230\\u5bf9\\u5e94\\u7684\\u7269\\u7406\\u5730\\u5740\\uff09\\uff1b\\n- \\u5206\\u6bb5\\u4fbf\\u4e8e\\u4fe1\\u606f\\u7684\\u4fdd\\u62a4\\u548c\\u5171\\u4eab\\uff1b\\u5206\\u9875\\u7684\\u5171\\u4eab\\u6536\\u5230\\u9650\\u5236\\uff1b\\n- \\u788e\\u7247\\uff1a\\u5206\\u6bb5\\u6ca1\\u6709\\u5185\\u788e\\u7247\\uff0c\\u4f46\\u4f1a\\u4ea7\\u751f\\u5916\\u788e\\u7247\\uff1b\\u5206\\u9875\\u6ca1\\u6709\\u5916\\u788e\\u7247\\uff0c\\u4f46\\u4f1a\\u4ea7\\u751f\\u5185\\u788e\\u7247\\uff08\\u4e00\\u4e2a\\u9875\\u586b\\u4e0d\\u6ee1\\uff09\\n\"}]}','white','2020-08-14 12:19:11'),(257,'什么是虚拟内存？','每个程序都拥有自己的地址空间，这个地址空间被分成大小相等的页，这些页被映射到物理内存；但不需要所有的页都在物理内存中，当程序引用到不在物理内存中的页时，由操作系统将缺失的部分装入物理内存。这样，对于程序来说，逻辑上似乎有很大的内存空间，只是实际上有一部分是存储在磁盘上，因此叫做虚拟内存。\n\n虚拟内存的优点是让程序可以获得更多的可用内存。\n','<p>每个程序都拥有自己的地址空间，这个地址空间被分成大小相等的页，这些页被映射到物理内存；但不需要所有的页都在物理内存中，当程序引用到不在物理内存中的页时，由操作系统将缺失的部分装入物理内存。这样，对于程序来说，逻辑上似乎有很大的内存空间，只是实际上有一部分是存储在磁盘上，因此叫做虚拟内存。</p><p><br></p><p>虚拟内存的优点是让程序可以获得更多的可用内存。</p>','{\"ops\": [{\"insert\": \"\\u6bcf\\u4e2a\\u7a0b\\u5e8f\\u90fd\\u62e5\\u6709\\u81ea\\u5df1\\u7684\\u5730\\u5740\\u7a7a\\u95f4\\uff0c\\u8fd9\\u4e2a\\u5730\\u5740\\u7a7a\\u95f4\\u88ab\\u5206\\u6210\\u5927\\u5c0f\\u76f8\\u7b49\\u7684\\u9875\\uff0c\\u8fd9\\u4e9b\\u9875\\u88ab\\u6620\\u5c04\\u5230\\u7269\\u7406\\u5185\\u5b58\\uff1b\\u4f46\\u4e0d\\u9700\\u8981\\u6240\\u6709\\u7684\\u9875\\u90fd\\u5728\\u7269\\u7406\\u5185\\u5b58\\u4e2d\\uff0c\\u5f53\\u7a0b\\u5e8f\\u5f15\\u7528\\u5230\\u4e0d\\u5728\\u7269\\u7406\\u5185\\u5b58\\u4e2d\\u7684\\u9875\\u65f6\\uff0c\\u7531\\u64cd\\u4f5c\\u7cfb\\u7edf\\u5c06\\u7f3a\\u5931\\u7684\\u90e8\\u5206\\u88c5\\u5165\\u7269\\u7406\\u5185\\u5b58\\u3002\\u8fd9\\u6837\\uff0c\\u5bf9\\u4e8e\\u7a0b\\u5e8f\\u6765\\u8bf4\\uff0c\\u903b\\u8f91\\u4e0a\\u4f3c\\u4e4e\\u6709\\u5f88\\u5927\\u7684\\u5185\\u5b58\\u7a7a\\u95f4\\uff0c\\u53ea\\u662f\\u5b9e\\u9645\\u4e0a\\u6709\\u4e00\\u90e8\\u5206\\u662f\\u5b58\\u50a8\\u5728\\u78c1\\u76d8\\u4e0a\\uff0c\\u56e0\\u6b64\\u53eb\\u505a\\u865a\\u62df\\u5185\\u5b58\\u3002\\n\\n\\u865a\\u62df\\u5185\\u5b58\\u7684\\u4f18\\u70b9\\u662f\\u8ba9\\u7a0b\\u5e8f\\u53ef\\u4ee5\\u83b7\\u5f97\\u66f4\\u591a\\u7684\\u53ef\\u7528\\u5185\\u5b58\\u3002\\n\"}]}','white','2020-08-14 12:19:27'),(258,'如何进行地址空间到物理内存的映射？','**内存管理单元**（MMU）管理着逻辑地址和物理地址的转换，其中的页表（Page table）存储着页（逻辑地址）和页框（物理内存空间）的映射表，页表中还包含包含有效位（是在内存还是磁盘）、访问位（是否被访问过）、修改位（内存中是否被修改过）、保护位（只读还是可读写）。逻辑地址：页号+页内地址（偏移）；每个进程一个页表，放在内存，页表起始地址在PCB/寄存器中。\n','<p>**内存管理单元**（MMU）管理着逻辑地址和物理地址的转换，其中的页表（Page table）存储着页（逻辑地址）和页框（物理内存空间）的映射表，页表中还包含包含有效位（是在内存还是磁盘）、访问位（是否被访问过）、修改位（内存中是否被修改过）、保护位（只读还是可读写）。逻辑地址：页号+页内地址（偏移）；每个进程一个页表，放在内存，页表起始地址在PCB/寄存器中。</p>','{\"ops\": [{\"insert\": \"**\\u5185\\u5b58\\u7ba1\\u7406\\u5355\\u5143**\\uff08MMU\\uff09\\u7ba1\\u7406\\u7740\\u903b\\u8f91\\u5730\\u5740\\u548c\\u7269\\u7406\\u5730\\u5740\\u7684\\u8f6c\\u6362\\uff0c\\u5176\\u4e2d\\u7684\\u9875\\u8868\\uff08Page table\\uff09\\u5b58\\u50a8\\u7740\\u9875\\uff08\\u903b\\u8f91\\u5730\\u5740\\uff09\\u548c\\u9875\\u6846\\uff08\\u7269\\u7406\\u5185\\u5b58\\u7a7a\\u95f4\\uff09\\u7684\\u6620\\u5c04\\u8868\\uff0c\\u9875\\u8868\\u4e2d\\u8fd8\\u5305\\u542b\\u5305\\u542b\\u6709\\u6548\\u4f4d\\uff08\\u662f\\u5728\\u5185\\u5b58\\u8fd8\\u662f\\u78c1\\u76d8\\uff09\\u3001\\u8bbf\\u95ee\\u4f4d\\uff08\\u662f\\u5426\\u88ab\\u8bbf\\u95ee\\u8fc7\\uff09\\u3001\\u4fee\\u6539\\u4f4d\\uff08\\u5185\\u5b58\\u4e2d\\u662f\\u5426\\u88ab\\u4fee\\u6539\\u8fc7\\uff09\\u3001\\u4fdd\\u62a4\\u4f4d\\uff08\\u53ea\\u8bfb\\u8fd8\\u662f\\u53ef\\u8bfb\\u5199\\uff09\\u3002\\u903b\\u8f91\\u5730\\u5740\\uff1a\\u9875\\u53f7+\\u9875\\u5185\\u5730\\u5740\\uff08\\u504f\\u79fb\\uff09\\uff1b\\u6bcf\\u4e2a\\u8fdb\\u7a0b\\u4e00\\u4e2a\\u9875\\u8868\\uff0c\\u653e\\u5728\\u5185\\u5b58\\uff0c\\u9875\\u8868\\u8d77\\u59cb\\u5730\\u5740\\u5728PCB/\\u5bc4\\u5b58\\u5668\\u4e2d\\u3002\\n\"}]}','white','2020-08-14 12:19:37'),(259,'有哪些页面置换算法？','在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘中来腾出空间。页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。\n\n- **最佳页面置换算法**OPT（Optimal replacement algorithm）：置换以后不需要或者最远的将来才需要的页面，是一种理论上的算法，是最优策略；\n- **先进先出**FIFO：置换在内存中驻留时间最长的页面。缺点：有可能将那些经常被访问的页面也被换出，从而使缺页率升高；\n- **第二次机会算法**SCR：按FIFO选择某一页面，若其访问位为1，给第二次机会，并将访问位置0；\n- **时钟算法** Clock：SCR中需要将页面在链表中移动（第二次机会的时候要将这个页面从链表头移到链表尾），时钟算法使用环形链表，再使用一个指针指向最老的页面，避免了移动页面的开销；\n- **最近未使用算法**NRU（Not Recently Used）：检查访问位R、修改位M，优先置换R=M=0，其次是（R=0, M=1）；\n- **最近最少使用算法**LRU（Least Recently Used）：置换出未使用时间最长的一页；实现方式：维护时间戳，或者维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。\n- **最不经常使用算法**NFU：置换出访问次数最少的页面\n','<p>在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘中来腾出空间。页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。</p><p><br></p><p>- **最佳页面置换算法**OPT（Optimal replacement algorithm）：置换以后不需要或者最远的将来才需要的页面，是一种理论上的算法，是最优策略；</p><p>- **先进先出**FIFO：置换在内存中驻留时间最长的页面。缺点：有可能将那些经常被访问的页面也被换出，从而使缺页率升高；</p><p>- **第二次机会算法**SCR：按FIFO选择某一页面，若其访问位为1，给第二次机会，并将访问位置0；</p><p>- **时钟算法** Clock：SCR中需要将页面在链表中移动（第二次机会的时候要将这个页面从链表头移到链表尾），时钟算法使用环形链表，再使用一个指针指向最老的页面，避免了移动页面的开销；</p><p>- **最近未使用算法**NRU（Not Recently Used）：检查访问位R、修改位M，优先置换R=M=0，其次是（R=0, M=1）；</p><p>- **最近最少使用算法**LRU（Least Recently Used）：置换出未使用时间最长的一页；实现方式：维护时间戳，或者维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。</p><p>- **最不经常使用算法**NFU：置换出访问次数最少的页面</p>','{\"ops\": [{\"insert\": \"\\u5728\\u7a0b\\u5e8f\\u8fd0\\u884c\\u8fc7\\u7a0b\\u4e2d\\uff0c\\u5982\\u679c\\u8981\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u4e0d\\u5728\\u5185\\u5b58\\u4e2d\\uff0c\\u5c31\\u53d1\\u751f\\u7f3a\\u9875\\u4e2d\\u65ad\\u4ece\\u800c\\u5c06\\u8be5\\u9875\\u8c03\\u5165\\u5185\\u5b58\\u4e2d\\u3002\\u6b64\\u65f6\\u5982\\u679c\\u5185\\u5b58\\u5df2\\u65e0\\u7a7a\\u95f2\\u7a7a\\u95f4\\uff0c\\u7cfb\\u7edf\\u5fc5\\u987b\\u4ece\\u5185\\u5b58\\u4e2d\\u8c03\\u51fa\\u4e00\\u4e2a\\u9875\\u9762\\u5230\\u78c1\\u76d8\\u4e2d\\u6765\\u817e\\u51fa\\u7a7a\\u95f4\\u3002\\u9875\\u9762\\u7f6e\\u6362\\u7b97\\u6cd5\\u7684\\u4e3b\\u8981\\u76ee\\u6807\\u662f\\u4f7f\\u9875\\u9762\\u7f6e\\u6362\\u9891\\u7387\\u6700\\u4f4e\\uff08\\u4e5f\\u53ef\\u4ee5\\u8bf4\\u7f3a\\u9875\\u7387\\u6700\\u4f4e\\uff09\\u3002\\n\\n- **\\u6700\\u4f73\\u9875\\u9762\\u7f6e\\u6362\\u7b97\\u6cd5**OPT\\uff08Optimal replacement algorithm\\uff09\\uff1a\\u7f6e\\u6362\\u4ee5\\u540e\\u4e0d\\u9700\\u8981\\u6216\\u8005\\u6700\\u8fdc\\u7684\\u5c06\\u6765\\u624d\\u9700\\u8981\\u7684\\u9875\\u9762\\uff0c\\u662f\\u4e00\\u79cd\\u7406\\u8bba\\u4e0a\\u7684\\u7b97\\u6cd5\\uff0c\\u662f\\u6700\\u4f18\\u7b56\\u7565\\uff1b\\n- **\\u5148\\u8fdb\\u5148\\u51fa**FIFO\\uff1a\\u7f6e\\u6362\\u5728\\u5185\\u5b58\\u4e2d\\u9a7b\\u7559\\u65f6\\u95f4\\u6700\\u957f\\u7684\\u9875\\u9762\\u3002\\u7f3a\\u70b9\\uff1a\\u6709\\u53ef\\u80fd\\u5c06\\u90a3\\u4e9b\\u7ecf\\u5e38\\u88ab\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u4e5f\\u88ab\\u6362\\u51fa\\uff0c\\u4ece\\u800c\\u4f7f\\u7f3a\\u9875\\u7387\\u5347\\u9ad8\\uff1b\\n- **\\u7b2c\\u4e8c\\u6b21\\u673a\\u4f1a\\u7b97\\u6cd5**SCR\\uff1a\\u6309FIFO\\u9009\\u62e9\\u67d0\\u4e00\\u9875\\u9762\\uff0c\\u82e5\\u5176\\u8bbf\\u95ee\\u4f4d\\u4e3a1\\uff0c\\u7ed9\\u7b2c\\u4e8c\\u6b21\\u673a\\u4f1a\\uff0c\\u5e76\\u5c06\\u8bbf\\u95ee\\u4f4d\\u7f6e0\\uff1b\\n- **\\u65f6\\u949f\\u7b97\\u6cd5** Clock\\uff1aSCR\\u4e2d\\u9700\\u8981\\u5c06\\u9875\\u9762\\u5728\\u94fe\\u8868\\u4e2d\\u79fb\\u52a8\\uff08\\u7b2c\\u4e8c\\u6b21\\u673a\\u4f1a\\u7684\\u65f6\\u5019\\u8981\\u5c06\\u8fd9\\u4e2a\\u9875\\u9762\\u4ece\\u94fe\\u8868\\u5934\\u79fb\\u5230\\u94fe\\u8868\\u5c3e\\uff09\\uff0c\\u65f6\\u949f\\u7b97\\u6cd5\\u4f7f\\u7528\\u73af\\u5f62\\u94fe\\u8868\\uff0c\\u518d\\u4f7f\\u7528\\u4e00\\u4e2a\\u6307\\u9488\\u6307\\u5411\\u6700\\u8001\\u7684\\u9875\\u9762\\uff0c\\u907f\\u514d\\u4e86\\u79fb\\u52a8\\u9875\\u9762\\u7684\\u5f00\\u9500\\uff1b\\n- **\\u6700\\u8fd1\\u672a\\u4f7f\\u7528\\u7b97\\u6cd5**NRU\\uff08Not Recently Used\\uff09\\uff1a\\u68c0\\u67e5\\u8bbf\\u95ee\\u4f4dR\\u3001\\u4fee\\u6539\\u4f4dM\\uff0c\\u4f18\\u5148\\u7f6e\\u6362R=M=0\\uff0c\\u5176\\u6b21\\u662f\\uff08R=0, M=1\\uff09\\uff1b\\n- **\\u6700\\u8fd1\\u6700\\u5c11\\u4f7f\\u7528\\u7b97\\u6cd5**LRU\\uff08Least Recently Used\\uff09\\uff1a\\u7f6e\\u6362\\u51fa\\u672a\\u4f7f\\u7528\\u65f6\\u95f4\\u6700\\u957f\\u7684\\u4e00\\u9875\\uff1b\\u5b9e\\u73b0\\u65b9\\u5f0f\\uff1a\\u7ef4\\u62a4\\u65f6\\u95f4\\u6233\\uff0c\\u6216\\u8005\\u7ef4\\u62a4\\u4e00\\u4e2a\\u6240\\u6709\\u9875\\u9762\\u7684\\u94fe\\u8868\\u3002\\u5f53\\u4e00\\u4e2a\\u9875\\u9762\\u88ab\\u8bbf\\u95ee\\u65f6\\uff0c\\u5c06\\u8fd9\\u4e2a\\u9875\\u9762\\u79fb\\u5230\\u94fe\\u8868\\u8868\\u5934\\u3002\\u8fd9\\u6837\\u5c31\\u80fd\\u4fdd\\u8bc1\\u94fe\\u8868\\u8868\\u5c3e\\u7684\\u9875\\u9762\\u662f\\u6700\\u8fd1\\u6700\\u4e45\\u672a\\u8bbf\\u95ee\\u7684\\u3002\\n- **\\u6700\\u4e0d\\u7ecf\\u5e38\\u4f7f\\u7528\\u7b97\\u6cd5**NFU\\uff1a\\u7f6e\\u6362\\u51fa\\u8bbf\\u95ee\\u6b21\\u6570\\u6700\\u5c11\\u7684\\u9875\\u9762\\n\"}]}','white','2020-08-14 12:19:49'),(260,'局部性原理','- 时间上：最近被访问的页在不久的将来还会被访问；\n- 空间上：内存中被访问的页周围的页也很可能被访问。\n','<p>- 时间上：最近被访问的页在不久的将来还会被访问；</p><p>- 空间上：内存中被访问的页周围的页也很可能被访问。</p>','{\"ops\": [{\"insert\": \"- \\u65f6\\u95f4\\u4e0a\\uff1a\\u6700\\u8fd1\\u88ab\\u8bbf\\u95ee\\u7684\\u9875\\u5728\\u4e0d\\u4e45\\u7684\\u5c06\\u6765\\u8fd8\\u4f1a\\u88ab\\u8bbf\\u95ee\\uff1b\\n- \\u7a7a\\u95f4\\u4e0a\\uff1a\\u5185\\u5b58\\u4e2d\\u88ab\\u8bbf\\u95ee\\u7684\\u9875\\u5468\\u56f4\\u7684\\u9875\\u4e5f\\u5f88\\u53ef\\u80fd\\u88ab\\u8bbf\\u95ee\\u3002\\n\"}]}','white','2020-08-14 12:20:00'),(261,'什么是颠簸现象','颠簸本质上是指频繁的页调度行为。进程发生缺页中断时必须置换某一页。然而，其他所有的页都在使用，它置换一个页，但又立刻再次需要这个页。因此会不断产生缺页中断，导致整个系统的效率急剧下降，这种现象称为颠簸。内存颠簸的解决策略包括：\n\n- 修改页面置换算法；\n- 降低同时运行的程序的数量；\n- 终止该进程或增加物理内存容量。\n','<p>颠簸本质上是指频繁的页调度行为。进程发生缺页中断时必须置换某一页。然而，其他所有的页都在使用，它置换一个页，但又立刻再次需要这个页。因此会不断产生缺页中断，导致整个系统的效率急剧下降，这种现象称为颠簸。内存颠簸的解决策略包括：</p><p><br></p><p>- 修改页面置换算法；</p><p>- 降低同时运行的程序的数量；</p><p>- 终止该进程或增加物理内存容量。</p>','{\"ops\": [{\"insert\": \"\\u98a0\\u7c38\\u672c\\u8d28\\u4e0a\\u662f\\u6307\\u9891\\u7e41\\u7684\\u9875\\u8c03\\u5ea6\\u884c\\u4e3a\\u3002\\u8fdb\\u7a0b\\u53d1\\u751f\\u7f3a\\u9875\\u4e2d\\u65ad\\u65f6\\u5fc5\\u987b\\u7f6e\\u6362\\u67d0\\u4e00\\u9875\\u3002\\u7136\\u800c\\uff0c\\u5176\\u4ed6\\u6240\\u6709\\u7684\\u9875\\u90fd\\u5728\\u4f7f\\u7528\\uff0c\\u5b83\\u7f6e\\u6362\\u4e00\\u4e2a\\u9875\\uff0c\\u4f46\\u53c8\\u7acb\\u523b\\u518d\\u6b21\\u9700\\u8981\\u8fd9\\u4e2a\\u9875\\u3002\\u56e0\\u6b64\\u4f1a\\u4e0d\\u65ad\\u4ea7\\u751f\\u7f3a\\u9875\\u4e2d\\u65ad\\uff0c\\u5bfc\\u81f4\\u6574\\u4e2a\\u7cfb\\u7edf\\u7684\\u6548\\u7387\\u6025\\u5267\\u4e0b\\u964d\\uff0c\\u8fd9\\u79cd\\u73b0\\u8c61\\u79f0\\u4e3a\\u98a0\\u7c38\\u3002\\u5185\\u5b58\\u98a0\\u7c38\\u7684\\u89e3\\u51b3\\u7b56\\u7565\\u5305\\u62ec\\uff1a\\n\\n- \\u4fee\\u6539\\u9875\\u9762\\u7f6e\\u6362\\u7b97\\u6cd5\\uff1b\\n- \\u964d\\u4f4e\\u540c\\u65f6\\u8fd0\\u884c\\u7684\\u7a0b\\u5e8f\\u7684\\u6570\\u91cf\\uff1b\\n- \\u7ec8\\u6b62\\u8be5\\u8fdb\\u7a0b\\u6216\\u589e\\u52a0\\u7269\\u7406\\u5185\\u5b58\\u5bb9\\u91cf\\u3002\\n\"}]}','white','2020-08-14 12:20:11'),(262,'磁盘调度','过程：磁头（找到对应的盘面）；磁道（一个盘面上的同心圆环，寻道时间）；扇区（旋转时间）。为减小寻道时间的调度算法：\n\n- 先来先服务\n- 最短寻道时间优先\n- 电梯算法：电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。\n','<p>过程：磁头（找到对应的盘面）；磁道（一个盘面上的同心圆环，寻道时间）；扇区（旋转时间）。为减小寻道时间的调度算法：</p><p><br></p><p>- 先来先服务</p><p>- 最短寻道时间优先</p><p>- 电梯算法：电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</p>','{\"ops\": [{\"insert\": \"\\u8fc7\\u7a0b\\uff1a\\u78c1\\u5934\\uff08\\u627e\\u5230\\u5bf9\\u5e94\\u7684\\u76d8\\u9762\\uff09\\uff1b\\u78c1\\u9053\\uff08\\u4e00\\u4e2a\\u76d8\\u9762\\u4e0a\\u7684\\u540c\\u5fc3\\u5706\\u73af\\uff0c\\u5bfb\\u9053\\u65f6\\u95f4\\uff09\\uff1b\\u6247\\u533a\\uff08\\u65cb\\u8f6c\\u65f6\\u95f4\\uff09\\u3002\\u4e3a\\u51cf\\u5c0f\\u5bfb\\u9053\\u65f6\\u95f4\\u7684\\u8c03\\u5ea6\\u7b97\\u6cd5\\uff1a\\n\\n- \\u5148\\u6765\\u5148\\u670d\\u52a1\\n- \\u6700\\u77ed\\u5bfb\\u9053\\u65f6\\u95f4\\u4f18\\u5148\\n- \\u7535\\u68af\\u7b97\\u6cd5\\uff1a\\u7535\\u68af\\u603b\\u662f\\u4fdd\\u6301\\u4e00\\u4e2a\\u65b9\\u5411\\u8fd0\\u884c\\uff0c\\u76f4\\u5230\\u8be5\\u65b9\\u5411\\u6ca1\\u6709\\u8bf7\\u6c42\\u4e3a\\u6b62\\uff0c\\u7136\\u540e\\u6539\\u53d8\\u8fd0\\u884c\\u65b9\\u5411\\u3002\\n\"}]}','white','2020-08-14 12:20:21'),(263,'什么是三次握手 (three-way handshake)？','![三次握手](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129101827556_21212.png)\n\n- 第一次握手：Client将SYN置1，随机产生一个初始序列号seq发送给Server，进入SYN_SENT状态；\n- 第二次握手：Server收到Client的SYN=1之后，知道客户端请求建立连接，将自己的SYN置1，ACK置1，产生一个acknowledge number=sequence number+1，并随机产生一个自己的初始序列号，发送给客户端；进入SYN_RCVD状态；\n- 第三次握手：客户端检查acknowledge number是否为序列号+1，ACK是否为1，检查正确之后将自己的ACK置为1，产生一个acknowledge number=服务器发的序列号+1，发送给服务器；进入ESTABLISHED状态；服务器检查ACK为1和acknowledge number为序列号+1之后，也进入ESTABLISHED状态；完成三次握手，连接建立。\n','<p>![三次握手](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129101827556_21212.png)</p><p><br></p><p>- 第一次握手：Client将SYN置1，随机产生一个初始序列号seq发送给Server，进入SYN_SENT状态；</p><p>- 第二次握手：Server收到Client的SYN=1之后，知道客户端请求建立连接，将自己的SYN置1，ACK置1，产生一个acknowledge number=sequence number+1，并随机产生一个自己的初始序列号，发送给客户端；进入SYN_RCVD状态；</p><p>- 第三次握手：客户端检查acknowledge number是否为序列号+1，ACK是否为1，检查正确之后将自己的ACK置为1，产生一个acknowledge number=服务器发的序列号+1，发送给服务器；进入ESTABLISHED状态；服务器检查ACK为1和acknowledge number为序列号+1之后，也进入ESTABLISHED状态；完成三次握手，连接建立。</p>','{\"ops\": [{\"insert\": \"![\\u4e09\\u6b21\\u63e1\\u624b](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129101827556_21212.png)\\n\\n- \\u7b2c\\u4e00\\u6b21\\u63e1\\u624b\\uff1aClient\\u5c06SYN\\u7f6e1\\uff0c\\u968f\\u673a\\u4ea7\\u751f\\u4e00\\u4e2a\\u521d\\u59cb\\u5e8f\\u5217\\u53f7seq\\u53d1\\u9001\\u7ed9Server\\uff0c\\u8fdb\\u5165SYN_SENT\\u72b6\\u6001\\uff1b\\n- \\u7b2c\\u4e8c\\u6b21\\u63e1\\u624b\\uff1aServer\\u6536\\u5230Client\\u7684SYN=1\\u4e4b\\u540e\\uff0c\\u77e5\\u9053\\u5ba2\\u6237\\u7aef\\u8bf7\\u6c42\\u5efa\\u7acb\\u8fde\\u63a5\\uff0c\\u5c06\\u81ea\\u5df1\\u7684SYN\\u7f6e1\\uff0cACK\\u7f6e1\\uff0c\\u4ea7\\u751f\\u4e00\\u4e2aacknowledge number=sequence number+1\\uff0c\\u5e76\\u968f\\u673a\\u4ea7\\u751f\\u4e00\\u4e2a\\u81ea\\u5df1\\u7684\\u521d\\u59cb\\u5e8f\\u5217\\u53f7\\uff0c\\u53d1\\u9001\\u7ed9\\u5ba2\\u6237\\u7aef\\uff1b\\u8fdb\\u5165SYN_RCVD\\u72b6\\u6001\\uff1b\\n- \\u7b2c\\u4e09\\u6b21\\u63e1\\u624b\\uff1a\\u5ba2\\u6237\\u7aef\\u68c0\\u67e5acknowledge number\\u662f\\u5426\\u4e3a\\u5e8f\\u5217\\u53f7+1\\uff0cACK\\u662f\\u5426\\u4e3a1\\uff0c\\u68c0\\u67e5\\u6b63\\u786e\\u4e4b\\u540e\\u5c06\\u81ea\\u5df1\\u7684ACK\\u7f6e\\u4e3a1\\uff0c\\u4ea7\\u751f\\u4e00\\u4e2aacknowledge number=\\u670d\\u52a1\\u5668\\u53d1\\u7684\\u5e8f\\u5217\\u53f7+1\\uff0c\\u53d1\\u9001\\u7ed9\\u670d\\u52a1\\u5668\\uff1b\\u8fdb\\u5165ESTABLISHED\\u72b6\\u6001\\uff1b\\u670d\\u52a1\\u5668\\u68c0\\u67e5ACK\\u4e3a1\\u548cacknowledge number\\u4e3a\\u5e8f\\u5217\\u53f7+1\\u4e4b\\u540e\\uff0c\\u4e5f\\u8fdb\\u5165ESTABLISHED\\u72b6\\u6001\\uff1b\\u5b8c\\u6210\\u4e09\\u6b21\\u63e1\\u624b\\uff0c\\u8fde\\u63a5\\u5efa\\u7acb\\u3002\\n\"}]}','white','2020-08-14 12:22:38'),(264,'TCP建立连接可以两次握手吗？为什么','不可以。有两个原因：\n\n首先，可能会出现**已失效的连接请求报文段又传到了服务器端**。\n\n> client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用 “三次握手” 的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。\n\n其次，两次握手无法保证Client正确接收第二次握手的报文（Server无法确认Client是否收到），也无法保证Client和Server之间成功互换初始序列号。\n','<p>不可以。有两个原因：</p><p><br></p><p>首先，可能会出现**已失效的连接请求报文段又传到了服务器端**。</p><p><br></p><p>&gt; client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用 “三次握手” 的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。</p><p><br></p><p>其次，两次握手无法保证Client正确接收第二次握手的报文（Server无法确认Client是否收到），也无法保证Client和Server之间成功互换初始序列号。</p>','{\"ops\": [{\"insert\": \"\\u4e0d\\u53ef\\u4ee5\\u3002\\u6709\\u4e24\\u4e2a\\u539f\\u56e0\\uff1a\\n\\n\\u9996\\u5148\\uff0c\\u53ef\\u80fd\\u4f1a\\u51fa\\u73b0**\\u5df2\\u5931\\u6548\\u7684\\u8fde\\u63a5\\u8bf7\\u6c42\\u62a5\\u6587\\u6bb5\\u53c8\\u4f20\\u5230\\u4e86\\u670d\\u52a1\\u5668\\u7aef**\\u3002\\n\\n> client \\u53d1\\u51fa\\u7684\\u7b2c\\u4e00\\u4e2a\\u8fde\\u63a5\\u8bf7\\u6c42\\u62a5\\u6587\\u6bb5\\u5e76\\u6ca1\\u6709\\u4e22\\u5931\\uff0c\\u800c\\u662f\\u5728\\u67d0\\u4e2a\\u7f51\\u7edc\\u7ed3\\u70b9\\u957f\\u65f6\\u95f4\\u7684\\u6ede\\u7559\\u4e86\\uff0c\\u4ee5\\u81f4\\u5ef6\\u8bef\\u5230\\u8fde\\u63a5\\u91ca\\u653e\\u4ee5\\u540e\\u7684\\u67d0\\u4e2a\\u65f6\\u95f4\\u624d\\u5230\\u8fbe server\\u3002\\u672c\\u6765\\u8fd9\\u662f\\u4e00\\u4e2a\\u65e9\\u5df2\\u5931\\u6548\\u7684\\u62a5\\u6587\\u6bb5\\u3002\\u4f46 server \\u6536\\u5230\\u6b64\\u5931\\u6548\\u7684\\u8fde\\u63a5\\u8bf7\\u6c42\\u62a5\\u6587\\u6bb5\\u540e\\uff0c\\u5c31\\u8bef\\u8ba4\\u4e3a\\u662f client \\u518d\\u6b21\\u53d1\\u51fa\\u7684\\u4e00\\u4e2a\\u65b0\\u7684\\u8fde\\u63a5\\u8bf7\\u6c42\\u3002\\u4e8e\\u662f\\u5c31\\u5411 client \\u53d1\\u51fa\\u786e\\u8ba4\\u62a5\\u6587\\u6bb5\\uff0c\\u540c\\u610f\\u5efa\\u7acb\\u8fde\\u63a5\\u3002\\u5047\\u8bbe\\u4e0d\\u91c7\\u7528 \\u201c\\u4e09\\u6b21\\u63e1\\u624b\\u201d\\uff0c\\u90a3\\u4e48\\u53ea\\u8981 server \\u53d1\\u51fa\\u786e\\u8ba4\\uff0c\\u65b0\\u7684\\u8fde\\u63a5\\u5c31\\u5efa\\u7acb\\u4e86\\u3002\\u7531\\u4e8e\\u73b0\\u5728 client \\u5e76\\u6ca1\\u6709\\u53d1\\u51fa\\u5efa\\u7acb\\u8fde\\u63a5\\u7684\\u8bf7\\u6c42\\uff0c\\u56e0\\u6b64\\u4e0d\\u4f1a\\u7406\\u776c server \\u7684\\u786e\\u8ba4\\uff0c\\u4e5f\\u4e0d\\u4f1a\\u5411 server \\u53d1\\u9001\\u6570\\u636e\\u3002\\u4f46 server \\u5374\\u4ee5\\u4e3a\\u65b0\\u7684\\u8fd0\\u8f93\\u8fde\\u63a5\\u5df2\\u7ecf\\u5efa\\u7acb\\uff0c\\u5e76\\u4e00\\u76f4\\u7b49\\u5f85 client \\u53d1\\u6765\\u6570\\u636e\\u3002\\u8fd9\\u6837\\uff0cserver \\u7684\\u5f88\\u591a\\u8d44\\u6e90\\u5c31\\u767d\\u767d\\u6d6a\\u8d39\\u6389\\u4e86\\u3002\\u91c7\\u7528 \\u201c\\u4e09\\u6b21\\u63e1\\u624b\\u201d \\u7684\\u529e\\u6cd5\\u53ef\\u4ee5\\u9632\\u6b62\\u4e0a\\u8ff0\\u73b0\\u8c61\\u53d1\\u751f\\u3002\\u4f8b\\u5982\\u521a\\u624d\\u90a3\\u79cd\\u60c5\\u51b5\\uff0cclient \\u4e0d\\u4f1a\\u5411 server \\u7684\\u786e\\u8ba4\\u53d1\\u51fa\\u786e\\u8ba4\\u3002server \\u7531\\u4e8e\\u6536\\u4e0d\\u5230\\u786e\\u8ba4\\uff0c\\u5c31\\u77e5\\u9053 client \\u5e76\\u6ca1\\u6709\\u8981\\u6c42\\u5efa\\u7acb\\u8fde\\u63a5\\u3002\\n\\n\\u5176\\u6b21\\uff0c\\u4e24\\u6b21\\u63e1\\u624b\\u65e0\\u6cd5\\u4fdd\\u8bc1Client\\u6b63\\u786e\\u63a5\\u6536\\u7b2c\\u4e8c\\u6b21\\u63e1\\u624b\\u7684\\u62a5\\u6587\\uff08Server\\u65e0\\u6cd5\\u786e\\u8ba4Client\\u662f\\u5426\\u6536\\u5230\\uff09\\uff0c\\u4e5f\\u65e0\\u6cd5\\u4fdd\\u8bc1Client\\u548cServer\\u4e4b\\u95f4\\u6210\\u529f\\u4e92\\u6362\\u521d\\u59cb\\u5e8f\\u5217\\u53f7\\u3002\\n\"}]}','white','2020-08-14 12:23:02'),(265,'可以采用四次握手吗？为什么？','可以。但是会降低传输的效率。\n\n四次握手是指：第二次握手：Server只发送ACK和acknowledge number；而Server的SYN和初始序列号在第三次握手时发送；原来协议中的第三次握手变为第四次握手。出于优化目的，四次握手中的二、三可以合并。\n','<p>可以。但是会降低传输的效率。</p><p><br></p><p>四次握手是指：第二次握手：Server只发送ACK和acknowledge number；而Server的SYN和初始序列号在第三次握手时发送；原来协议中的第三次握手变为第四次握手。出于优化目的，四次握手中的二、三可以合并。</p>','{\"ops\": [{\"insert\": \"\\u53ef\\u4ee5\\u3002\\u4f46\\u662f\\u4f1a\\u964d\\u4f4e\\u4f20\\u8f93\\u7684\\u6548\\u7387\\u3002\\n\\n\\u56db\\u6b21\\u63e1\\u624b\\u662f\\u6307\\uff1a\\u7b2c\\u4e8c\\u6b21\\u63e1\\u624b\\uff1aServer\\u53ea\\u53d1\\u9001ACK\\u548cacknowledge number\\uff1b\\u800cServer\\u7684SYN\\u548c\\u521d\\u59cb\\u5e8f\\u5217\\u53f7\\u5728\\u7b2c\\u4e09\\u6b21\\u63e1\\u624b\\u65f6\\u53d1\\u9001\\uff1b\\u539f\\u6765\\u534f\\u8bae\\u4e2d\\u7684\\u7b2c\\u4e09\\u6b21\\u63e1\\u624b\\u53d8\\u4e3a\\u7b2c\\u56db\\u6b21\\u63e1\\u624b\\u3002\\u51fa\\u4e8e\\u4f18\\u5316\\u76ee\\u7684\\uff0c\\u56db\\u6b21\\u63e1\\u624b\\u4e2d\\u7684\\u4e8c\\u3001\\u4e09\\u53ef\\u4ee5\\u5408\\u5e76\\u3002\\n\"}]}','white','2020-08-14 12:23:13'),(266,'第三次握手中，如果客户端的ACK未送达服务器，会怎样？','Server端：  \n由于Server没有收到ACK确认，因此会重发之前的SYN+ACK（默认重发五次，之后自动关闭连接进入CLOSED状态），Client收到后会重新传ACK给Server。\n\nClient端，两种情况：  \n1. 在Server进行超时重发的过程中，如果Client向服务器发送数据，数据头部的ACK是为1的，所以服务器收到数据之后会读取 ACK number，进入 establish 状态  \n2. 在Server进入CLOSED状态之后，如果Client向服务器发送数据，服务器会以RST包应答\n','<p>Server端：  </p><p>由于Server没有收到ACK确认，因此会重发之前的SYN+ACK（默认重发五次，之后自动关闭连接进入CLOSED状态），Client收到后会重新传ACK给Server。</p><p><br></p><p>Client端，两种情况：  </p><p>1. 在Server进行超时重发的过程中，如果Client向服务器发送数据，数据头部的ACK是为1的，所以服务器收到数据之后会读取 ACK number，进入 establish 状态  </p><p>2. 在Server进入CLOSED状态之后，如果Client向服务器发送数据，服务器会以RST包应答</p>','{\"ops\": [{\"insert\": \"Server\\u7aef\\uff1a  \\n\\u7531\\u4e8eServer\\u6ca1\\u6709\\u6536\\u5230ACK\\u786e\\u8ba4\\uff0c\\u56e0\\u6b64\\u4f1a\\u91cd\\u53d1\\u4e4b\\u524d\\u7684SYN+ACK\\uff08\\u9ed8\\u8ba4\\u91cd\\u53d1\\u4e94\\u6b21\\uff0c\\u4e4b\\u540e\\u81ea\\u52a8\\u5173\\u95ed\\u8fde\\u63a5\\u8fdb\\u5165CLOSED\\u72b6\\u6001\\uff09\\uff0cClient\\u6536\\u5230\\u540e\\u4f1a\\u91cd\\u65b0\\u4f20ACK\\u7ed9Server\\u3002\\n\\nClient\\u7aef\\uff0c\\u4e24\\u79cd\\u60c5\\u51b5\\uff1a  \\n1. \\u5728Server\\u8fdb\\u884c\\u8d85\\u65f6\\u91cd\\u53d1\\u7684\\u8fc7\\u7a0b\\u4e2d\\uff0c\\u5982\\u679cClient\\u5411\\u670d\\u52a1\\u5668\\u53d1\\u9001\\u6570\\u636e\\uff0c\\u6570\\u636e\\u5934\\u90e8\\u7684ACK\\u662f\\u4e3a1\\u7684\\uff0c\\u6240\\u4ee5\\u670d\\u52a1\\u5668\\u6536\\u5230\\u6570\\u636e\\u4e4b\\u540e\\u4f1a\\u8bfb\\u53d6 ACK number\\uff0c\\u8fdb\\u5165 establish \\u72b6\\u6001  \\n2. \\u5728Server\\u8fdb\\u5165CLOSED\\u72b6\\u6001\\u4e4b\\u540e\\uff0c\\u5982\\u679cClient\\u5411\\u670d\\u52a1\\u5668\\u53d1\\u9001\\u6570\\u636e\\uff0c\\u670d\\u52a1\\u5668\\u4f1a\\u4ee5RST\\u5305\\u5e94\\u7b54\\n\"}]}','white','2020-08-14 12:23:26'),(267,'如果已经建立了连接，但客户端出现了故障怎么办？','服务器每收到一次客户端的请求后都会重新复位一个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n','<p>服务器每收到一次客户端的请求后都会重新复位一个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>','{\"ops\": [{\"insert\": \"\\u670d\\u52a1\\u5668\\u6bcf\\u6536\\u5230\\u4e00\\u6b21\\u5ba2\\u6237\\u7aef\\u7684\\u8bf7\\u6c42\\u540e\\u90fd\\u4f1a\\u91cd\\u65b0\\u590d\\u4f4d\\u4e00\\u4e2a\\u8ba1\\u65f6\\u5668\\uff0c\\u65f6\\u95f4\\u901a\\u5e38\\u662f\\u8bbe\\u7f6e\\u4e3a2\\u5c0f\\u65f6\\uff0c\\u82e5\\u4e24\\u5c0f\\u65f6\\u8fd8\\u6ca1\\u6709\\u6536\\u5230\\u5ba2\\u6237\\u7aef\\u7684\\u4efb\\u4f55\\u6570\\u636e\\uff0c\\u670d\\u52a1\\u5668\\u5c31\\u4f1a\\u53d1\\u9001\\u4e00\\u4e2a\\u63a2\\u6d4b\\u62a5\\u6587\\u6bb5\\uff0c\\u4ee5\\u540e\\u6bcf\\u969475\\u79d2\\u949f\\u53d1\\u9001\\u4e00\\u6b21\\u3002\\u82e5\\u4e00\\u8fde\\u53d1\\u900110\\u4e2a\\u63a2\\u6d4b\\u62a5\\u6587\\u4ecd\\u7136\\u6ca1\\u53cd\\u5e94\\uff0c\\u670d\\u52a1\\u5668\\u5c31\\u8ba4\\u4e3a\\u5ba2\\u6237\\u7aef\\u51fa\\u4e86\\u6545\\u969c\\uff0c\\u63a5\\u7740\\u5c31\\u5173\\u95ed\\u8fde\\u63a5\\u3002\\n\"}]}','white','2020-08-14 12:23:44'),(268,'初始序列号是什么？','TCP连接的一方A，随机选择一个32位的序列号（Sequence Number）作为发送数据的初始序列号（Initial Sequence Number，ISN），比如为1000，以该序列号为原点，对要传送的数据进行编号：1001、1002...三次握手时，把这个初始序列号传送给另一方B，以便在传输数据时，B可以确认什么样的数据编号是合法的；同时在进行数据传输时，A还可以确认B收到的每一个字节，如果A收到了B的确认编号（acknowledge number）是2001，就说明编号为1001-2000的数据已经被B成功接受。\n','<p>TCP连接的一方A，随机选择一个32位的序列号（Sequence Number）作为发送数据的初始序列号（Initial Sequence Number，ISN），比如为1000，以该序列号为原点，对要传送的数据进行编号：1001、1002...三次握手时，把这个初始序列号传送给另一方B，以便在传输数据时，B可以确认什么样的数据编号是合法的；同时在进行数据传输时，A还可以确认B收到的每一个字节，如果A收到了B的确认编号（acknowledge number）是2001，就说明编号为1001-2000的数据已经被B成功接受。</p>','{\"ops\": [{\"insert\": \"TCP\\u8fde\\u63a5\\u7684\\u4e00\\u65b9A\\uff0c\\u968f\\u673a\\u9009\\u62e9\\u4e00\\u4e2a32\\u4f4d\\u7684\\u5e8f\\u5217\\u53f7\\uff08Sequence Number\\uff09\\u4f5c\\u4e3a\\u53d1\\u9001\\u6570\\u636e\\u7684\\u521d\\u59cb\\u5e8f\\u5217\\u53f7\\uff08Initial Sequence Number\\uff0cISN\\uff09\\uff0c\\u6bd4\\u5982\\u4e3a1000\\uff0c\\u4ee5\\u8be5\\u5e8f\\u5217\\u53f7\\u4e3a\\u539f\\u70b9\\uff0c\\u5bf9\\u8981\\u4f20\\u9001\\u7684\\u6570\\u636e\\u8fdb\\u884c\\u7f16\\u53f7\\uff1a1001\\u30011002...\\u4e09\\u6b21\\u63e1\\u624b\\u65f6\\uff0c\\u628a\\u8fd9\\u4e2a\\u521d\\u59cb\\u5e8f\\u5217\\u53f7\\u4f20\\u9001\\u7ed9\\u53e6\\u4e00\\u65b9B\\uff0c\\u4ee5\\u4fbf\\u5728\\u4f20\\u8f93\\u6570\\u636e\\u65f6\\uff0cB\\u53ef\\u4ee5\\u786e\\u8ba4\\u4ec0\\u4e48\\u6837\\u7684\\u6570\\u636e\\u7f16\\u53f7\\u662f\\u5408\\u6cd5\\u7684\\uff1b\\u540c\\u65f6\\u5728\\u8fdb\\u884c\\u6570\\u636e\\u4f20\\u8f93\\u65f6\\uff0cA\\u8fd8\\u53ef\\u4ee5\\u786e\\u8ba4B\\u6536\\u5230\\u7684\\u6bcf\\u4e00\\u4e2a\\u5b57\\u8282\\uff0c\\u5982\\u679cA\\u6536\\u5230\\u4e86B\\u7684\\u786e\\u8ba4\\u7f16\\u53f7\\uff08acknowledge number\\uff09\\u662f2001\\uff0c\\u5c31\\u8bf4\\u660e\\u7f16\\u53f7\\u4e3a1001-2000\\u7684\\u6570\\u636e\\u5df2\\u7ecf\\u88abB\\u6210\\u529f\\u63a5\\u53d7\\u3002\\n\"}]}','white','2020-08-14 12:23:57'),(269,'什么是四次挥手？','![四次挥手](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129112652915_15481.png)\n\n- 第一次挥手：Client将FIN置为1，发送一个序列号seq给Server；进入FIN_WAIT_1状态；\n- 第二次挥手：Server收到FIN之后，发送一个ACK=1，acknowledge number=收到的序列号+1；进入CLOSE_WAIT状态。此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。\n- 第三次挥手：Server将FIN置1，发送一个序列号给Client；进入LAST_ACK状态；\n- 第四次挥手：Client收到服务器的FIN后，进入TIME_WAIT状态；接着将ACK置1，发送一个acknowledge number=序列号+1给服务器；服务器收到后，确认acknowledge number后，变为CLOSED状态，不再向客户端发送数据。客户端等待2*MSL（报文段最长寿命）时间后，也进入CLOSED状态。完成四次挥手。\n','<p>![四次挥手](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129112652915_15481.png)</p><p><br></p><p>- 第一次挥手：Client将FIN置为1，发送一个序列号seq给Server；进入FIN_WAIT_1状态；</p><p>- 第二次挥手：Server收到FIN之后，发送一个ACK=1，acknowledge number=收到的序列号+1；进入CLOSE_WAIT状态。此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。</p><p>- 第三次挥手：Server将FIN置1，发送一个序列号给Client；进入LAST_ACK状态；</p><p>- 第四次挥手：Client收到服务器的FIN后，进入TIME_WAIT状态；接着将ACK置1，发送一个acknowledge number=序列号+1给服务器；服务器收到后，确认acknowledge number后，变为CLOSED状态，不再向客户端发送数据。客户端等待2*MSL（报文段最长寿命）时间后，也进入CLOSED状态。完成四次挥手。</p>','{\"ops\": [{\"insert\": \"![\\u56db\\u6b21\\u6325\\u624b](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129112652915_15481.png)\\n\\n- \\u7b2c\\u4e00\\u6b21\\u6325\\u624b\\uff1aClient\\u5c06FIN\\u7f6e\\u4e3a1\\uff0c\\u53d1\\u9001\\u4e00\\u4e2a\\u5e8f\\u5217\\u53f7seq\\u7ed9Server\\uff1b\\u8fdb\\u5165FIN_WAIT_1\\u72b6\\u6001\\uff1b\\n- \\u7b2c\\u4e8c\\u6b21\\u6325\\u624b\\uff1aServer\\u6536\\u5230FIN\\u4e4b\\u540e\\uff0c\\u53d1\\u9001\\u4e00\\u4e2aACK=1\\uff0cacknowledge number=\\u6536\\u5230\\u7684\\u5e8f\\u5217\\u53f7+1\\uff1b\\u8fdb\\u5165CLOSE_WAIT\\u72b6\\u6001\\u3002\\u6b64\\u65f6\\u5ba2\\u6237\\u7aef\\u5df2\\u7ecf\\u6ca1\\u6709\\u8981\\u53d1\\u9001\\u7684\\u6570\\u636e\\u4e86\\uff0c\\u4f46\\u4ecd\\u53ef\\u4ee5\\u63a5\\u53d7\\u670d\\u52a1\\u5668\\u53d1\\u6765\\u7684\\u6570\\u636e\\u3002\\n- \\u7b2c\\u4e09\\u6b21\\u6325\\u624b\\uff1aServer\\u5c06FIN\\u7f6e1\\uff0c\\u53d1\\u9001\\u4e00\\u4e2a\\u5e8f\\u5217\\u53f7\\u7ed9Client\\uff1b\\u8fdb\\u5165LAST_ACK\\u72b6\\u6001\\uff1b\\n- \\u7b2c\\u56db\\u6b21\\u6325\\u624b\\uff1aClient\\u6536\\u5230\\u670d\\u52a1\\u5668\\u7684FIN\\u540e\\uff0c\\u8fdb\\u5165TIME_WAIT\\u72b6\\u6001\\uff1b\\u63a5\\u7740\\u5c06ACK\\u7f6e1\\uff0c\\u53d1\\u9001\\u4e00\\u4e2aacknowledge number=\\u5e8f\\u5217\\u53f7+1\\u7ed9\\u670d\\u52a1\\u5668\\uff1b\\u670d\\u52a1\\u5668\\u6536\\u5230\\u540e\\uff0c\\u786e\\u8ba4acknowledge number\\u540e\\uff0c\\u53d8\\u4e3aCLOSED\\u72b6\\u6001\\uff0c\\u4e0d\\u518d\\u5411\\u5ba2\\u6237\\u7aef\\u53d1\\u9001\\u6570\\u636e\\u3002\\u5ba2\\u6237\\u7aef\\u7b49\\u5f852*MSL\\uff08\\u62a5\\u6587\\u6bb5\\u6700\\u957f\\u5bff\\u547d\\uff09\\u65f6\\u95f4\\u540e\\uff0c\\u4e5f\\u8fdb\\u5165CLOSED\\u72b6\\u6001\\u3002\\u5b8c\\u6210\\u56db\\u6b21\\u6325\\u624b\\u3002\\n\"}]}','white','2020-08-14 12:24:40'),(270,' 为什么不能把服务器发送的ACK和FIN合并起来，变成三次挥手（CLOSE_WAIT状态意义是什么）？','因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复ACK，表示接收到了断开连接的请求。等到数据发完之后再发FIN，断开服务器到客户端的数据传送。\n','<p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复ACK，表示接收到了断开连接的请求。等到数据发完之后再发FIN，断开服务器到客户端的数据传送。</p>','{\"ops\": [{\"insert\": \"\\u56e0\\u4e3a\\u670d\\u52a1\\u5668\\u6536\\u5230\\u5ba2\\u6237\\u7aef\\u65ad\\u5f00\\u8fde\\u63a5\\u7684\\u8bf7\\u6c42\\u65f6\\uff0c\\u53ef\\u80fd\\u8fd8\\u6709\\u4e00\\u4e9b\\u6570\\u636e\\u6ca1\\u6709\\u53d1\\u5b8c\\uff0c\\u8fd9\\u65f6\\u5148\\u56de\\u590dACK\\uff0c\\u8868\\u793a\\u63a5\\u6536\\u5230\\u4e86\\u65ad\\u5f00\\u8fde\\u63a5\\u7684\\u8bf7\\u6c42\\u3002\\u7b49\\u5230\\u6570\\u636e\\u53d1\\u5b8c\\u4e4b\\u540e\\u518d\\u53d1FIN\\uff0c\\u65ad\\u5f00\\u670d\\u52a1\\u5668\\u5230\\u5ba2\\u6237\\u7aef\\u7684\\u6570\\u636e\\u4f20\\u9001\\u3002\\n\"}]}','white','2020-08-14 12:25:07'),(271,'如果第二次挥手时服务器的ACK没有送达客户端，会怎样？','客户端没有收到ACK确认，会重新发送FIN请求。\n','<p>客户端没有收到ACK确认，会重新发送FIN请求。</p>','{\"ops\": [{\"insert\": \"\\u5ba2\\u6237\\u7aef\\u6ca1\\u6709\\u6536\\u5230ACK\\u786e\\u8ba4\\uff0c\\u4f1a\\u91cd\\u65b0\\u53d1\\u9001FIN\\u8bf7\\u6c42\\u3002\\n\"}]}','white','2020-08-14 12:25:21'),(272,'客户端TIME_WAIT状态的意义是什么？','第四次挥手时，客户端发送给服务器的ACK有可能丢失，TIME_WAIT状态就是用来重发可能丢失的ACK报文。如果Server没有收到ACK，就会重发FIN，如果Client在2*MSL的时间内收到了FIN，就会重新发送ACK并再次等待2MSL，防止Server没有收到ACK而不断重发FIN。\n\nMSL(Maximum Segment Lifetime)，指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。\n','<p>第四次挥手时，客户端发送给服务器的ACK有可能丢失，TIME_WAIT状态就是用来重发可能丢失的ACK报文。如果Server没有收到ACK，就会重发FIN，如果Client在2*MSL的时间内收到了FIN，就会重新发送ACK并再次等待2MSL，防止Server没有收到ACK而不断重发FIN。</p><p><br></p><p>MSL(Maximum Segment Lifetime)，指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p>','{\"ops\": [{\"insert\": \"\\u7b2c\\u56db\\u6b21\\u6325\\u624b\\u65f6\\uff0c\\u5ba2\\u6237\\u7aef\\u53d1\\u9001\\u7ed9\\u670d\\u52a1\\u5668\\u7684ACK\\u6709\\u53ef\\u80fd\\u4e22\\u5931\\uff0cTIME_WAIT\\u72b6\\u6001\\u5c31\\u662f\\u7528\\u6765\\u91cd\\u53d1\\u53ef\\u80fd\\u4e22\\u5931\\u7684ACK\\u62a5\\u6587\\u3002\\u5982\\u679cServer\\u6ca1\\u6709\\u6536\\u5230ACK\\uff0c\\u5c31\\u4f1a\\u91cd\\u53d1FIN\\uff0c\\u5982\\u679cClient\\u57282*MSL\\u7684\\u65f6\\u95f4\\u5185\\u6536\\u5230\\u4e86FIN\\uff0c\\u5c31\\u4f1a\\u91cd\\u65b0\\u53d1\\u9001ACK\\u5e76\\u518d\\u6b21\\u7b49\\u5f852MSL\\uff0c\\u9632\\u6b62Server\\u6ca1\\u6709\\u6536\\u5230ACK\\u800c\\u4e0d\\u65ad\\u91cd\\u53d1FIN\\u3002\\n\\nMSL(Maximum Segment Lifetime)\\uff0c\\u6307\\u4e00\\u4e2a\\u7247\\u6bb5\\u5728\\u7f51\\u7edc\\u4e2d\\u6700\\u5927\\u7684\\u5b58\\u6d3b\\u65f6\\u95f4\\uff0c2MSL\\u5c31\\u662f\\u4e00\\u4e2a\\u53d1\\u9001\\u548c\\u4e00\\u4e2a\\u56de\\u590d\\u6240\\u9700\\u7684\\u6700\\u5927\\u65f6\\u95f4\\u3002\\u5982\\u679c\\u76f4\\u52302MSL\\uff0cClient\\u90fd\\u6ca1\\u6709\\u518d\\u6b21\\u6536\\u5230FIN\\uff0c\\u90a3\\u4e48Client\\u63a8\\u65adACK\\u5df2\\u7ecf\\u88ab\\u6210\\u529f\\u63a5\\u6536\\uff0c\\u5219\\u7ed3\\u675fTCP\\u8fde\\u63a5\\u3002\\n\"}]}','white','2020-08-14 12:25:36'),(273,'TCP如何实现流量控制？','![滑动窗口](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129145400104_2106.png)\n\n使用滑动窗口协议实现流量控制。防止发送方发送速率太快，接收方缓存区不够导致溢出。接收方会维护一个接收窗口 receiver window（窗口大小单位是字节），接受窗口的大小是根据自己的资源情况动态调整的，在返回ACK时将接受窗口大小放在TCP报文中的窗口字段告知发送方。发送窗口的大小不能超过接受窗口的大小，只有当发送方发送并收到确认之后，才能将发送窗口右移。\n\n发送窗口的上限为接受窗口和拥塞窗口中的较小值。接受窗口表明了接收方的接收能力，拥塞窗口表明了网络的传送能力。\n','<p>![滑动窗口](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129145400104_2106.png)</p><p><br></p><p>使用滑动窗口协议实现流量控制。防止发送方发送速率太快，接收方缓存区不够导致溢出。接收方会维护一个接收窗口 receiver window（窗口大小单位是字节），接受窗口的大小是根据自己的资源情况动态调整的，在返回ACK时将接受窗口大小放在TCP报文中的窗口字段告知发送方。发送窗口的大小不能超过接受窗口的大小，只有当发送方发送并收到确认之后，才能将发送窗口右移。</p><p><br></p><p>发送窗口的上限为接受窗口和拥塞窗口中的较小值。接受窗口表明了接收方的接收能力，拥塞窗口表明了网络的传送能力。</p>','{\"ops\": [{\"insert\": \"![\\u6ed1\\u52a8\\u7a97\\u53e3](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129145400104_2106.png)\\n\\n\\u4f7f\\u7528\\u6ed1\\u52a8\\u7a97\\u53e3\\u534f\\u8bae\\u5b9e\\u73b0\\u6d41\\u91cf\\u63a7\\u5236\\u3002\\u9632\\u6b62\\u53d1\\u9001\\u65b9\\u53d1\\u9001\\u901f\\u7387\\u592a\\u5feb\\uff0c\\u63a5\\u6536\\u65b9\\u7f13\\u5b58\\u533a\\u4e0d\\u591f\\u5bfc\\u81f4\\u6ea2\\u51fa\\u3002\\u63a5\\u6536\\u65b9\\u4f1a\\u7ef4\\u62a4\\u4e00\\u4e2a\\u63a5\\u6536\\u7a97\\u53e3 receiver window\\uff08\\u7a97\\u53e3\\u5927\\u5c0f\\u5355\\u4f4d\\u662f\\u5b57\\u8282\\uff09\\uff0c\\u63a5\\u53d7\\u7a97\\u53e3\\u7684\\u5927\\u5c0f\\u662f\\u6839\\u636e\\u81ea\\u5df1\\u7684\\u8d44\\u6e90\\u60c5\\u51b5\\u52a8\\u6001\\u8c03\\u6574\\u7684\\uff0c\\u5728\\u8fd4\\u56deACK\\u65f6\\u5c06\\u63a5\\u53d7\\u7a97\\u53e3\\u5927\\u5c0f\\u653e\\u5728TCP\\u62a5\\u6587\\u4e2d\\u7684\\u7a97\\u53e3\\u5b57\\u6bb5\\u544a\\u77e5\\u53d1\\u9001\\u65b9\\u3002\\u53d1\\u9001\\u7a97\\u53e3\\u7684\\u5927\\u5c0f\\u4e0d\\u80fd\\u8d85\\u8fc7\\u63a5\\u53d7\\u7a97\\u53e3\\u7684\\u5927\\u5c0f\\uff0c\\u53ea\\u6709\\u5f53\\u53d1\\u9001\\u65b9\\u53d1\\u9001\\u5e76\\u6536\\u5230\\u786e\\u8ba4\\u4e4b\\u540e\\uff0c\\u624d\\u80fd\\u5c06\\u53d1\\u9001\\u7a97\\u53e3\\u53f3\\u79fb\\u3002\\n\\n\\u53d1\\u9001\\u7a97\\u53e3\\u7684\\u4e0a\\u9650\\u4e3a\\u63a5\\u53d7\\u7a97\\u53e3\\u548c\\u62e5\\u585e\\u7a97\\u53e3\\u4e2d\\u7684\\u8f83\\u5c0f\\u503c\\u3002\\u63a5\\u53d7\\u7a97\\u53e3\\u8868\\u660e\\u4e86\\u63a5\\u6536\\u65b9\\u7684\\u63a5\\u6536\\u80fd\\u529b\\uff0c\\u62e5\\u585e\\u7a97\\u53e3\\u8868\\u660e\\u4e86\\u7f51\\u7edc\\u7684\\u4f20\\u9001\\u80fd\\u529b\\u3002\\n\"}]}','white','2020-08-14 12:26:08'),(274,'什么是零窗口（接收窗口为0时会怎样）？','如果接收方没有能力接收数据，就会将接收窗口设置为0，这时发送方必须暂停发送数据，但是会启动一个持续计时器(persistence timer)，到期后发送一个大小为1字节的探测数据包，以查看接收窗口状态。如果接收方能够接收数据，就会在返回的报文中更新接收窗口大小，恢复数据传送。\n','<p>如果接收方没有能力接收数据，就会将接收窗口设置为0，这时发送方必须暂停发送数据，但是会启动一个持续计时器(persistence timer)，到期后发送一个大小为1字节的探测数据包，以查看接收窗口状态。如果接收方能够接收数据，就会在返回的报文中更新接收窗口大小，恢复数据传送。</p>','{\"ops\": [{\"insert\": \"\\u5982\\u679c\\u63a5\\u6536\\u65b9\\u6ca1\\u6709\\u80fd\\u529b\\u63a5\\u6536\\u6570\\u636e\\uff0c\\u5c31\\u4f1a\\u5c06\\u63a5\\u6536\\u7a97\\u53e3\\u8bbe\\u7f6e\\u4e3a0\\uff0c\\u8fd9\\u65f6\\u53d1\\u9001\\u65b9\\u5fc5\\u987b\\u6682\\u505c\\u53d1\\u9001\\u6570\\u636e\\uff0c\\u4f46\\u662f\\u4f1a\\u542f\\u52a8\\u4e00\\u4e2a\\u6301\\u7eed\\u8ba1\\u65f6\\u5668(persistence timer)\\uff0c\\u5230\\u671f\\u540e\\u53d1\\u9001\\u4e00\\u4e2a\\u5927\\u5c0f\\u4e3a1\\u5b57\\u8282\\u7684\\u63a2\\u6d4b\\u6570\\u636e\\u5305\\uff0c\\u4ee5\\u67e5\\u770b\\u63a5\\u6536\\u7a97\\u53e3\\u72b6\\u6001\\u3002\\u5982\\u679c\\u63a5\\u6536\\u65b9\\u80fd\\u591f\\u63a5\\u6536\\u6570\\u636e\\uff0c\\u5c31\\u4f1a\\u5728\\u8fd4\\u56de\\u7684\\u62a5\\u6587\\u4e2d\\u66f4\\u65b0\\u63a5\\u6536\\u7a97\\u53e3\\u5927\\u5c0f\\uff0c\\u6062\\u590d\\u6570\\u636e\\u4f20\\u9001\\u3002\\n\"}]}','white','2020-08-14 12:26:23'),(275,'TCP的拥塞控制是怎么实现的？','\n![拥塞控制](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129153624025_28293.png)\n\n拥塞控制主要由四个算法组成：**慢启动（Slow Start）、拥塞避免（Congestion voidance）、快重传 （Fast Retransmit）、快恢复（Fast Recovery）**\n\n1. 慢启动：刚开始发送数据时，先把拥塞窗口（congestion window）设置为一个最大报文段MSS的数值，每收到一个新的确认报文之后，就把拥塞窗口加1个MSS。这样每经过一个传输轮次（或者说是每经过一个往返时间RTT），拥塞窗口的大小就会加倍\n\n![slow start](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129155345024_11142.png)\n\n2. 拥塞避免：当拥塞窗口的大小达到慢开始门限(slow start threshold)时，开始执行拥塞避免算法，拥塞窗口大小不再指数增加，而是线性增加，即每经过一个传输轮次只增加1MSS.  \n> 无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。**（这是不使用快重传的情况）**\n\n3. 快重传：快重传要求接收方在收到一个失序的报文段后就立即发出**重复确认**（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\n\n![快重传](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129161026032_32431.png)\n\n4. 快恢复：当发送方连续收到三个重复确认时，就把慢开始门限减半，然后执行拥塞避免算法。不执行慢开始算法的原因：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方认为现在网络可能没有出现拥塞。  \n也有的快重传是把开始时的拥塞窗口cwnd值再增大一点，即等于 ssthresh + 3*MSS 。这样做的理由是：既然发送方收到三个重复的确认，就表明有三个分组已经离开了网络。这三个分组不再消耗网络的资源而是停留在接收方的缓存中。可见现在网络中减少了三个分组。因此可以适当把拥塞窗口扩大些。\n\n','<p><br></p><p>![拥塞控制](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129153624025_28293.png)</p><p><br></p><p>拥塞控制主要由四个算法组成：**慢启动（Slow Start）、拥塞避免（Congestion voidance）、快重传 （Fast Retransmit）、快恢复（Fast Recovery）**</p><p><br></p><p>1. 慢启动：刚开始发送数据时，先把拥塞窗口（congestion window）设置为一个最大报文段MSS的数值，每收到一个新的确认报文之后，就把拥塞窗口加1个MSS。这样每经过一个传输轮次（或者说是每经过一个往返时间RTT），拥塞窗口的大小就会加倍</p><p><br></p><p>![slow start](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129155345024_11142.png)</p><p><br></p><p>2. 拥塞避免：当拥塞窗口的大小达到慢开始门限(slow start threshold)时，开始执行拥塞避免算法，拥塞窗口大小不再指数增加，而是线性增加，即每经过一个传输轮次只增加1MSS.  </p><p>&gt; 无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。**（这是不使用快重传的情况）**</p><p><br></p><p>3. 快重传：快重传要求接收方在收到一个失序的报文段后就立即发出**重复确认**（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</p><p><br></p><p>![快重传](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129161026032_32431.png)</p><p><br></p><p>4. 快恢复：当发送方连续收到三个重复确认时，就把慢开始门限减半，然后执行拥塞避免算法。不执行慢开始算法的原因：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方认为现在网络可能没有出现拥塞。  </p><p>也有的快重传是把开始时的拥塞窗口cwnd值再增大一点，即等于 ssthresh + 3*MSS 。这样做的理由是：既然发送方收到三个重复的确认，就表明有三个分组已经离开了网络。这三个分组不再消耗网络的资源而是停留在接收方的缓存中。可见现在网络中减少了三个分组。因此可以适当把拥塞窗口扩大些。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\n![\\u62e5\\u585e\\u63a7\\u5236](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129153624025_28293.png)\\n\\n\\u62e5\\u585e\\u63a7\\u5236\\u4e3b\\u8981\\u7531\\u56db\\u4e2a\\u7b97\\u6cd5\\u7ec4\\u6210\\uff1a**\\u6162\\u542f\\u52a8\\uff08Slow Start\\uff09\\u3001\\u62e5\\u585e\\u907f\\u514d\\uff08Congestion voidance\\uff09\\u3001\\u5feb\\u91cd\\u4f20 \\uff08Fast Retransmit\\uff09\\u3001\\u5feb\\u6062\\u590d\\uff08Fast Recovery\\uff09**\\n\\n1. \\u6162\\u542f\\u52a8\\uff1a\\u521a\\u5f00\\u59cb\\u53d1\\u9001\\u6570\\u636e\\u65f6\\uff0c\\u5148\\u628a\\u62e5\\u585e\\u7a97\\u53e3\\uff08congestion window\\uff09\\u8bbe\\u7f6e\\u4e3a\\u4e00\\u4e2a\\u6700\\u5927\\u62a5\\u6587\\u6bb5MSS\\u7684\\u6570\\u503c\\uff0c\\u6bcf\\u6536\\u5230\\u4e00\\u4e2a\\u65b0\\u7684\\u786e\\u8ba4\\u62a5\\u6587\\u4e4b\\u540e\\uff0c\\u5c31\\u628a\\u62e5\\u585e\\u7a97\\u53e3\\u52a01\\u4e2aMSS\\u3002\\u8fd9\\u6837\\u6bcf\\u7ecf\\u8fc7\\u4e00\\u4e2a\\u4f20\\u8f93\\u8f6e\\u6b21\\uff08\\u6216\\u8005\\u8bf4\\u662f\\u6bcf\\u7ecf\\u8fc7\\u4e00\\u4e2a\\u5f80\\u8fd4\\u65f6\\u95f4RTT\\uff09\\uff0c\\u62e5\\u585e\\u7a97\\u53e3\\u7684\\u5927\\u5c0f\\u5c31\\u4f1a\\u52a0\\u500d\\n\\n![slow start](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129155345024_11142.png)\\n\\n2. \\u62e5\\u585e\\u907f\\u514d\\uff1a\\u5f53\\u62e5\\u585e\\u7a97\\u53e3\\u7684\\u5927\\u5c0f\\u8fbe\\u5230\\u6162\\u5f00\\u59cb\\u95e8\\u9650(slow start threshold)\\u65f6\\uff0c\\u5f00\\u59cb\\u6267\\u884c\\u62e5\\u585e\\u907f\\u514d\\u7b97\\u6cd5\\uff0c\\u62e5\\u585e\\u7a97\\u53e3\\u5927\\u5c0f\\u4e0d\\u518d\\u6307\\u6570\\u589e\\u52a0\\uff0c\\u800c\\u662f\\u7ebf\\u6027\\u589e\\u52a0\\uff0c\\u5373\\u6bcf\\u7ecf\\u8fc7\\u4e00\\u4e2a\\u4f20\\u8f93\\u8f6e\\u6b21\\u53ea\\u589e\\u52a01MSS.  \\n> \\u65e0\\u8bba\\u5728\\u6162\\u5f00\\u59cb\\u9636\\u6bb5\\u8fd8\\u662f\\u5728\\u62e5\\u585e\\u907f\\u514d\\u9636\\u6bb5\\uff0c\\u53ea\\u8981\\u53d1\\u9001\\u65b9\\u5224\\u65ad\\u7f51\\u7edc\\u51fa\\u73b0\\u62e5\\u585e\\uff08\\u5176\\u6839\\u636e\\u5c31\\u662f\\u6ca1\\u6709\\u6536\\u5230\\u786e\\u8ba4\\uff09\\uff0c\\u5c31\\u8981\\u628a\\u6162\\u5f00\\u59cb\\u95e8\\u9650ssthresh\\u8bbe\\u7f6e\\u4e3a\\u51fa\\u73b0\\u62e5\\u585e\\u65f6\\u7684\\u53d1\\u9001\\u65b9\\u7a97\\u53e3\\u503c\\u7684\\u4e00\\u534a\\uff08\\u4f46\\u4e0d\\u80fd\\u5c0f\\u4e8e2\\uff09\\u3002\\u7136\\u540e\\u628a\\u62e5\\u585e\\u7a97\\u53e3cwnd\\u91cd\\u65b0\\u8bbe\\u7f6e\\u4e3a1\\uff0c\\u6267\\u884c\\u6162\\u5f00\\u59cb\\u7b97\\u6cd5\\u3002**\\uff08\\u8fd9\\u662f\\u4e0d\\u4f7f\\u7528\\u5feb\\u91cd\\u4f20\\u7684\\u60c5\\u51b5\\uff09**\\n\\n3. \\u5feb\\u91cd\\u4f20\\uff1a\\u5feb\\u91cd\\u4f20\\u8981\\u6c42\\u63a5\\u6536\\u65b9\\u5728\\u6536\\u5230\\u4e00\\u4e2a\\u5931\\u5e8f\\u7684\\u62a5\\u6587\\u6bb5\\u540e\\u5c31\\u7acb\\u5373\\u53d1\\u51fa**\\u91cd\\u590d\\u786e\\u8ba4**\\uff08\\u4e3a\\u7684\\u662f\\u4f7f\\u53d1\\u9001\\u65b9\\u53ca\\u65e9\\u77e5\\u9053\\u6709\\u62a5\\u6587\\u6bb5\\u6ca1\\u6709\\u5230\\u8fbe\\u5bf9\\u65b9\\uff09\\u800c\\u4e0d\\u8981\\u7b49\\u5230\\u81ea\\u5df1\\u53d1\\u9001\\u6570\\u636e\\u65f6\\u634e\\u5e26\\u786e\\u8ba4\\u3002\\u5feb\\u91cd\\u4f20\\u7b97\\u6cd5\\u89c4\\u5b9a\\uff0c\\u53d1\\u9001\\u65b9\\u53ea\\u8981\\u4e00\\u8fde\\u6536\\u5230\\u4e09\\u4e2a\\u91cd\\u590d\\u786e\\u8ba4\\u5c31\\u5e94\\u5f53\\u7acb\\u5373\\u91cd\\u4f20\\u5bf9\\u65b9\\u5c1a\\u672a\\u6536\\u5230\\u7684\\u62a5\\u6587\\u6bb5\\uff0c\\u800c\\u4e0d\\u5fc5\\u7ee7\\u7eed\\u7b49\\u5f85\\u8bbe\\u7f6e\\u7684\\u91cd\\u4f20\\u8ba1\\u65f6\\u5668\\u65f6\\u95f4\\u5230\\u671f\\u3002\\n\\n![\\u5feb\\u91cd\\u4f20](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129161026032_32431.png)\\n\\n4. \\u5feb\\u6062\\u590d\\uff1a\\u5f53\\u53d1\\u9001\\u65b9\\u8fde\\u7eed\\u6536\\u5230\\u4e09\\u4e2a\\u91cd\\u590d\\u786e\\u8ba4\\u65f6\\uff0c\\u5c31\\u628a\\u6162\\u5f00\\u59cb\\u95e8\\u9650\\u51cf\\u534a\\uff0c\\u7136\\u540e\\u6267\\u884c\\u62e5\\u585e\\u907f\\u514d\\u7b97\\u6cd5\\u3002\\u4e0d\\u6267\\u884c\\u6162\\u5f00\\u59cb\\u7b97\\u6cd5\\u7684\\u539f\\u56e0\\uff1a\\u56e0\\u4e3a\\u5982\\u679c\\u7f51\\u7edc\\u51fa\\u73b0\\u62e5\\u585e\\u7684\\u8bdd\\u5c31\\u4e0d\\u4f1a\\u6536\\u5230\\u597d\\u51e0\\u4e2a\\u91cd\\u590d\\u7684\\u786e\\u8ba4\\uff0c\\u6240\\u4ee5\\u53d1\\u9001\\u65b9\\u8ba4\\u4e3a\\u73b0\\u5728\\u7f51\\u7edc\\u53ef\\u80fd\\u6ca1\\u6709\\u51fa\\u73b0\\u62e5\\u585e\\u3002  \\n\\u4e5f\\u6709\\u7684\\u5feb\\u91cd\\u4f20\\u662f\\u628a\\u5f00\\u59cb\\u65f6\\u7684\\u62e5\\u585e\\u7a97\\u53e3cwnd\\u503c\\u518d\\u589e\\u5927\\u4e00\\u70b9\\uff0c\\u5373\\u7b49\\u4e8e ssthresh + 3*MSS \\u3002\\u8fd9\\u6837\\u505a\\u7684\\u7406\\u7531\\u662f\\uff1a\\u65e2\\u7136\\u53d1\\u9001\\u65b9\\u6536\\u5230\\u4e09\\u4e2a\\u91cd\\u590d\\u7684\\u786e\\u8ba4\\uff0c\\u5c31\\u8868\\u660e\\u6709\\u4e09\\u4e2a\\u5206\\u7ec4\\u5df2\\u7ecf\\u79bb\\u5f00\\u4e86\\u7f51\\u7edc\\u3002\\u8fd9\\u4e09\\u4e2a\\u5206\\u7ec4\\u4e0d\\u518d\\u6d88\\u8017\\u7f51\\u7edc\\u7684\\u8d44\\u6e90\\u800c\\u662f\\u505c\\u7559\\u5728\\u63a5\\u6536\\u65b9\\u7684\\u7f13\\u5b58\\u4e2d\\u3002\\u53ef\\u89c1\\u73b0\\u5728\\u7f51\\u7edc\\u4e2d\\u51cf\\u5c11\\u4e86\\u4e09\\u4e2a\\u5206\\u7ec4\\u3002\\u56e0\\u6b64\\u53ef\\u4ee5\\u9002\\u5f53\\u628a\\u62e5\\u585e\\u7a97\\u53e3\\u6269\\u5927\\u4e9b\\u3002\\n\\n\"}]}','white','2020-08-14 12:28:19'),(276,'TCP与UDP的区别','1.TCP是面向连接的，UDP是无连接的；\n> 什么叫无连接？UDP发送数据之前不需要建立连接\n\n\n2.TCP是可靠的，UDP不可靠；\n> 什么叫不可靠？UDP接收方收到报文后，不需要给出任何确认\n\n3.TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多；\n\n4.TCP是面向字节流的，UDP是面向报文的；\n> 什么意思？面向字节流是指发送数据时以字节为单位，一个数据包可以拆分成若干组进行发送，而UDP一个报文只能一次发完。\n\n\n5.TCP有拥塞控制机制，UDP没有。网络出现的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的，比如媒体通信，游戏；\n\n6.TCP首部开销（20字节）比UDP首部开销（8字节）要大\n\n7.UDP 的主机不需要维持复杂的连接状态表\n','<p>1.TCP是面向连接的，UDP是无连接的；</p><p>&gt; 什么叫无连接？UDP发送数据之前不需要建立连接</p><p><br></p><p><br></p><p>2.TCP是可靠的，UDP不可靠；</p><p>&gt; 什么叫不可靠？UDP接收方收到报文后，不需要给出任何确认</p><p><br></p><p>3.TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多；</p><p><br></p><p>4.TCP是面向字节流的，UDP是面向报文的；</p><p>&gt; 什么意思？面向字节流是指发送数据时以字节为单位，一个数据包可以拆分成若干组进行发送，而UDP一个报文只能一次发完。</p><p><br></p><p><br></p><p>5.TCP有拥塞控制机制，UDP没有。网络出现的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的，比如媒体通信，游戏；</p><p><br></p><p>6.TCP首部开销（20字节）比UDP首部开销（8字节）要大</p><p><br></p><p>7.UDP 的主机不需要维持复杂的连接状态表</p>','{\"ops\": [{\"insert\": \"1.TCP\\u662f\\u9762\\u5411\\u8fde\\u63a5\\u7684\\uff0cUDP\\u662f\\u65e0\\u8fde\\u63a5\\u7684\\uff1b\\n> \\u4ec0\\u4e48\\u53eb\\u65e0\\u8fde\\u63a5\\uff1fUDP\\u53d1\\u9001\\u6570\\u636e\\u4e4b\\u524d\\u4e0d\\u9700\\u8981\\u5efa\\u7acb\\u8fde\\u63a5\\n\\n\\n2.TCP\\u662f\\u53ef\\u9760\\u7684\\uff0cUDP\\u4e0d\\u53ef\\u9760\\uff1b\\n> \\u4ec0\\u4e48\\u53eb\\u4e0d\\u53ef\\u9760\\uff1fUDP\\u63a5\\u6536\\u65b9\\u6536\\u5230\\u62a5\\u6587\\u540e\\uff0c\\u4e0d\\u9700\\u8981\\u7ed9\\u51fa\\u4efb\\u4f55\\u786e\\u8ba4\\n\\n3.TCP\\u53ea\\u652f\\u6301\\u70b9\\u5bf9\\u70b9\\u901a\\u4fe1\\uff0cUDP\\u652f\\u6301\\u4e00\\u5bf9\\u4e00\\u3001\\u4e00\\u5bf9\\u591a\\u3001\\u591a\\u5bf9\\u4e00\\u3001\\u591a\\u5bf9\\u591a\\uff1b\\n\\n4.TCP\\u662f\\u9762\\u5411\\u5b57\\u8282\\u6d41\\u7684\\uff0cUDP\\u662f\\u9762\\u5411\\u62a5\\u6587\\u7684\\uff1b\\n> \\u4ec0\\u4e48\\u610f\\u601d\\uff1f\\u9762\\u5411\\u5b57\\u8282\\u6d41\\u662f\\u6307\\u53d1\\u9001\\u6570\\u636e\\u65f6\\u4ee5\\u5b57\\u8282\\u4e3a\\u5355\\u4f4d\\uff0c\\u4e00\\u4e2a\\u6570\\u636e\\u5305\\u53ef\\u4ee5\\u62c6\\u5206\\u6210\\u82e5\\u5e72\\u7ec4\\u8fdb\\u884c\\u53d1\\u9001\\uff0c\\u800cUDP\\u4e00\\u4e2a\\u62a5\\u6587\\u53ea\\u80fd\\u4e00\\u6b21\\u53d1\\u5b8c\\u3002\\n\\n\\n5.TCP\\u6709\\u62e5\\u585e\\u63a7\\u5236\\u673a\\u5236\\uff0cUDP\\u6ca1\\u6709\\u3002\\u7f51\\u7edc\\u51fa\\u73b0\\u7684\\u62e5\\u585e\\u4e0d\\u4f1a\\u4f7f\\u6e90\\u4e3b\\u673a\\u7684\\u53d1\\u9001\\u901f\\u7387\\u964d\\u4f4e\\uff0c\\u8fd9\\u5bf9\\u67d0\\u4e9b\\u5b9e\\u65f6\\u5e94\\u7528\\u662f\\u5f88\\u91cd\\u8981\\u7684\\uff0c\\u6bd4\\u5982\\u5a92\\u4f53\\u901a\\u4fe1\\uff0c\\u6e38\\u620f\\uff1b\\n\\n6.TCP\\u9996\\u90e8\\u5f00\\u9500\\uff0820\\u5b57\\u8282\\uff09\\u6bd4UDP\\u9996\\u90e8\\u5f00\\u9500\\uff088\\u5b57\\u8282\\uff09\\u8981\\u5927\\n\\n7.UDP \\u7684\\u4e3b\\u673a\\u4e0d\\u9700\\u8981\\u7ef4\\u6301\\u590d\\u6742\\u7684\\u8fde\\u63a5\\u72b6\\u6001\\u8868\\n\"}]}','white','2020-08-14 12:32:13'),(277,'什么时候选择TCP，什么时候选UDP？','对某些实时性要求比较高的情况，选择UDP，比如游戏，媒体通信，实时视频流（直播），即使出现传输错误也可以容忍；其它大部分情况下，HTTP都是用TCP，因为要求传输的内容可靠，不出现丢失\n','<p>对某些实时性要求比较高的情况，选择UDP，比如游戏，媒体通信，实时视频流（直播），即使出现传输错误也可以容忍；其它大部分情况下，HTTP都是用TCP，因为要求传输的内容可靠，不出现丢失</p>','{\"ops\": [{\"insert\": \"\\u5bf9\\u67d0\\u4e9b\\u5b9e\\u65f6\\u6027\\u8981\\u6c42\\u6bd4\\u8f83\\u9ad8\\u7684\\u60c5\\u51b5\\uff0c\\u9009\\u62e9UDP\\uff0c\\u6bd4\\u5982\\u6e38\\u620f\\uff0c\\u5a92\\u4f53\\u901a\\u4fe1\\uff0c\\u5b9e\\u65f6\\u89c6\\u9891\\u6d41\\uff08\\u76f4\\u64ad\\uff09\\uff0c\\u5373\\u4f7f\\u51fa\\u73b0\\u4f20\\u8f93\\u9519\\u8bef\\u4e5f\\u53ef\\u4ee5\\u5bb9\\u5fcd\\uff1b\\u5176\\u5b83\\u5927\\u90e8\\u5206\\u60c5\\u51b5\\u4e0b\\uff0cHTTP\\u90fd\\u662f\\u7528TCP\\uff0c\\u56e0\\u4e3a\\u8981\\u6c42\\u4f20\\u8f93\\u7684\\u5185\\u5bb9\\u53ef\\u9760\\uff0c\\u4e0d\\u51fa\\u73b0\\u4e22\\u5931\\n\"}]}','white','2020-08-14 12:35:08'),(278,'HTTP可以使用UDP吗？','HTTP不可以使用UDP，HTTP需要基于可靠的传输协议，而UDP不可靠\n','<p>HTTP不可以使用UDP，HTTP需要基于可靠的传输协议，而UDP不可靠</p>','{\"ops\": [{\"insert\": \"HTTP\\u4e0d\\u53ef\\u4ee5\\u4f7f\\u7528UDP\\uff0cHTTP\\u9700\\u8981\\u57fa\\u4e8e\\u53ef\\u9760\\u7684\\u4f20\\u8f93\\u534f\\u8bae\\uff0c\\u800cUDP\\u4e0d\\u53ef\\u9760\\n\"}]}','white','2020-08-14 12:35:23'),(279,'面向连接和无连接的区别','无连接的网络服务（数据报服务）-- 面向连接的网络服务（虚电路服务）\n\n虚电路服务：首先建立连接，所有的数据包经过相同的路径，服务质量有较好的保证；\n\n数据报服务：每个数据包含目的地址，数据路由相互独立（路径可能变化）；网络尽最大努力交付数据，但不保证不丢失、不保证先后顺序、不保证在时限内交付；网络发生拥塞时，可能会将一些分组丢弃；\n\n![virtual circuit](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191201081919108_30577.png)\n</details>\n','<p>无连接的网络服务（数据报服务）-- 面向连接的网络服务（虚电路服务）</p><p><br></p><p>虚电路服务：首先建立连接，所有的数据包经过相同的路径，服务质量有较好的保证；</p><p><br></p><p>数据报服务：每个数据包含目的地址，数据路由相互独立（路径可能变化）；网络尽最大努力交付数据，但不保证不丢失、不保证先后顺序、不保证在时限内交付；网络发生拥塞时，可能会将一些分组丢弃；</p><p><br></p><p>![virtual circuit](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191201081919108_30577.png)</p><p>&lt;/details&gt;</p>','{\"ops\": [{\"insert\": \"\\u65e0\\u8fde\\u63a5\\u7684\\u7f51\\u7edc\\u670d\\u52a1\\uff08\\u6570\\u636e\\u62a5\\u670d\\u52a1\\uff09-- \\u9762\\u5411\\u8fde\\u63a5\\u7684\\u7f51\\u7edc\\u670d\\u52a1\\uff08\\u865a\\u7535\\u8def\\u670d\\u52a1\\uff09\\n\\n\\u865a\\u7535\\u8def\\u670d\\u52a1\\uff1a\\u9996\\u5148\\u5efa\\u7acb\\u8fde\\u63a5\\uff0c\\u6240\\u6709\\u7684\\u6570\\u636e\\u5305\\u7ecf\\u8fc7\\u76f8\\u540c\\u7684\\u8def\\u5f84\\uff0c\\u670d\\u52a1\\u8d28\\u91cf\\u6709\\u8f83\\u597d\\u7684\\u4fdd\\u8bc1\\uff1b\\n\\n\\u6570\\u636e\\u62a5\\u670d\\u52a1\\uff1a\\u6bcf\\u4e2a\\u6570\\u636e\\u5305\\u542b\\u76ee\\u7684\\u5730\\u5740\\uff0c\\u6570\\u636e\\u8def\\u7531\\u76f8\\u4e92\\u72ec\\u7acb\\uff08\\u8def\\u5f84\\u53ef\\u80fd\\u53d8\\u5316\\uff09\\uff1b\\u7f51\\u7edc\\u5c3d\\u6700\\u5927\\u52aa\\u529b\\u4ea4\\u4ed8\\u6570\\u636e\\uff0c\\u4f46\\u4e0d\\u4fdd\\u8bc1\\u4e0d\\u4e22\\u5931\\u3001\\u4e0d\\u4fdd\\u8bc1\\u5148\\u540e\\u987a\\u5e8f\\u3001\\u4e0d\\u4fdd\\u8bc1\\u5728\\u65f6\\u9650\\u5185\\u4ea4\\u4ed8\\uff1b\\u7f51\\u7edc\\u53d1\\u751f\\u62e5\\u585e\\u65f6\\uff0c\\u53ef\\u80fd\\u4f1a\\u5c06\\u4e00\\u4e9b\\u5206\\u7ec4\\u4e22\\u5f03\\uff1b\\n\\n![virtual circuit](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191201081919108_30577.png)\\n</details>\\n\"}]}','white','2020-08-14 12:36:15'),(280,'TCP如何保证传输的可靠性','1. 数据包校验\n2. 对失序数据包重新排序（TCP报文具有序列号）\n3. 丢弃重复数据\n4. 应答机制：接收方收到数据之后，会发送一个确认（通常延迟几分之一秒）；\n5. 超时重发：发送方发出数据之后，启动一个定时器，超时未收到接收方的确认，则重新发送这个数据；\n6. 流量控制：确保接收端能够接收发送方的数据而不会缓冲区溢出\n','<p>1. 数据包校验</p><p>2. 对失序数据包重新排序（TCP报文具有序列号）</p><p>3. 丢弃重复数据</p><p>4. 应答机制：接收方收到数据之后，会发送一个确认（通常延迟几分之一秒）；</p><p>5. 超时重发：发送方发出数据之后，启动一个定时器，超时未收到接收方的确认，则重新发送这个数据；</p><p>6. 流量控制：确保接收端能够接收发送方的数据而不会缓冲区溢出</p>','{\"ops\": [{\"insert\": \"1. \\u6570\\u636e\\u5305\\u6821\\u9a8c\\n2. \\u5bf9\\u5931\\u5e8f\\u6570\\u636e\\u5305\\u91cd\\u65b0\\u6392\\u5e8f\\uff08TCP\\u62a5\\u6587\\u5177\\u6709\\u5e8f\\u5217\\u53f7\\uff09\\n3. \\u4e22\\u5f03\\u91cd\\u590d\\u6570\\u636e\\n4. \\u5e94\\u7b54\\u673a\\u5236\\uff1a\\u63a5\\u6536\\u65b9\\u6536\\u5230\\u6570\\u636e\\u4e4b\\u540e\\uff0c\\u4f1a\\u53d1\\u9001\\u4e00\\u4e2a\\u786e\\u8ba4\\uff08\\u901a\\u5e38\\u5ef6\\u8fdf\\u51e0\\u5206\\u4e4b\\u4e00\\u79d2\\uff09\\uff1b\\n5. \\u8d85\\u65f6\\u91cd\\u53d1\\uff1a\\u53d1\\u9001\\u65b9\\u53d1\\u51fa\\u6570\\u636e\\u4e4b\\u540e\\uff0c\\u542f\\u52a8\\u4e00\\u4e2a\\u5b9a\\u65f6\\u5668\\uff0c\\u8d85\\u65f6\\u672a\\u6536\\u5230\\u63a5\\u6536\\u65b9\\u7684\\u786e\\u8ba4\\uff0c\\u5219\\u91cd\\u65b0\\u53d1\\u9001\\u8fd9\\u4e2a\\u6570\\u636e\\uff1b\\n6. \\u6d41\\u91cf\\u63a7\\u5236\\uff1a\\u786e\\u4fdd\\u63a5\\u6536\\u7aef\\u80fd\\u591f\\u63a5\\u6536\\u53d1\\u9001\\u65b9\\u7684\\u6570\\u636e\\u800c\\u4e0d\\u4f1a\\u7f13\\u51b2\\u533a\\u6ea2\\u51fa\\n\"}]}','white','2020-08-14 12:36:35'),(281,'HTTP和HTTPS有什么区别？','1. 端口不同：HTTP使用的是80端口，HTTPS使用443端口；\n2. HTTP（超文本传输协议）信息是明文传输，HTTPS运行在SSL(Secure Socket Layer)之上，添加了加密和认证机制，更加安全；\n3. HTTPS由于加密解密会带来更大的CPU和内存开销；\n4. HTTPS通信需要证书，一般需要向证书颁发机构（CA）购买\n','<p>1. 端口不同：HTTP使用的是80端口，HTTPS使用443端口；</p><p>2. HTTP（超文本传输协议）信息是明文传输，HTTPS运行在SSL(Secure Socket Layer)之上，添加了加密和认证机制，更加安全；</p><p>3. HTTPS由于加密解密会带来更大的CPU和内存开销；</p><p>4. HTTPS通信需要证书，一般需要向证书颁发机构（CA）购买</p>','{\"ops\": [{\"insert\": \"1. \\u7aef\\u53e3\\u4e0d\\u540c\\uff1aHTTP\\u4f7f\\u7528\\u7684\\u662f80\\u7aef\\u53e3\\uff0cHTTPS\\u4f7f\\u7528443\\u7aef\\u53e3\\uff1b\\n2. HTTP\\uff08\\u8d85\\u6587\\u672c\\u4f20\\u8f93\\u534f\\u8bae\\uff09\\u4fe1\\u606f\\u662f\\u660e\\u6587\\u4f20\\u8f93\\uff0cHTTPS\\u8fd0\\u884c\\u5728SSL(Secure Socket Layer)\\u4e4b\\u4e0a\\uff0c\\u6dfb\\u52a0\\u4e86\\u52a0\\u5bc6\\u548c\\u8ba4\\u8bc1\\u673a\\u5236\\uff0c\\u66f4\\u52a0\\u5b89\\u5168\\uff1b\\n3. HTTPS\\u7531\\u4e8e\\u52a0\\u5bc6\\u89e3\\u5bc6\\u4f1a\\u5e26\\u6765\\u66f4\\u5927\\u7684CPU\\u548c\\u5185\\u5b58\\u5f00\\u9500\\uff1b\\n4. HTTPS\\u901a\\u4fe1\\u9700\\u8981\\u8bc1\\u4e66\\uff0c\\u4e00\\u822c\\u9700\\u8981\\u5411\\u8bc1\\u4e66\\u9881\\u53d1\\u673a\\u6784\\uff08CA\\uff09\\u8d2d\\u4e70\\n\"}]}','white','2020-08-14 12:36:50'),(282,'Https的连接过程？','1. 客户端向服务器发送请求，同时发送客户端支持的一套加密规则（包括对称加密、非对称加密、摘要算法）；\n2. 服务器从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，**加密公钥**（用于非对称加密），以及证书的颁发机构等信息（证书中的私钥只能用于服务器端进行解密）；\n3. 客户端验证服务器的合法性，包括：证书是否过期，CA 是否可靠，发行者证书的公钥能否正确解开服务器证书的“发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配；\n4. 如果证书受信任，或者用户接收了不受信任的证书，浏览器会生成一个**随机密钥**（用于对称算法），并用服务器提供的公钥加密（采用非对称算法对密钥加密）；使用Hash算法对握手消息进行**摘要**计算，并对摘要使用之前产生的密钥加密（对称算法）；将加密后的随机密钥和摘要一起发送给服务器；\n5. 服务器使用自己的私钥解密，得到对称加密的密钥，用这个密钥解密出Hash摘要值，并验证握手消息是否一致；如果一致，服务器使用对称加密的密钥加密握手消息发给浏览器；\n6. 浏览器解密并验证摘要，若一致，则握手结束。之后的数据传送都使用对称加密的密钥进行加密\n\n总结：非对称加密算法用于在握手过程中加密生成的密码；对称加密算法用于对真正传输的数据进行加密；HASH算法用于验证数据的完整性。\n','<p>1. 客户端向服务器发送请求，同时发送客户端支持的一套加密规则（包括对称加密、非对称加密、摘要算法）；</p><p>2. 服务器从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，**加密公钥**（用于非对称加密），以及证书的颁发机构等信息（证书中的私钥只能用于服务器端进行解密）；</p><p>3. 客户端验证服务器的合法性，包括：证书是否过期，CA 是否可靠，发行者证书的公钥能否正确解开服务器证书的“发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配；</p><p>4. 如果证书受信任，或者用户接收了不受信任的证书，浏览器会生成一个**随机密钥**（用于对称算法），并用服务器提供的公钥加密（采用非对称算法对密钥加密）；使用Hash算法对握手消息进行**摘要**计算，并对摘要使用之前产生的密钥加密（对称算法）；将加密后的随机密钥和摘要一起发送给服务器；</p><p>5. 服务器使用自己的私钥解密，得到对称加密的密钥，用这个密钥解密出Hash摘要值，并验证握手消息是否一致；如果一致，服务器使用对称加密的密钥加密握手消息发给浏览器；</p><p>6. 浏览器解密并验证摘要，若一致，则握手结束。之后的数据传送都使用对称加密的密钥进行加密</p><p><br></p><p>总结：非对称加密算法用于在握手过程中加密生成的密码；对称加密算法用于对真正传输的数据进行加密；HASH算法用于验证数据的完整性。</p>','{\"ops\": [{\"insert\": \"1. \\u5ba2\\u6237\\u7aef\\u5411\\u670d\\u52a1\\u5668\\u53d1\\u9001\\u8bf7\\u6c42\\uff0c\\u540c\\u65f6\\u53d1\\u9001\\u5ba2\\u6237\\u7aef\\u652f\\u6301\\u7684\\u4e00\\u5957\\u52a0\\u5bc6\\u89c4\\u5219\\uff08\\u5305\\u62ec\\u5bf9\\u79f0\\u52a0\\u5bc6\\u3001\\u975e\\u5bf9\\u79f0\\u52a0\\u5bc6\\u3001\\u6458\\u8981\\u7b97\\u6cd5\\uff09\\uff1b\\n2. \\u670d\\u52a1\\u5668\\u4ece\\u4e2d\\u9009\\u51fa\\u4e00\\u7ec4\\u52a0\\u5bc6\\u7b97\\u6cd5\\u4e0eHASH\\u7b97\\u6cd5\\uff0c\\u5e76\\u5c06\\u81ea\\u5df1\\u7684\\u8eab\\u4efd\\u4fe1\\u606f\\u4ee5\\u8bc1\\u4e66\\u7684\\u5f62\\u5f0f\\u53d1\\u56de\\u7ed9\\u6d4f\\u89c8\\u5668\\u3002\\u8bc1\\u4e66\\u91cc\\u9762\\u5305\\u542b\\u4e86\\u7f51\\u7ad9\\u5730\\u5740\\uff0c**\\u52a0\\u5bc6\\u516c\\u94a5**\\uff08\\u7528\\u4e8e\\u975e\\u5bf9\\u79f0\\u52a0\\u5bc6\\uff09\\uff0c\\u4ee5\\u53ca\\u8bc1\\u4e66\\u7684\\u9881\\u53d1\\u673a\\u6784\\u7b49\\u4fe1\\u606f\\uff08\\u8bc1\\u4e66\\u4e2d\\u7684\\u79c1\\u94a5\\u53ea\\u80fd\\u7528\\u4e8e\\u670d\\u52a1\\u5668\\u7aef\\u8fdb\\u884c\\u89e3\\u5bc6\\uff09\\uff1b\\n3. \\u5ba2\\u6237\\u7aef\\u9a8c\\u8bc1\\u670d\\u52a1\\u5668\\u7684\\u5408\\u6cd5\\u6027\\uff0c\\u5305\\u62ec\\uff1a\\u8bc1\\u4e66\\u662f\\u5426\\u8fc7\\u671f\\uff0cCA \\u662f\\u5426\\u53ef\\u9760\\uff0c\\u53d1\\u884c\\u8005\\u8bc1\\u4e66\\u7684\\u516c\\u94a5\\u80fd\\u5426\\u6b63\\u786e\\u89e3\\u5f00\\u670d\\u52a1\\u5668\\u8bc1\\u4e66\\u7684\\u201c\\u53d1\\u884c\\u8005\\u7684\\u6570\\u5b57\\u7b7e\\u540d\\u201d\\uff0c\\u670d\\u52a1\\u5668\\u8bc1\\u4e66\\u4e0a\\u7684\\u57df\\u540d\\u662f\\u5426\\u548c\\u670d\\u52a1\\u5668\\u7684\\u5b9e\\u9645\\u57df\\u540d\\u76f8\\u5339\\u914d\\uff1b\\n4. \\u5982\\u679c\\u8bc1\\u4e66\\u53d7\\u4fe1\\u4efb\\uff0c\\u6216\\u8005\\u7528\\u6237\\u63a5\\u6536\\u4e86\\u4e0d\\u53d7\\u4fe1\\u4efb\\u7684\\u8bc1\\u4e66\\uff0c\\u6d4f\\u89c8\\u5668\\u4f1a\\u751f\\u6210\\u4e00\\u4e2a**\\u968f\\u673a\\u5bc6\\u94a5**\\uff08\\u7528\\u4e8e\\u5bf9\\u79f0\\u7b97\\u6cd5\\uff09\\uff0c\\u5e76\\u7528\\u670d\\u52a1\\u5668\\u63d0\\u4f9b\\u7684\\u516c\\u94a5\\u52a0\\u5bc6\\uff08\\u91c7\\u7528\\u975e\\u5bf9\\u79f0\\u7b97\\u6cd5\\u5bf9\\u5bc6\\u94a5\\u52a0\\u5bc6\\uff09\\uff1b\\u4f7f\\u7528Hash\\u7b97\\u6cd5\\u5bf9\\u63e1\\u624b\\u6d88\\u606f\\u8fdb\\u884c**\\u6458\\u8981**\\u8ba1\\u7b97\\uff0c\\u5e76\\u5bf9\\u6458\\u8981\\u4f7f\\u7528\\u4e4b\\u524d\\u4ea7\\u751f\\u7684\\u5bc6\\u94a5\\u52a0\\u5bc6\\uff08\\u5bf9\\u79f0\\u7b97\\u6cd5\\uff09\\uff1b\\u5c06\\u52a0\\u5bc6\\u540e\\u7684\\u968f\\u673a\\u5bc6\\u94a5\\u548c\\u6458\\u8981\\u4e00\\u8d77\\u53d1\\u9001\\u7ed9\\u670d\\u52a1\\u5668\\uff1b\\n5. \\u670d\\u52a1\\u5668\\u4f7f\\u7528\\u81ea\\u5df1\\u7684\\u79c1\\u94a5\\u89e3\\u5bc6\\uff0c\\u5f97\\u5230\\u5bf9\\u79f0\\u52a0\\u5bc6\\u7684\\u5bc6\\u94a5\\uff0c\\u7528\\u8fd9\\u4e2a\\u5bc6\\u94a5\\u89e3\\u5bc6\\u51faHash\\u6458\\u8981\\u503c\\uff0c\\u5e76\\u9a8c\\u8bc1\\u63e1\\u624b\\u6d88\\u606f\\u662f\\u5426\\u4e00\\u81f4\\uff1b\\u5982\\u679c\\u4e00\\u81f4\\uff0c\\u670d\\u52a1\\u5668\\u4f7f\\u7528\\u5bf9\\u79f0\\u52a0\\u5bc6\\u7684\\u5bc6\\u94a5\\u52a0\\u5bc6\\u63e1\\u624b\\u6d88\\u606f\\u53d1\\u7ed9\\u6d4f\\u89c8\\u5668\\uff1b\\n6. \\u6d4f\\u89c8\\u5668\\u89e3\\u5bc6\\u5e76\\u9a8c\\u8bc1\\u6458\\u8981\\uff0c\\u82e5\\u4e00\\u81f4\\uff0c\\u5219\\u63e1\\u624b\\u7ed3\\u675f\\u3002\\u4e4b\\u540e\\u7684\\u6570\\u636e\\u4f20\\u9001\\u90fd\\u4f7f\\u7528\\u5bf9\\u79f0\\u52a0\\u5bc6\\u7684\\u5bc6\\u94a5\\u8fdb\\u884c\\u52a0\\u5bc6\\n\\n\\u603b\\u7ed3\\uff1a\\u975e\\u5bf9\\u79f0\\u52a0\\u5bc6\\u7b97\\u6cd5\\u7528\\u4e8e\\u5728\\u63e1\\u624b\\u8fc7\\u7a0b\\u4e2d\\u52a0\\u5bc6\\u751f\\u6210\\u7684\\u5bc6\\u7801\\uff1b\\u5bf9\\u79f0\\u52a0\\u5bc6\\u7b97\\u6cd5\\u7528\\u4e8e\\u5bf9\\u771f\\u6b63\\u4f20\\u8f93\\u7684\\u6570\\u636e\\u8fdb\\u884c\\u52a0\\u5bc6\\uff1bHASH\\u7b97\\u6cd5\\u7528\\u4e8e\\u9a8c\\u8bc1\\u6570\\u636e\\u7684\\u5b8c\\u6574\\u6027\\u3002\\n\"}]}','white','2020-08-14 12:37:10'),(283,'输入 www.baidu.com，怎么变成 https://www.baidu.com 的，怎么确定用HTTP还是HTTPS？','一种是原始的302跳转，服务器把所有的HTTp流量跳转到HTTPS。但这样有一个漏洞，就是中间人可能在第一次访问站点的时候就劫持。\n解决方法是引入HSTS机制，用户浏览器在访问站点的时候强制使用HTTPS。\n','<p>一种是原始的302跳转，服务器把所有的HTTp流量跳转到HTTPS。但这样有一个漏洞，就是中间人可能在第一次访问站点的时候就劫持。</p><p>解决方法是引入HSTS机制，用户浏览器在访问站点的时候强制使用HTTPS。</p>','{\"ops\": [{\"insert\": \"\\u4e00\\u79cd\\u662f\\u539f\\u59cb\\u7684302\\u8df3\\u8f6c\\uff0c\\u670d\\u52a1\\u5668\\u628a\\u6240\\u6709\\u7684HTTp\\u6d41\\u91cf\\u8df3\\u8f6c\\u5230HTTPS\\u3002\\u4f46\\u8fd9\\u6837\\u6709\\u4e00\\u4e2a\\u6f0f\\u6d1e\\uff0c\\u5c31\\u662f\\u4e2d\\u95f4\\u4eba\\u53ef\\u80fd\\u5728\\u7b2c\\u4e00\\u6b21\\u8bbf\\u95ee\\u7ad9\\u70b9\\u7684\\u65f6\\u5019\\u5c31\\u52ab\\u6301\\u3002\\n\\u89e3\\u51b3\\u65b9\\u6cd5\\u662f\\u5f15\\u5165HSTS\\u673a\\u5236\\uff0c\\u7528\\u6237\\u6d4f\\u89c8\\u5668\\u5728\\u8bbf\\u95ee\\u7ad9\\u70b9\\u7684\\u65f6\\u5019\\u5f3a\\u5236\\u4f7f\\u7528HTTPS\\u3002\\n\"}]}','white','2020-08-14 12:37:37'),(284,'什么是对称加密、非对称加密？区别是什么？','- 对称加密：加密和解密采用相同的密钥。如：DES、RC2、RC4\n- 非对称加密：需要两个密钥：公钥和私钥。如果用公钥加密，需要用私钥才能解密。如：RSA\n- 区别：对称加密速度更快，通常用于大量数据的加密；非对称加密安全性更高（不需要传送私钥）\n','<p>- 对称加密：加密和解密采用相同的密钥。如：DES、RC2、RC4</p><p>- 非对称加密：需要两个密钥：公钥和私钥。如果用公钥加密，需要用私钥才能解密。如：RSA</p><p>- 区别：对称加密速度更快，通常用于大量数据的加密；非对称加密安全性更高（不需要传送私钥）</p>','{\"ops\": [{\"insert\": \"- \\u5bf9\\u79f0\\u52a0\\u5bc6\\uff1a\\u52a0\\u5bc6\\u548c\\u89e3\\u5bc6\\u91c7\\u7528\\u76f8\\u540c\\u7684\\u5bc6\\u94a5\\u3002\\u5982\\uff1aDES\\u3001RC2\\u3001RC4\\n- \\u975e\\u5bf9\\u79f0\\u52a0\\u5bc6\\uff1a\\u9700\\u8981\\u4e24\\u4e2a\\u5bc6\\u94a5\\uff1a\\u516c\\u94a5\\u548c\\u79c1\\u94a5\\u3002\\u5982\\u679c\\u7528\\u516c\\u94a5\\u52a0\\u5bc6\\uff0c\\u9700\\u8981\\u7528\\u79c1\\u94a5\\u624d\\u80fd\\u89e3\\u5bc6\\u3002\\u5982\\uff1aRSA\\n- \\u533a\\u522b\\uff1a\\u5bf9\\u79f0\\u52a0\\u5bc6\\u901f\\u5ea6\\u66f4\\u5feb\\uff0c\\u901a\\u5e38\\u7528\\u4e8e\\u5927\\u91cf\\u6570\\u636e\\u7684\\u52a0\\u5bc6\\uff1b\\u975e\\u5bf9\\u79f0\\u52a0\\u5bc6\\u5b89\\u5168\\u6027\\u66f4\\u9ad8\\uff08\\u4e0d\\u9700\\u8981\\u4f20\\u9001\\u79c1\\u94a5\\uff09\\n\"}]}','white','2020-08-14 12:37:54'),(285,' 数字签名、报文摘要的原理','- 发送者A用私钥进行签名，接收者B用公钥验证签名。因为除A外没有人有私钥，所以B相信签名是来自A。A不可抵赖，B也不能伪造报文。\n- 摘要算法:MD5、SHA\n','<p>- 发送者A用私钥进行签名，接收者B用公钥验证签名。因为除A外没有人有私钥，所以B相信签名是来自A。A不可抵赖，B也不能伪造报文。</p><p>- 摘要算法:MD5、SHA</p>','{\"ops\": [{\"insert\": \"- \\u53d1\\u9001\\u8005A\\u7528\\u79c1\\u94a5\\u8fdb\\u884c\\u7b7e\\u540d\\uff0c\\u63a5\\u6536\\u8005B\\u7528\\u516c\\u94a5\\u9a8c\\u8bc1\\u7b7e\\u540d\\u3002\\u56e0\\u4e3a\\u9664A\\u5916\\u6ca1\\u6709\\u4eba\\u6709\\u79c1\\u94a5\\uff0c\\u6240\\u4ee5B\\u76f8\\u4fe1\\u7b7e\\u540d\\u662f\\u6765\\u81eaA\\u3002A\\u4e0d\\u53ef\\u62b5\\u8d56\\uff0cB\\u4e5f\\u4e0d\\u80fd\\u4f2a\\u9020\\u62a5\\u6587\\u3002\\n- \\u6458\\u8981\\u7b97\\u6cd5:MD5\\u3001SHA\\n\"}]}','white','2020-08-14 12:38:06'),(286,'GET与POST的区别？','1. GET是幂等的，即读取同一个资源，总是得到相同的数据，POST不是幂等的；\n2. GET一般用于从服务器获取资源，而POST有可能改变服务器上的资源；\n3. 请求形式上：GET请求的数据附在URL之后，在HTTP请求头中；POST请求的数据在请求体中；\n4. 安全性：GET请求可被缓存、收藏、保留到历史记录，且其请求数据明文出现在URL中。POST的参数不会被保存，安全性相对较高；\n5. GET只允许ASCII字符，POST对数据类型没有要求，也允许二进制数据；\n6. GET的长度有限制（操作系统或者浏览器），而POST数据大小无限制\n','<p>1. GET是幂等的，即读取同一个资源，总是得到相同的数据，POST不是幂等的；</p><p>2. GET一般用于从服务器获取资源，而POST有可能改变服务器上的资源；</p><p>3. 请求形式上：GET请求的数据附在URL之后，在HTTP请求头中；POST请求的数据在请求体中；</p><p>4. 安全性：GET请求可被缓存、收藏、保留到历史记录，且其请求数据明文出现在URL中。POST的参数不会被保存，安全性相对较高；</p><p>5. GET只允许ASCII字符，POST对数据类型没有要求，也允许二进制数据；</p><p>6. GET的长度有限制（操作系统或者浏览器），而POST数据大小无限制</p>','{\"ops\": [{\"insert\": \"1. GET\\u662f\\u5e42\\u7b49\\u7684\\uff0c\\u5373\\u8bfb\\u53d6\\u540c\\u4e00\\u4e2a\\u8d44\\u6e90\\uff0c\\u603b\\u662f\\u5f97\\u5230\\u76f8\\u540c\\u7684\\u6570\\u636e\\uff0cPOST\\u4e0d\\u662f\\u5e42\\u7b49\\u7684\\uff1b\\n2. GET\\u4e00\\u822c\\u7528\\u4e8e\\u4ece\\u670d\\u52a1\\u5668\\u83b7\\u53d6\\u8d44\\u6e90\\uff0c\\u800cPOST\\u6709\\u53ef\\u80fd\\u6539\\u53d8\\u670d\\u52a1\\u5668\\u4e0a\\u7684\\u8d44\\u6e90\\uff1b\\n3. \\u8bf7\\u6c42\\u5f62\\u5f0f\\u4e0a\\uff1aGET\\u8bf7\\u6c42\\u7684\\u6570\\u636e\\u9644\\u5728URL\\u4e4b\\u540e\\uff0c\\u5728HTTP\\u8bf7\\u6c42\\u5934\\u4e2d\\uff1bPOST\\u8bf7\\u6c42\\u7684\\u6570\\u636e\\u5728\\u8bf7\\u6c42\\u4f53\\u4e2d\\uff1b\\n4. \\u5b89\\u5168\\u6027\\uff1aGET\\u8bf7\\u6c42\\u53ef\\u88ab\\u7f13\\u5b58\\u3001\\u6536\\u85cf\\u3001\\u4fdd\\u7559\\u5230\\u5386\\u53f2\\u8bb0\\u5f55\\uff0c\\u4e14\\u5176\\u8bf7\\u6c42\\u6570\\u636e\\u660e\\u6587\\u51fa\\u73b0\\u5728URL\\u4e2d\\u3002POST\\u7684\\u53c2\\u6570\\u4e0d\\u4f1a\\u88ab\\u4fdd\\u5b58\\uff0c\\u5b89\\u5168\\u6027\\u76f8\\u5bf9\\u8f83\\u9ad8\\uff1b\\n5. GET\\u53ea\\u5141\\u8bb8ASCII\\u5b57\\u7b26\\uff0cPOST\\u5bf9\\u6570\\u636e\\u7c7b\\u578b\\u6ca1\\u6709\\u8981\\u6c42\\uff0c\\u4e5f\\u5141\\u8bb8\\u4e8c\\u8fdb\\u5236\\u6570\\u636e\\uff1b\\n6. GET\\u7684\\u957f\\u5ea6\\u6709\\u9650\\u5236\\uff08\\u64cd\\u4f5c\\u7cfb\\u7edf\\u6216\\u8005\\u6d4f\\u89c8\\u5668\\uff09\\uff0c\\u800cPOST\\u6570\\u636e\\u5927\\u5c0f\\u65e0\\u9650\\u5236\\n\"}]}','white','2020-08-14 12:38:15'),(287,'Session与Cookie的区别？','\nSession是服务器端保持状态的方案，Cookie是客户端保持状态的方案\n\nCookie保存在客户端本地，客户端请求服务器时会将Cookie一起提交；Session保存在服务端，通过检索Sessionid查看状态。保存Sessionid的方式可以采用Cookie，如果禁用了Cookie，可以使用URL重写机制（把会话ID保存在URL中）。\n','<p><br></p><p>Session是服务器端保持状态的方案，Cookie是客户端保持状态的方案</p><p><br></p><p>Cookie保存在客户端本地，客户端请求服务器时会将Cookie一起提交；Session保存在服务端，通过检索Sessionid查看状态。保存Sessionid的方式可以采用Cookie，如果禁用了Cookie，可以使用URL重写机制（把会话ID保存在URL中）。</p>','{\"ops\": [{\"insert\": \"\\nSession\\u662f\\u670d\\u52a1\\u5668\\u7aef\\u4fdd\\u6301\\u72b6\\u6001\\u7684\\u65b9\\u6848\\uff0cCookie\\u662f\\u5ba2\\u6237\\u7aef\\u4fdd\\u6301\\u72b6\\u6001\\u7684\\u65b9\\u6848\\n\\nCookie\\u4fdd\\u5b58\\u5728\\u5ba2\\u6237\\u7aef\\u672c\\u5730\\uff0c\\u5ba2\\u6237\\u7aef\\u8bf7\\u6c42\\u670d\\u52a1\\u5668\\u65f6\\u4f1a\\u5c06Cookie\\u4e00\\u8d77\\u63d0\\u4ea4\\uff1bSession\\u4fdd\\u5b58\\u5728\\u670d\\u52a1\\u7aef\\uff0c\\u901a\\u8fc7\\u68c0\\u7d22Sessionid\\u67e5\\u770b\\u72b6\\u6001\\u3002\\u4fdd\\u5b58Sessionid\\u7684\\u65b9\\u5f0f\\u53ef\\u4ee5\\u91c7\\u7528Cookie\\uff0c\\u5982\\u679c\\u7981\\u7528\\u4e86Cookie\\uff0c\\u53ef\\u4ee5\\u4f7f\\u7528URL\\u91cd\\u5199\\u673a\\u5236\\uff08\\u628a\\u4f1a\\u8bddID\\u4fdd\\u5b58\\u5728URL\\u4e2d\\uff09\\u3002\\n\"}]}','white','2020-08-14 12:38:32'),(288,'从输入网址到获得页面的过程 (越详细越好)？','1. 浏览器查询 DNS，获取域名对应的IP地址:具体过程包括浏览器搜索自身的DNS缓存、搜索操作系统的DNS缓存、读取本地的Host文件和向本地DNS服务器进行查询等。对于向本地DNS服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析(此解析具有权威性)；如果要查询的域名不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；\n2. 浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；\n3. TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；\n4. 服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；\n5. 浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；\n6. 浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。\n','<p>1. 浏览器查询 DNS，获取域名对应的IP地址:具体过程包括浏览器搜索自身的DNS缓存、搜索操作系统的DNS缓存、读取本地的Host文件和向本地DNS服务器进行查询等。对于向本地DNS服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析(此解析具有权威性)；如果要查询的域名不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；</p><p>2. 浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</p><p>3. TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；</p><p>4. 服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</p><p>5. 浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；</p><p>6. 浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</p>','{\"ops\": [{\"insert\": \"1. \\u6d4f\\u89c8\\u5668\\u67e5\\u8be2 DNS\\uff0c\\u83b7\\u53d6\\u57df\\u540d\\u5bf9\\u5e94\\u7684IP\\u5730\\u5740:\\u5177\\u4f53\\u8fc7\\u7a0b\\u5305\\u62ec\\u6d4f\\u89c8\\u5668\\u641c\\u7d22\\u81ea\\u8eab\\u7684DNS\\u7f13\\u5b58\\u3001\\u641c\\u7d22\\u64cd\\u4f5c\\u7cfb\\u7edf\\u7684DNS\\u7f13\\u5b58\\u3001\\u8bfb\\u53d6\\u672c\\u5730\\u7684Host\\u6587\\u4ef6\\u548c\\u5411\\u672c\\u5730DNS\\u670d\\u52a1\\u5668\\u8fdb\\u884c\\u67e5\\u8be2\\u7b49\\u3002\\u5bf9\\u4e8e\\u5411\\u672c\\u5730DNS\\u670d\\u52a1\\u5668\\u8fdb\\u884c\\u67e5\\u8be2\\uff0c\\u5982\\u679c\\u8981\\u67e5\\u8be2\\u7684\\u57df\\u540d\\u5305\\u542b\\u5728\\u672c\\u5730\\u914d\\u7f6e\\u533a\\u57df\\u8d44\\u6e90\\u4e2d\\uff0c\\u5219\\u8fd4\\u56de\\u89e3\\u6790\\u7ed3\\u679c\\u7ed9\\u5ba2\\u6237\\u673a\\uff0c\\u5b8c\\u6210\\u57df\\u540d\\u89e3\\u6790(\\u6b64\\u89e3\\u6790\\u5177\\u6709\\u6743\\u5a01\\u6027)\\uff1b\\u5982\\u679c\\u8981\\u67e5\\u8be2\\u7684\\u57df\\u540d\\u4e0d\\u7531\\u672c\\u5730DNS\\u670d\\u52a1\\u5668\\u533a\\u57df\\u89e3\\u6790\\uff0c\\u4f46\\u8be5\\u670d\\u52a1\\u5668\\u5df2\\u7f13\\u5b58\\u4e86\\u6b64\\u7f51\\u5740\\u6620\\u5c04\\u5173\\u7cfb\\uff0c\\u5219\\u8c03\\u7528\\u8fd9\\u4e2aIP\\u5730\\u5740\\u6620\\u5c04\\uff0c\\u5b8c\\u6210\\u57df\\u540d\\u89e3\\u6790\\uff08\\u6b64\\u89e3\\u6790\\u4e0d\\u5177\\u6709\\u6743\\u5a01\\u6027\\uff09\\u3002\\u5982\\u679c\\u672c\\u5730\\u57df\\u540d\\u670d\\u52a1\\u5668\\u5e76\\u672a\\u7f13\\u5b58\\u8be5\\u7f51\\u5740\\u6620\\u5c04\\u5173\\u7cfb\\uff0c\\u90a3\\u4e48\\u5c06\\u6839\\u636e\\u5176\\u8bbe\\u7f6e\\u53d1\\u8d77\\u9012\\u5f52\\u67e5\\u8be2\\u6216\\u8005\\u8fed\\u4ee3\\u67e5\\u8be2\\uff1b\\n2. \\u6d4f\\u89c8\\u5668\\u83b7\\u5f97\\u57df\\u540d\\u5bf9\\u5e94\\u7684IP\\u5730\\u5740\\u4ee5\\u540e\\uff0c\\u6d4f\\u89c8\\u5668\\u5411\\u670d\\u52a1\\u5668\\u8bf7\\u6c42\\u5efa\\u7acb\\u94fe\\u63a5\\uff0c\\u53d1\\u8d77\\u4e09\\u6b21\\u63e1\\u624b\\uff1b\\n3. TCP/IP\\u94fe\\u63a5\\u5efa\\u7acb\\u8d77\\u6765\\u540e\\uff0c\\u6d4f\\u89c8\\u5668\\u5411\\u670d\\u52a1\\u5668\\u53d1\\u9001HTTP\\u8bf7\\u6c42\\uff1b\\n4. \\u670d\\u52a1\\u5668\\u63a5\\u6536\\u5230\\u8fd9\\u4e2a\\u8bf7\\u6c42\\uff0c\\u5e76\\u6839\\u636e\\u8def\\u5f84\\u53c2\\u6570\\u6620\\u5c04\\u5230\\u7279\\u5b9a\\u7684\\u8bf7\\u6c42\\u5904\\u7406\\u5668\\u8fdb\\u884c\\u5904\\u7406\\uff0c\\u5e76\\u5c06\\u5904\\u7406\\u7ed3\\u679c\\u53ca\\u76f8\\u5e94\\u7684\\u89c6\\u56fe\\u8fd4\\u56de\\u7ed9\\u6d4f\\u89c8\\u5668\\uff1b\\n5. \\u6d4f\\u89c8\\u5668\\u89e3\\u6790\\u5e76\\u6e32\\u67d3\\u89c6\\u56fe\\uff0c\\u82e5\\u9047\\u5230\\u5bf9js\\u6587\\u4ef6\\u3001css\\u6587\\u4ef6\\u53ca\\u56fe\\u7247\\u7b49\\u9759\\u6001\\u8d44\\u6e90\\u7684\\u5f15\\u7528\\uff0c\\u5219\\u91cd\\u590d\\u4e0a\\u8ff0\\u6b65\\u9aa4\\u5e76\\u5411\\u670d\\u52a1\\u5668\\u8bf7\\u6c42\\u8fd9\\u4e9b\\u8d44\\u6e90\\uff1b\\n6. \\u6d4f\\u89c8\\u5668\\u6839\\u636e\\u5176\\u8bf7\\u6c42\\u5230\\u7684\\u8d44\\u6e90\\u3001\\u6570\\u636e\\u6e32\\u67d3\\u9875\\u9762\\uff0c\\u6700\\u7ec8\\u5411\\u7528\\u6237\\u5448\\u73b0\\u4e00\\u4e2a\\u5b8c\\u6574\\u7684\\u9875\\u9762\\u3002\\n\"}]}','white','2020-08-14 12:38:46'),(289,'HTTP请求有哪些常见状态码？','1. 2xx状态码：操作成功。200 OK\n2. 3xx状态码：重定向。301 永久重定向；302暂时重定向\n3. 4xx状态码：客户端错误。400 Bad Request；401 Unauthorized；403 Forbidden；404 Not Found；\n4. 5xx状态码：服务端错误。500服务器内部错误；501服务不可用\n\n','<p>1. 2xx状态码：操作成功。200 OK</p><p>2. 3xx状态码：重定向。301 永久重定向；302暂时重定向</p><p>3. 4xx状态码：客户端错误。400 Bad Request；401 Unauthorized；403 Forbidden；404 Not Found；</p><p>4. 5xx状态码：服务端错误。500服务器内部错误；501服务不可用</p><p><br></p>','{\"ops\": [{\"insert\": \"1. 2xx\\u72b6\\u6001\\u7801\\uff1a\\u64cd\\u4f5c\\u6210\\u529f\\u3002200 OK\\n2. 3xx\\u72b6\\u6001\\u7801\\uff1a\\u91cd\\u5b9a\\u5411\\u3002301 \\u6c38\\u4e45\\u91cd\\u5b9a\\u5411\\uff1b302\\u6682\\u65f6\\u91cd\\u5b9a\\u5411\\n3. 4xx\\u72b6\\u6001\\u7801\\uff1a\\u5ba2\\u6237\\u7aef\\u9519\\u8bef\\u3002400 Bad Request\\uff1b401 Unauthorized\\uff1b403 Forbidden\\uff1b404 Not Found\\uff1b\\n4. 5xx\\u72b6\\u6001\\u7801\\uff1a\\u670d\\u52a1\\u7aef\\u9519\\u8bef\\u3002500\\u670d\\u52a1\\u5668\\u5185\\u90e8\\u9519\\u8bef\\uff1b501\\u670d\\u52a1\\u4e0d\\u53ef\\u7528\\n\\n\"}]}','white','2020-08-14 12:39:19'),(290,'什么是RIP (Routing Information Protocol, 距离矢量路由协议)? 算法是什么？','每个路由器维护一张表，记录该路由器到其它网络的”跳数“，路由器到与其直接连接的网络的跳数是1，每多经过一个路由器跳数就加1；更新该表时和相邻路由器交换路由信息；路由器允许一个路径最多包含15个路由器，如果跳数为16，则不可达。交付数据报时优先选取距离最短的路径。\n\n**优缺点**\n\n- 实现简单，开销小\n- 随着网络规模扩大开销也会增大；\n- 最大距离为15，限制了网络的规模；\n- 当网络出现故障时，要经过较长的时间才能将此信息传递到所有路由器\n','<p>每个路由器维护一张表，记录该路由器到其它网络的”跳数“，路由器到与其直接连接的网络的跳数是1，每多经过一个路由器跳数就加1；更新该表时和相邻路由器交换路由信息；路由器允许一个路径最多包含15个路由器，如果跳数为16，则不可达。交付数据报时优先选取距离最短的路径。</p><p><br></p><p>**优缺点**</p><p><br></p><p>- 实现简单，开销小</p><p>- 随着网络规模扩大开销也会增大；</p><p>- 最大距离为15，限制了网络的规模；</p><p>- 当网络出现故障时，要经过较长的时间才能将此信息传递到所有路由器</p>','{\"ops\": [{\"insert\": \"\\u6bcf\\u4e2a\\u8def\\u7531\\u5668\\u7ef4\\u62a4\\u4e00\\u5f20\\u8868\\uff0c\\u8bb0\\u5f55\\u8be5\\u8def\\u7531\\u5668\\u5230\\u5176\\u5b83\\u7f51\\u7edc\\u7684\\u201d\\u8df3\\u6570\\u201c\\uff0c\\u8def\\u7531\\u5668\\u5230\\u4e0e\\u5176\\u76f4\\u63a5\\u8fde\\u63a5\\u7684\\u7f51\\u7edc\\u7684\\u8df3\\u6570\\u662f1\\uff0c\\u6bcf\\u591a\\u7ecf\\u8fc7\\u4e00\\u4e2a\\u8def\\u7531\\u5668\\u8df3\\u6570\\u5c31\\u52a01\\uff1b\\u66f4\\u65b0\\u8be5\\u8868\\u65f6\\u548c\\u76f8\\u90bb\\u8def\\u7531\\u5668\\u4ea4\\u6362\\u8def\\u7531\\u4fe1\\u606f\\uff1b\\u8def\\u7531\\u5668\\u5141\\u8bb8\\u4e00\\u4e2a\\u8def\\u5f84\\u6700\\u591a\\u5305\\u542b15\\u4e2a\\u8def\\u7531\\u5668\\uff0c\\u5982\\u679c\\u8df3\\u6570\\u4e3a16\\uff0c\\u5219\\u4e0d\\u53ef\\u8fbe\\u3002\\u4ea4\\u4ed8\\u6570\\u636e\\u62a5\\u65f6\\u4f18\\u5148\\u9009\\u53d6\\u8ddd\\u79bb\\u6700\\u77ed\\u7684\\u8def\\u5f84\\u3002\\n\\n**\\u4f18\\u7f3a\\u70b9**\\n\\n- \\u5b9e\\u73b0\\u7b80\\u5355\\uff0c\\u5f00\\u9500\\u5c0f\\n- \\u968f\\u7740\\u7f51\\u7edc\\u89c4\\u6a21\\u6269\\u5927\\u5f00\\u9500\\u4e5f\\u4f1a\\u589e\\u5927\\uff1b\\n- \\u6700\\u5927\\u8ddd\\u79bb\\u4e3a15\\uff0c\\u9650\\u5236\\u4e86\\u7f51\\u7edc\\u7684\\u89c4\\u6a21\\uff1b\\n- \\u5f53\\u7f51\\u7edc\\u51fa\\u73b0\\u6545\\u969c\\u65f6\\uff0c\\u8981\\u7ecf\\u8fc7\\u8f83\\u957f\\u7684\\u65f6\\u95f4\\u624d\\u80fd\\u5c06\\u6b64\\u4fe1\\u606f\\u4f20\\u9012\\u5230\\u6240\\u6709\\u8def\\u7531\\u5668\\n\"}]}','white','2020-08-14 12:40:01'),(291,'  计算机网络体系结构','![计算机网络体系结构](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129195451183_16713.png)\n\n- Physical, Data Link, Network, Transport, Application\n- 应用层：常见协议：\n    - FTP(21端口)：文件传输协议\n    - SSH(22端口)：远程登陆\n    - TELNET(23端口)：远程登录\n    - SMTP(25端口)：发送邮件\n    - POP3(110端口)：接收邮件\n    - HTTP(80端口)：超文本传输协议\n    - DNS(53端口)：运行在UDP上，域名解析服务\n- 传输层：TCP/UDP\n- 网络层：IP、ARP、NAT、RIP...\n','<p>![计算机网络体系结构](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129195451183_16713.png)</p><p><br></p><p>- Physical, Data Link, Network, Transport, Application</p><p>- 应用层：常见协议：</p><p>    - FTP(21端口)：文件传输协议</p><p>    - SSH(22端口)：远程登陆</p><p>    - TELNET(23端口)：远程登录</p><p>    - SMTP(25端口)：发送邮件</p><p>    - POP3(110端口)：接收邮件</p><p>    - HTTP(80端口)：超文本传输协议</p><p>    - DNS(53端口)：运行在UDP上，域名解析服务</p><p>- 传输层：TCP/UDP</p><p>- 网络层：IP、ARP、NAT、RIP...</p>','{\"ops\": [{\"insert\": \"![\\u8ba1\\u7b97\\u673a\\u7f51\\u7edc\\u4f53\\u7cfb\\u7ed3\\u6784](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191129195451183_16713.png)\\n\\n- Physical, Data Link, Network, Transport, Application\\n- \\u5e94\\u7528\\u5c42\\uff1a\\u5e38\\u89c1\\u534f\\u8bae\\uff1a\\n    - FTP(21\\u7aef\\u53e3)\\uff1a\\u6587\\u4ef6\\u4f20\\u8f93\\u534f\\u8bae\\n    - SSH(22\\u7aef\\u53e3)\\uff1a\\u8fdc\\u7a0b\\u767b\\u9646\\n    - TELNET(23\\u7aef\\u53e3)\\uff1a\\u8fdc\\u7a0b\\u767b\\u5f55\\n    - SMTP(25\\u7aef\\u53e3)\\uff1a\\u53d1\\u9001\\u90ae\\u4ef6\\n    - POP3(110\\u7aef\\u53e3)\\uff1a\\u63a5\\u6536\\u90ae\\u4ef6\\n    - HTTP(80\\u7aef\\u53e3)\\uff1a\\u8d85\\u6587\\u672c\\u4f20\\u8f93\\u534f\\u8bae\\n    - DNS(53\\u7aef\\u53e3)\\uff1a\\u8fd0\\u884c\\u5728UDP\\u4e0a\\uff0c\\u57df\\u540d\\u89e3\\u6790\\u670d\\u52a1\\n- \\u4f20\\u8f93\\u5c42\\uff1aTCP/UDP\\n- \\u7f51\\u7edc\\u5c42\\uff1aIP\\u3001ARP\\u3001NAT\\u3001RIP...\\n\"}]}','white','2020-08-14 12:40:48'),(292,'路由器、交换机位于哪一层？','- 路由器网络层，根据IP地址进行寻址；\n- 交换机数据链路层，根据MAC地址进行寻址\n','<p>- 路由器网络层，根据IP地址进行寻址；</p><p>- 交换机数据链路层，根据MAC地址进行寻址</p>','{\"ops\": [{\"insert\": \"- \\u8def\\u7531\\u5668\\u7f51\\u7edc\\u5c42\\uff0c\\u6839\\u636eIP\\u5730\\u5740\\u8fdb\\u884c\\u5bfb\\u5740\\uff1b\\n- \\u4ea4\\u6362\\u673a\\u6570\\u636e\\u94fe\\u8def\\u5c42\\uff0c\\u6839\\u636eMAC\\u5730\\u5740\\u8fdb\\u884c\\u5bfb\\u5740\\n\"}]}','white','2020-08-14 12:40:59'),(293,'IP地址的分类？','![IP address](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191201085151639_2895.png)\n\n路由器仅根据网络号net-id来转发分组，当分组到达目的网络的路由器之后，再按照主机号host-id将分组交付给主机；同一网络上的所有主机的网络号相同。\n','<p>![IP address](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191201085151639_2895.png)</p><p><br></p><p>路由器仅根据网络号net-id来转发分组，当分组到达目的网络的路由器之后，再按照主机号host-id将分组交付给主机；同一网络上的所有主机的网络号相同。</p>','{\"ops\": [{\"insert\": \"![IP address](https://cdn.jamkung.com/card/Waking-Up/_v_images/20191201085151639_2895.png)\\n\\n\\u8def\\u7531\\u5668\\u4ec5\\u6839\\u636e\\u7f51\\u7edc\\u53f7net-id\\u6765\\u8f6c\\u53d1\\u5206\\u7ec4\\uff0c\\u5f53\\u5206\\u7ec4\\u5230\\u8fbe\\u76ee\\u7684\\u7f51\\u7edc\\u7684\\u8def\\u7531\\u5668\\u4e4b\\u540e\\uff0c\\u518d\\u6309\\u7167\\u4e3b\\u673a\\u53f7host-id\\u5c06\\u5206\\u7ec4\\u4ea4\\u4ed8\\u7ed9\\u4e3b\\u673a\\uff1b\\u540c\\u4e00\\u7f51\\u7edc\\u4e0a\\u7684\\u6240\\u6709\\u4e3b\\u673a\\u7684\\u7f51\\u7edc\\u53f7\\u76f8\\u540c\\u3002\\n\"}]}','white','2020-08-14 12:41:28'),(294,'什么叫划分子网？','从主机号host-id借用若干个比特作为子网号subnet-id；子网掩码：网络号和子网号都为1，主机号为0；数据报仍然先按照网络号找到目的网络，发送到路由器，路由器再按照网络号和子网号找到目的子网：将子网掩码与目标地址逐比特与操作，若结果为某个子网的网络地址，则送到该子网。\n','<p>从主机号host-id借用若干个比特作为子网号subnet-id；子网掩码：网络号和子网号都为1，主机号为0；数据报仍然先按照网络号找到目的网络，发送到路由器，路由器再按照网络号和子网号找到目的子网：将子网掩码与目标地址逐比特与操作，若结果为某个子网的网络地址，则送到该子网。</p>','{\"ops\": [{\"insert\": \"\\u4ece\\u4e3b\\u673a\\u53f7host-id\\u501f\\u7528\\u82e5\\u5e72\\u4e2a\\u6bd4\\u7279\\u4f5c\\u4e3a\\u5b50\\u7f51\\u53f7subnet-id\\uff1b\\u5b50\\u7f51\\u63a9\\u7801\\uff1a\\u7f51\\u7edc\\u53f7\\u548c\\u5b50\\u7f51\\u53f7\\u90fd\\u4e3a1\\uff0c\\u4e3b\\u673a\\u53f7\\u4e3a0\\uff1b\\u6570\\u636e\\u62a5\\u4ecd\\u7136\\u5148\\u6309\\u7167\\u7f51\\u7edc\\u53f7\\u627e\\u5230\\u76ee\\u7684\\u7f51\\u7edc\\uff0c\\u53d1\\u9001\\u5230\\u8def\\u7531\\u5668\\uff0c\\u8def\\u7531\\u5668\\u518d\\u6309\\u7167\\u7f51\\u7edc\\u53f7\\u548c\\u5b50\\u7f51\\u53f7\\u627e\\u5230\\u76ee\\u7684\\u5b50\\u7f51\\uff1a\\u5c06\\u5b50\\u7f51\\u63a9\\u7801\\u4e0e\\u76ee\\u6807\\u5730\\u5740\\u9010\\u6bd4\\u7279\\u4e0e\\u64cd\\u4f5c\\uff0c\\u82e5\\u7ed3\\u679c\\u4e3a\\u67d0\\u4e2a\\u5b50\\u7f51\\u7684\\u7f51\\u7edc\\u5730\\u5740\\uff0c\\u5219\\u9001\\u5230\\u8be5\\u5b50\\u7f51\\u3002\\n\"}]}','white','2020-08-14 12:41:39'),(295,'什么是ARP协议 (Address Resolution Protocol)？','**ARP协议完成了IP地址与物理地址的映射**。每一个主机都设有一个 ARP 高速缓存，里面有**所在的局域网**上的各主机和路由器的 IP 地址到硬件地址的映射表。当源主机要发送数据包到目的主机时，会先检查自己的ARP高速缓存中有没有目的主机的MAC地址，如果有，就直接将数据包发到这个MAC地址，如果没有，就向**所在的局域网**发起一个ARP请求的广播包（在发送自己的 ARP 请求时，同时会带上自己的 IP 地址到硬件地址的映射），收到请求的主机检查自己的IP地址和目的主机的IP地址是否一致，如果一致，则先保存源主机的映射到自己的ARP缓存，然后给源主机发送一个ARP响应数据包。源主机收到响应数据包之后，先添加目的主机的IP地址与MAC地址的映射，再进行数据传送。如果源主机一直没有收到响应，表示ARP查询失败。\n\n如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的某个路由器的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。\n','<p>**ARP协议完成了IP地址与物理地址的映射**。每一个主机都设有一个 ARP 高速缓存，里面有**所在的局域网**上的各主机和路由器的 IP 地址到硬件地址的映射表。当源主机要发送数据包到目的主机时，会先检查自己的ARP高速缓存中有没有目的主机的MAC地址，如果有，就直接将数据包发到这个MAC地址，如果没有，就向**所在的局域网**发起一个ARP请求的广播包（在发送自己的 ARP 请求时，同时会带上自己的 IP 地址到硬件地址的映射），收到请求的主机检查自己的IP地址和目的主机的IP地址是否一致，如果一致，则先保存源主机的映射到自己的ARP缓存，然后给源主机发送一个ARP响应数据包。源主机收到响应数据包之后，先添加目的主机的IP地址与MAC地址的映射，再进行数据传送。如果源主机一直没有收到响应，表示ARP查询失败。</p><p><br></p><p>如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的某个路由器的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。</p>','{\"ops\": [{\"insert\": \"**ARP\\u534f\\u8bae\\u5b8c\\u6210\\u4e86IP\\u5730\\u5740\\u4e0e\\u7269\\u7406\\u5730\\u5740\\u7684\\u6620\\u5c04**\\u3002\\u6bcf\\u4e00\\u4e2a\\u4e3b\\u673a\\u90fd\\u8bbe\\u6709\\u4e00\\u4e2a ARP \\u9ad8\\u901f\\u7f13\\u5b58\\uff0c\\u91cc\\u9762\\u6709**\\u6240\\u5728\\u7684\\u5c40\\u57df\\u7f51**\\u4e0a\\u7684\\u5404\\u4e3b\\u673a\\u548c\\u8def\\u7531\\u5668\\u7684 IP \\u5730\\u5740\\u5230\\u786c\\u4ef6\\u5730\\u5740\\u7684\\u6620\\u5c04\\u8868\\u3002\\u5f53\\u6e90\\u4e3b\\u673a\\u8981\\u53d1\\u9001\\u6570\\u636e\\u5305\\u5230\\u76ee\\u7684\\u4e3b\\u673a\\u65f6\\uff0c\\u4f1a\\u5148\\u68c0\\u67e5\\u81ea\\u5df1\\u7684ARP\\u9ad8\\u901f\\u7f13\\u5b58\\u4e2d\\u6709\\u6ca1\\u6709\\u76ee\\u7684\\u4e3b\\u673a\\u7684MAC\\u5730\\u5740\\uff0c\\u5982\\u679c\\u6709\\uff0c\\u5c31\\u76f4\\u63a5\\u5c06\\u6570\\u636e\\u5305\\u53d1\\u5230\\u8fd9\\u4e2aMAC\\u5730\\u5740\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\uff0c\\u5c31\\u5411**\\u6240\\u5728\\u7684\\u5c40\\u57df\\u7f51**\\u53d1\\u8d77\\u4e00\\u4e2aARP\\u8bf7\\u6c42\\u7684\\u5e7f\\u64ad\\u5305\\uff08\\u5728\\u53d1\\u9001\\u81ea\\u5df1\\u7684 ARP \\u8bf7\\u6c42\\u65f6\\uff0c\\u540c\\u65f6\\u4f1a\\u5e26\\u4e0a\\u81ea\\u5df1\\u7684 IP \\u5730\\u5740\\u5230\\u786c\\u4ef6\\u5730\\u5740\\u7684\\u6620\\u5c04\\uff09\\uff0c\\u6536\\u5230\\u8bf7\\u6c42\\u7684\\u4e3b\\u673a\\u68c0\\u67e5\\u81ea\\u5df1\\u7684IP\\u5730\\u5740\\u548c\\u76ee\\u7684\\u4e3b\\u673a\\u7684IP\\u5730\\u5740\\u662f\\u5426\\u4e00\\u81f4\\uff0c\\u5982\\u679c\\u4e00\\u81f4\\uff0c\\u5219\\u5148\\u4fdd\\u5b58\\u6e90\\u4e3b\\u673a\\u7684\\u6620\\u5c04\\u5230\\u81ea\\u5df1\\u7684ARP\\u7f13\\u5b58\\uff0c\\u7136\\u540e\\u7ed9\\u6e90\\u4e3b\\u673a\\u53d1\\u9001\\u4e00\\u4e2aARP\\u54cd\\u5e94\\u6570\\u636e\\u5305\\u3002\\u6e90\\u4e3b\\u673a\\u6536\\u5230\\u54cd\\u5e94\\u6570\\u636e\\u5305\\u4e4b\\u540e\\uff0c\\u5148\\u6dfb\\u52a0\\u76ee\\u7684\\u4e3b\\u673a\\u7684IP\\u5730\\u5740\\u4e0eMAC\\u5730\\u5740\\u7684\\u6620\\u5c04\\uff0c\\u518d\\u8fdb\\u884c\\u6570\\u636e\\u4f20\\u9001\\u3002\\u5982\\u679c\\u6e90\\u4e3b\\u673a\\u4e00\\u76f4\\u6ca1\\u6709\\u6536\\u5230\\u54cd\\u5e94\\uff0c\\u8868\\u793aARP\\u67e5\\u8be2\\u5931\\u8d25\\u3002\\n\\n\\u5982\\u679c\\u6240\\u8981\\u627e\\u7684\\u4e3b\\u673a\\u548c\\u6e90\\u4e3b\\u673a\\u4e0d\\u5728\\u540c\\u4e00\\u4e2a\\u5c40\\u57df\\u7f51\\u4e0a\\uff0c\\u90a3\\u4e48\\u5c31\\u8981\\u901a\\u8fc7 ARP \\u627e\\u5230\\u4e00\\u4e2a\\u4f4d\\u4e8e\\u672c\\u5c40\\u57df\\u7f51\\u4e0a\\u7684\\u67d0\\u4e2a\\u8def\\u7531\\u5668\\u7684\\u786c\\u4ef6\\u5730\\u5740\\uff0c\\u7136\\u540e\\u628a\\u5206\\u7ec4\\u53d1\\u9001\\u7ed9\\u8fd9\\u4e2a\\u8def\\u7531\\u5668\\uff0c\\u8ba9\\u8fd9\\u4e2a\\u8def\\u7531\\u5668\\u628a\\u5206\\u7ec4\\u8f6c\\u53d1\\u7ed9\\u4e0b\\u4e00\\u4e2a\\u7f51\\u7edc\\u3002\\u5269\\u4e0b\\u7684\\u5de5\\u4f5c\\u5c31\\u7531\\u4e0b\\u4e00\\u4e2a\\u7f51\\u7edc\\u6765\\u505a\\u3002\\n\"}]}','white','2020-08-14 12:41:57'),(296,'什么是NAT (Network Address Translation, 网络地址转换)？','用于解决内网中的主机要和因特网上的主机通信。由NAT路由器将主机的本地IP地址转换为全球IP地址，分为静态转换（转换得到的全球IP地址固定不变）和动态NAT转换。\n','<p>用于解决内网中的主机要和因特网上的主机通信。由NAT路由器将主机的本地IP地址转换为全球IP地址，分为静态转换（转换得到的全球IP地址固定不变）和动态NAT转换。</p>','{\"ops\": [{\"insert\": \"\\u7528\\u4e8e\\u89e3\\u51b3\\u5185\\u7f51\\u4e2d\\u7684\\u4e3b\\u673a\\u8981\\u548c\\u56e0\\u7279\\u7f51\\u4e0a\\u7684\\u4e3b\\u673a\\u901a\\u4fe1\\u3002\\u7531NAT\\u8def\\u7531\\u5668\\u5c06\\u4e3b\\u673a\\u7684\\u672c\\u5730IP\\u5730\\u5740\\u8f6c\\u6362\\u4e3a\\u5168\\u7403IP\\u5730\\u5740\\uff0c\\u5206\\u4e3a\\u9759\\u6001\\u8f6c\\u6362\\uff08\\u8f6c\\u6362\\u5f97\\u5230\\u7684\\u5168\\u7403IP\\u5730\\u5740\\u56fa\\u5b9a\\u4e0d\\u53d8\\uff09\\u548c\\u52a8\\u6001NAT\\u8f6c\\u6362\\u3002\\n\"}]}','white','2020-08-14 12:42:13'),(297,'redis的应用场景','1. 缓存\n2. 共享Session\n3. 消息队列系统\n4. 分布式锁\n','<p>1. 缓存</p><p>2. 共享Session</p><p>3. 消息队列系统</p><p>4. 分布式锁</p>','{\"ops\": [{\"insert\": \"1. \\u7f13\\u5b58\\n2. \\u5171\\u4eabSession\\n3. \\u6d88\\u606f\\u961f\\u5217\\u7cfb\\u7edf\\n4. \\u5206\\u5e03\\u5f0f\\u9501\\n\"}]}','white','2020-08-14 16:18:58'),(298,'单线程的Redis为什么快','1. 纯内存操作\n2. 单线程操作，避免了频繁的上下文切换\n3. 合理高效的数据结构\n4. 采用了非阻塞I/O多路复用机制（有一个文件描述符同时监听多个文件描述符是否有数据到来）\n','<p>1. 纯内存操作</p><p>2. 单线程操作，避免了频繁的上下文切换</p><p>3. 合理高效的数据结构</p><p>4. 采用了非阻塞I/O多路复用机制（有一个文件描述符同时监听多个文件描述符是否有数据到来）</p>','{\"ops\": [{\"insert\": \"1. \\u7eaf\\u5185\\u5b58\\u64cd\\u4f5c\\n2. \\u5355\\u7ebf\\u7a0b\\u64cd\\u4f5c\\uff0c\\u907f\\u514d\\u4e86\\u9891\\u7e41\\u7684\\u4e0a\\u4e0b\\u6587\\u5207\\u6362\\n3. \\u5408\\u7406\\u9ad8\\u6548\\u7684\\u6570\\u636e\\u7ed3\\u6784\\n4. \\u91c7\\u7528\\u4e86\\u975e\\u963b\\u585eI/O\\u591a\\u8def\\u590d\\u7528\\u673a\\u5236\\uff08\\u6709\\u4e00\\u4e2a\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u540c\\u65f6\\u76d1\\u542c\\u591a\\u4e2a\\u6587\\u4ef6\\u63cf\\u8ff0\\u7b26\\u662f\\u5426\\u6709\\u6570\\u636e\\u5230\\u6765\\uff09\\n\"}]}','white','2020-08-14 16:19:13'),(299,'Redis 的数据结构及使用场景','1. String字符串:字符串类型是 Redis 最基础的数据结构，首先键都是字符串类型，而且 其他几种数据结构都是在字符串类型基础上构建的，我们常使用的 set key value 命令就是字符串。常用在缓存、计数、共享Session、限速等。\n2. Hash哈希:在Redis中，哈希类型是指键值本身又是一个键值对结构，哈希可以用来存放用户信息，比如实现购物车。\n3. List列表（双向链表）:列表（list）类型是用来存储多个有序的字符串。可以做简单的消息队列的功能。\n4. Set集合：集合（set）类型也是用来保存多个的字符串元素，但和列表类型不一 样的是，集合中不允许有重复元素，并且集合中的元素是无序的，不能通过索引下标获取元素。利用 Set 的交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能。\n5. Sorted Set有序集合（跳表实现）：Sorted Set 多了一个权重参数 Score，集合中的元素能够按 Score 进行排列。可以做排行榜应用，取 TOP N 操作。\n\n','<p>1. String字符串:字符串类型是 Redis 最基础的数据结构，首先键都是字符串类型，而且 其他几种数据结构都是在字符串类型基础上构建的，我们常使用的 set key value 命令就是字符串。常用在缓存、计数、共享Session、限速等。</p><p>2. Hash哈希:在Redis中，哈希类型是指键值本身又是一个键值对结构，哈希可以用来存放用户信息，比如实现购物车。</p><p>3. List列表（双向链表）:列表（list）类型是用来存储多个有序的字符串。可以做简单的消息队列的功能。</p><p>4. Set集合：集合（set）类型也是用来保存多个的字符串元素，但和列表类型不一 样的是，集合中不允许有重复元素，并且集合中的元素是无序的，不能通过索引下标获取元素。利用 Set 的交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能。</p><p>5. Sorted Set有序集合（跳表实现）：Sorted Set 多了一个权重参数 Score，集合中的元素能够按 Score 进行排列。可以做排行榜应用，取 TOP N 操作。</p><p><br></p>','{\"ops\": [{\"insert\": \"1. String\\u5b57\\u7b26\\u4e32:\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\u662f Redis \\u6700\\u57fa\\u7840\\u7684\\u6570\\u636e\\u7ed3\\u6784\\uff0c\\u9996\\u5148\\u952e\\u90fd\\u662f\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\uff0c\\u800c\\u4e14 \\u5176\\u4ed6\\u51e0\\u79cd\\u6570\\u636e\\u7ed3\\u6784\\u90fd\\u662f\\u5728\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\u57fa\\u7840\\u4e0a\\u6784\\u5efa\\u7684\\uff0c\\u6211\\u4eec\\u5e38\\u4f7f\\u7528\\u7684 set key value \\u547d\\u4ee4\\u5c31\\u662f\\u5b57\\u7b26\\u4e32\\u3002\\u5e38\\u7528\\u5728\\u7f13\\u5b58\\u3001\\u8ba1\\u6570\\u3001\\u5171\\u4eabSession\\u3001\\u9650\\u901f\\u7b49\\u3002\\n2. Hash\\u54c8\\u5e0c:\\u5728Redis\\u4e2d\\uff0c\\u54c8\\u5e0c\\u7c7b\\u578b\\u662f\\u6307\\u952e\\u503c\\u672c\\u8eab\\u53c8\\u662f\\u4e00\\u4e2a\\u952e\\u503c\\u5bf9\\u7ed3\\u6784\\uff0c\\u54c8\\u5e0c\\u53ef\\u4ee5\\u7528\\u6765\\u5b58\\u653e\\u7528\\u6237\\u4fe1\\u606f\\uff0c\\u6bd4\\u5982\\u5b9e\\u73b0\\u8d2d\\u7269\\u8f66\\u3002\\n3. List\\u5217\\u8868\\uff08\\u53cc\\u5411\\u94fe\\u8868\\uff09:\\u5217\\u8868\\uff08list\\uff09\\u7c7b\\u578b\\u662f\\u7528\\u6765\\u5b58\\u50a8\\u591a\\u4e2a\\u6709\\u5e8f\\u7684\\u5b57\\u7b26\\u4e32\\u3002\\u53ef\\u4ee5\\u505a\\u7b80\\u5355\\u7684\\u6d88\\u606f\\u961f\\u5217\\u7684\\u529f\\u80fd\\u3002\\n4. Set\\u96c6\\u5408\\uff1a\\u96c6\\u5408\\uff08set\\uff09\\u7c7b\\u578b\\u4e5f\\u662f\\u7528\\u6765\\u4fdd\\u5b58\\u591a\\u4e2a\\u7684\\u5b57\\u7b26\\u4e32\\u5143\\u7d20\\uff0c\\u4f46\\u548c\\u5217\\u8868\\u7c7b\\u578b\\u4e0d\\u4e00 \\u6837\\u7684\\u662f\\uff0c\\u96c6\\u5408\\u4e2d\\u4e0d\\u5141\\u8bb8\\u6709\\u91cd\\u590d\\u5143\\u7d20\\uff0c\\u5e76\\u4e14\\u96c6\\u5408\\u4e2d\\u7684\\u5143\\u7d20\\u662f\\u65e0\\u5e8f\\u7684\\uff0c\\u4e0d\\u80fd\\u901a\\u8fc7\\u7d22\\u5f15\\u4e0b\\u6807\\u83b7\\u53d6\\u5143\\u7d20\\u3002\\u5229\\u7528 Set \\u7684\\u4ea4\\u96c6\\u3001\\u5e76\\u96c6\\u3001\\u5dee\\u96c6\\u7b49\\u64cd\\u4f5c\\uff0c\\u53ef\\u4ee5\\u8ba1\\u7b97\\u5171\\u540c\\u559c\\u597d\\uff0c\\u5168\\u90e8\\u7684\\u559c\\u597d\\uff0c\\u81ea\\u5df1\\u72ec\\u6709\\u7684\\u559c\\u597d\\u7b49\\u529f\\u80fd\\u3002\\n5. Sorted Set\\u6709\\u5e8f\\u96c6\\u5408\\uff08\\u8df3\\u8868\\u5b9e\\u73b0\\uff09\\uff1aSorted Set \\u591a\\u4e86\\u4e00\\u4e2a\\u6743\\u91cd\\u53c2\\u6570 Score\\uff0c\\u96c6\\u5408\\u4e2d\\u7684\\u5143\\u7d20\\u80fd\\u591f\\u6309 Score \\u8fdb\\u884c\\u6392\\u5217\\u3002\\u53ef\\u4ee5\\u505a\\u6392\\u884c\\u699c\\u5e94\\u7528\\uff0c\\u53d6 TOP N \\u64cd\\u4f5c\\u3002\\n\\n\"}]}','white','2020-08-14 16:19:30'),(300,'Redis 的数据过期策略','Redis 中数据过期策略采用定期删除+惰性删除策略\n\n* **定期删除策略**：Redis 启用一个定时器定时监视所有的 key，判断key是否过期，过期的话就删除。这种策略可以保证过期的 key 最终都会被删除，但是也存在严重的缺点：每次都遍历内存中所有的数据，非常消耗 CPU 资源，并且当 key 已过期，但是定时器还处于未唤起状态，这段时间内 key 仍然可以用。\n\n\n* **惰性删除策略**：在获取 key 时，先判断 key 是否过期，如果过期则删除。这种方式存在一个缺点：如果这个 key 一直未被使用，那么它一直在内存中，其实它已经过期了，会浪费大量的空间。\n\n\n这两种策略天然的互补，结合起来之后，定时删除策略就发生了一些改变，不在是每次扫描全部的 key 了，而是随机抽取一部分 key 进行检查，这样就降低了对 CPU 资源的损耗，惰性删除策略互补了为检查到的key，基本上满足了所有要求。但是有时候就是那么的巧，既没有被定时器抽取到，又没有被使用，这些数据又如何从内存中消失？没关系，还有内存淘汰机制，当内存不够用时，内存淘汰机制就会上场。淘汰策略分为：\n    1. 当内存不足以容纳新写入数据时，新写入操作会报错。（Redis 默认策略）\n    2. 当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 Key。（LRU推荐使用）\n    3. 当内存不足以容纳新写入数据时，在键空间中，随机移除某个 Key。\n    4. 当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 Key。这种情况一般是把 Redis 既当缓存，又做持久化存储的时候才用。\n    5. 当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 Key。\n    6. 当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 Key 优先移除。\n','<p>Redis 中数据过期策略采用定期删除+惰性删除策略</p><p><br></p><p>* **定期删除策略**：Redis 启用一个定时器定时监视所有的 key，判断key是否过期，过期的话就删除。这种策略可以保证过期的 key 最终都会被删除，但是也存在严重的缺点：每次都遍历内存中所有的数据，非常消耗 CPU 资源，并且当 key 已过期，但是定时器还处于未唤起状态，这段时间内 key 仍然可以用。</p><p><br></p><p><br></p><p>* **惰性删除策略**：在获取 key 时，先判断 key 是否过期，如果过期则删除。这种方式存在一个缺点：如果这个 key 一直未被使用，那么它一直在内存中，其实它已经过期了，会浪费大量的空间。</p><p><br></p><p><br></p><p>这两种策略天然的互补，结合起来之后，定时删除策略就发生了一些改变，不在是每次扫描全部的 key 了，而是随机抽取一部分 key 进行检查，这样就降低了对 CPU 资源的损耗，惰性删除策略互补了为检查到的key，基本上满足了所有要求。但是有时候就是那么的巧，既没有被定时器抽取到，又没有被使用，这些数据又如何从内存中消失？没关系，还有内存淘汰机制，当内存不够用时，内存淘汰机制就会上场。淘汰策略分为：</p><p>    1. 当内存不足以容纳新写入数据时，新写入操作会报错。（Redis 默认策略）</p><p>    2. 当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 Key。（LRU推荐使用）</p><p>    3. 当内存不足以容纳新写入数据时，在键空间中，随机移除某个 Key。</p><p>    4. 当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 Key。这种情况一般是把 Redis 既当缓存，又做持久化存储的时候才用。</p><p>    5. 当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 Key。</p><p>    6. 当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 Key 优先移除。</p>','{\"ops\": [{\"insert\": \"Redis \\u4e2d\\u6570\\u636e\\u8fc7\\u671f\\u7b56\\u7565\\u91c7\\u7528\\u5b9a\\u671f\\u5220\\u9664+\\u60f0\\u6027\\u5220\\u9664\\u7b56\\u7565\\n\\n* **\\u5b9a\\u671f\\u5220\\u9664\\u7b56\\u7565**\\uff1aRedis \\u542f\\u7528\\u4e00\\u4e2a\\u5b9a\\u65f6\\u5668\\u5b9a\\u65f6\\u76d1\\u89c6\\u6240\\u6709\\u7684 key\\uff0c\\u5224\\u65adkey\\u662f\\u5426\\u8fc7\\u671f\\uff0c\\u8fc7\\u671f\\u7684\\u8bdd\\u5c31\\u5220\\u9664\\u3002\\u8fd9\\u79cd\\u7b56\\u7565\\u53ef\\u4ee5\\u4fdd\\u8bc1\\u8fc7\\u671f\\u7684 key \\u6700\\u7ec8\\u90fd\\u4f1a\\u88ab\\u5220\\u9664\\uff0c\\u4f46\\u662f\\u4e5f\\u5b58\\u5728\\u4e25\\u91cd\\u7684\\u7f3a\\u70b9\\uff1a\\u6bcf\\u6b21\\u90fd\\u904d\\u5386\\u5185\\u5b58\\u4e2d\\u6240\\u6709\\u7684\\u6570\\u636e\\uff0c\\u975e\\u5e38\\u6d88\\u8017 CPU \\u8d44\\u6e90\\uff0c\\u5e76\\u4e14\\u5f53 key \\u5df2\\u8fc7\\u671f\\uff0c\\u4f46\\u662f\\u5b9a\\u65f6\\u5668\\u8fd8\\u5904\\u4e8e\\u672a\\u5524\\u8d77\\u72b6\\u6001\\uff0c\\u8fd9\\u6bb5\\u65f6\\u95f4\\u5185 key \\u4ecd\\u7136\\u53ef\\u4ee5\\u7528\\u3002\\n\\n\\n* **\\u60f0\\u6027\\u5220\\u9664\\u7b56\\u7565**\\uff1a\\u5728\\u83b7\\u53d6 key \\u65f6\\uff0c\\u5148\\u5224\\u65ad key \\u662f\\u5426\\u8fc7\\u671f\\uff0c\\u5982\\u679c\\u8fc7\\u671f\\u5219\\u5220\\u9664\\u3002\\u8fd9\\u79cd\\u65b9\\u5f0f\\u5b58\\u5728\\u4e00\\u4e2a\\u7f3a\\u70b9\\uff1a\\u5982\\u679c\\u8fd9\\u4e2a key \\u4e00\\u76f4\\u672a\\u88ab\\u4f7f\\u7528\\uff0c\\u90a3\\u4e48\\u5b83\\u4e00\\u76f4\\u5728\\u5185\\u5b58\\u4e2d\\uff0c\\u5176\\u5b9e\\u5b83\\u5df2\\u7ecf\\u8fc7\\u671f\\u4e86\\uff0c\\u4f1a\\u6d6a\\u8d39\\u5927\\u91cf\\u7684\\u7a7a\\u95f4\\u3002\\n\\n\\n\\u8fd9\\u4e24\\u79cd\\u7b56\\u7565\\u5929\\u7136\\u7684\\u4e92\\u8865\\uff0c\\u7ed3\\u5408\\u8d77\\u6765\\u4e4b\\u540e\\uff0c\\u5b9a\\u65f6\\u5220\\u9664\\u7b56\\u7565\\u5c31\\u53d1\\u751f\\u4e86\\u4e00\\u4e9b\\u6539\\u53d8\\uff0c\\u4e0d\\u5728\\u662f\\u6bcf\\u6b21\\u626b\\u63cf\\u5168\\u90e8\\u7684 key \\u4e86\\uff0c\\u800c\\u662f\\u968f\\u673a\\u62bd\\u53d6\\u4e00\\u90e8\\u5206 key \\u8fdb\\u884c\\u68c0\\u67e5\\uff0c\\u8fd9\\u6837\\u5c31\\u964d\\u4f4e\\u4e86\\u5bf9 CPU \\u8d44\\u6e90\\u7684\\u635f\\u8017\\uff0c\\u60f0\\u6027\\u5220\\u9664\\u7b56\\u7565\\u4e92\\u8865\\u4e86\\u4e3a\\u68c0\\u67e5\\u5230\\u7684key\\uff0c\\u57fa\\u672c\\u4e0a\\u6ee1\\u8db3\\u4e86\\u6240\\u6709\\u8981\\u6c42\\u3002\\u4f46\\u662f\\u6709\\u65f6\\u5019\\u5c31\\u662f\\u90a3\\u4e48\\u7684\\u5de7\\uff0c\\u65e2\\u6ca1\\u6709\\u88ab\\u5b9a\\u65f6\\u5668\\u62bd\\u53d6\\u5230\\uff0c\\u53c8\\u6ca1\\u6709\\u88ab\\u4f7f\\u7528\\uff0c\\u8fd9\\u4e9b\\u6570\\u636e\\u53c8\\u5982\\u4f55\\u4ece\\u5185\\u5b58\\u4e2d\\u6d88\\u5931\\uff1f\\u6ca1\\u5173\\u7cfb\\uff0c\\u8fd8\\u6709\\u5185\\u5b58\\u6dd8\\u6c70\\u673a\\u5236\\uff0c\\u5f53\\u5185\\u5b58\\u4e0d\\u591f\\u7528\\u65f6\\uff0c\\u5185\\u5b58\\u6dd8\\u6c70\\u673a\\u5236\\u5c31\\u4f1a\\u4e0a\\u573a\\u3002\\u6dd8\\u6c70\\u7b56\\u7565\\u5206\\u4e3a\\uff1a\\n    1. \\u5f53\\u5185\\u5b58\\u4e0d\\u8db3\\u4ee5\\u5bb9\\u7eb3\\u65b0\\u5199\\u5165\\u6570\\u636e\\u65f6\\uff0c\\u65b0\\u5199\\u5165\\u64cd\\u4f5c\\u4f1a\\u62a5\\u9519\\u3002\\uff08Redis \\u9ed8\\u8ba4\\u7b56\\u7565\\uff09\\n    2. \\u5f53\\u5185\\u5b58\\u4e0d\\u8db3\\u4ee5\\u5bb9\\u7eb3\\u65b0\\u5199\\u5165\\u6570\\u636e\\u65f6\\uff0c\\u5728\\u952e\\u7a7a\\u95f4\\u4e2d\\uff0c\\u79fb\\u9664\\u6700\\u8fd1\\u6700\\u5c11\\u4f7f\\u7528\\u7684 Key\\u3002\\uff08LRU\\u63a8\\u8350\\u4f7f\\u7528\\uff09\\n    3. \\u5f53\\u5185\\u5b58\\u4e0d\\u8db3\\u4ee5\\u5bb9\\u7eb3\\u65b0\\u5199\\u5165\\u6570\\u636e\\u65f6\\uff0c\\u5728\\u952e\\u7a7a\\u95f4\\u4e2d\\uff0c\\u968f\\u673a\\u79fb\\u9664\\u67d0\\u4e2a Key\\u3002\\n    4. \\u5f53\\u5185\\u5b58\\u4e0d\\u8db3\\u4ee5\\u5bb9\\u7eb3\\u65b0\\u5199\\u5165\\u6570\\u636e\\u65f6\\uff0c\\u5728\\u8bbe\\u7f6e\\u4e86\\u8fc7\\u671f\\u65f6\\u95f4\\u7684\\u952e\\u7a7a\\u95f4\\u4e2d\\uff0c\\u79fb\\u9664\\u6700\\u8fd1\\u6700\\u5c11\\u4f7f\\u7528\\u7684 Key\\u3002\\u8fd9\\u79cd\\u60c5\\u51b5\\u4e00\\u822c\\u662f\\u628a Redis \\u65e2\\u5f53\\u7f13\\u5b58\\uff0c\\u53c8\\u505a\\u6301\\u4e45\\u5316\\u5b58\\u50a8\\u7684\\u65f6\\u5019\\u624d\\u7528\\u3002\\n    5. \\u5f53\\u5185\\u5b58\\u4e0d\\u8db3\\u4ee5\\u5bb9\\u7eb3\\u65b0\\u5199\\u5165\\u6570\\u636e\\u65f6\\uff0c\\u5728\\u8bbe\\u7f6e\\u4e86\\u8fc7\\u671f\\u65f6\\u95f4\\u7684\\u952e\\u7a7a\\u95f4\\u4e2d\\uff0c\\u968f\\u673a\\u79fb\\u9664\\u67d0\\u4e2a Key\\u3002\\n    6. \\u5f53\\u5185\\u5b58\\u4e0d\\u8db3\\u4ee5\\u5bb9\\u7eb3\\u65b0\\u5199\\u5165\\u6570\\u636e\\u65f6\\uff0c\\u5728\\u8bbe\\u7f6e\\u4e86\\u8fc7\\u671f\\u65f6\\u95f4\\u7684\\u952e\\u7a7a\\u95f4\\u4e2d\\uff0c\\u6709\\u66f4\\u65e9\\u8fc7\\u671f\\u65f6\\u95f4\\u7684 Key \\u4f18\\u5148\\u79fb\\u9664\\u3002\\n\"}]}','white','2020-08-14 16:21:15'),(301,'Redis的set和setnx','Redis中setnx不支持设置过期时间，做分布式锁时要想避免某一客户端中断导致死锁，需设置lock过期时间，在高并发时 setnx与 expire 不能实现原子操作，如果要用，得在程序代码上显示的加锁。\n\n使用SET代替SETNX ，相当于SETNX+EXPIRE实现了原子性，不必担心SETNX成功，EXPIRE失败的问题。\n','<p>Redis中setnx不支持设置过期时间，做分布式锁时要想避免某一客户端中断导致死锁，需设置lock过期时间，在高并发时 setnx与 expire 不能实现原子操作，如果要用，得在程序代码上显示的加锁。</p><p><br></p><p>使用SET代替SETNX ，相当于SETNX+EXPIRE实现了原子性，不必担心SETNX成功，EXPIRE失败的问题。</p>','{\"ops\": [{\"insert\": \"Redis\\u4e2dsetnx\\u4e0d\\u652f\\u6301\\u8bbe\\u7f6e\\u8fc7\\u671f\\u65f6\\u95f4\\uff0c\\u505a\\u5206\\u5e03\\u5f0f\\u9501\\u65f6\\u8981\\u60f3\\u907f\\u514d\\u67d0\\u4e00\\u5ba2\\u6237\\u7aef\\u4e2d\\u65ad\\u5bfc\\u81f4\\u6b7b\\u9501\\uff0c\\u9700\\u8bbe\\u7f6elock\\u8fc7\\u671f\\u65f6\\u95f4\\uff0c\\u5728\\u9ad8\\u5e76\\u53d1\\u65f6 setnx\\u4e0e expire \\u4e0d\\u80fd\\u5b9e\\u73b0\\u539f\\u5b50\\u64cd\\u4f5c\\uff0c\\u5982\\u679c\\u8981\\u7528\\uff0c\\u5f97\\u5728\\u7a0b\\u5e8f\\u4ee3\\u7801\\u4e0a\\u663e\\u793a\\u7684\\u52a0\\u9501\\u3002\\n\\n\\u4f7f\\u7528SET\\u4ee3\\u66ffSETNX \\uff0c\\u76f8\\u5f53\\u4e8eSETNX+EXPIRE\\u5b9e\\u73b0\\u4e86\\u539f\\u5b50\\u6027\\uff0c\\u4e0d\\u5fc5\\u62c5\\u5fc3SETNX\\u6210\\u529f\\uff0cEXPIRE\\u5931\\u8d25\\u7684\\u95ee\\u9898\\u3002\\n\"}]}','white','2020-08-14 16:21:47'),(302,'Redis的LRU具体实现','传统的LRU是使用栈的形式，每次都将最新使用的移入栈顶，但是用栈的形式会导致执行select *的时候大量非热点数据占领头部数据，所以需要改进。\n\nRedis每次按key获取一个值的时候，都会更新value中的lru字段为当前秒级别的时间戳。\n\nRedis初始的实现算法很简单，随机从dict中取出五个key,淘汰一个lru字段值最小的。\n\n在3.0的时候，又改进了一版算法，首先第一次随机选取的key都会放入一个pool中(pool的大小为16),pool中的key是按lru大小顺序排列的。\n\n接下来每次随机选取的keylru值必须小于pool中最小的lru才会继续放入，直到将pool放满。\n\n放满之后，每次如果有新的key需要放入，需要将pool中lru最大的一个key取出。\n\n淘汰的时候，直接从pool中选取一个lru最小的值然后将其淘汰。\n','<p>传统的LRU是使用栈的形式，每次都将最新使用的移入栈顶，但是用栈的形式会导致执行select *的时候大量非热点数据占领头部数据，所以需要改进。</p><p><br></p><p>Redis每次按key获取一个值的时候，都会更新value中的lru字段为当前秒级别的时间戳。</p><p><br></p><p>Redis初始的实现算法很简单，随机从dict中取出五个key,淘汰一个lru字段值最小的。</p><p><br></p><p>在3.0的时候，又改进了一版算法，首先第一次随机选取的key都会放入一个pool中(pool的大小为16),pool中的key是按lru大小顺序排列的。</p><p><br></p><p>接下来每次随机选取的keylru值必须小于pool中最小的lru才会继续放入，直到将pool放满。</p><p><br></p><p>放满之后，每次如果有新的key需要放入，需要将pool中lru最大的一个key取出。</p><p><br></p><p>淘汰的时候，直接从pool中选取一个lru最小的值然后将其淘汰。</p>','{\"ops\": [{\"insert\": \"\\u4f20\\u7edf\\u7684LRU\\u662f\\u4f7f\\u7528\\u6808\\u7684\\u5f62\\u5f0f\\uff0c\\u6bcf\\u6b21\\u90fd\\u5c06\\u6700\\u65b0\\u4f7f\\u7528\\u7684\\u79fb\\u5165\\u6808\\u9876\\uff0c\\u4f46\\u662f\\u7528\\u6808\\u7684\\u5f62\\u5f0f\\u4f1a\\u5bfc\\u81f4\\u6267\\u884cselect *\\u7684\\u65f6\\u5019\\u5927\\u91cf\\u975e\\u70ed\\u70b9\\u6570\\u636e\\u5360\\u9886\\u5934\\u90e8\\u6570\\u636e\\uff0c\\u6240\\u4ee5\\u9700\\u8981\\u6539\\u8fdb\\u3002\\n\\nRedis\\u6bcf\\u6b21\\u6309key\\u83b7\\u53d6\\u4e00\\u4e2a\\u503c\\u7684\\u65f6\\u5019\\uff0c\\u90fd\\u4f1a\\u66f4\\u65b0value\\u4e2d\\u7684lru\\u5b57\\u6bb5\\u4e3a\\u5f53\\u524d\\u79d2\\u7ea7\\u522b\\u7684\\u65f6\\u95f4\\u6233\\u3002\\n\\nRedis\\u521d\\u59cb\\u7684\\u5b9e\\u73b0\\u7b97\\u6cd5\\u5f88\\u7b80\\u5355\\uff0c\\u968f\\u673a\\u4ecedict\\u4e2d\\u53d6\\u51fa\\u4e94\\u4e2akey,\\u6dd8\\u6c70\\u4e00\\u4e2alru\\u5b57\\u6bb5\\u503c\\u6700\\u5c0f\\u7684\\u3002\\n\\n\\u57283.0\\u7684\\u65f6\\u5019\\uff0c\\u53c8\\u6539\\u8fdb\\u4e86\\u4e00\\u7248\\u7b97\\u6cd5\\uff0c\\u9996\\u5148\\u7b2c\\u4e00\\u6b21\\u968f\\u673a\\u9009\\u53d6\\u7684key\\u90fd\\u4f1a\\u653e\\u5165\\u4e00\\u4e2apool\\u4e2d(pool\\u7684\\u5927\\u5c0f\\u4e3a16),pool\\u4e2d\\u7684key\\u662f\\u6309lru\\u5927\\u5c0f\\u987a\\u5e8f\\u6392\\u5217\\u7684\\u3002\\n\\n\\u63a5\\u4e0b\\u6765\\u6bcf\\u6b21\\u968f\\u673a\\u9009\\u53d6\\u7684keylru\\u503c\\u5fc5\\u987b\\u5c0f\\u4e8epool\\u4e2d\\u6700\\u5c0f\\u7684lru\\u624d\\u4f1a\\u7ee7\\u7eed\\u653e\\u5165\\uff0c\\u76f4\\u5230\\u5c06pool\\u653e\\u6ee1\\u3002\\n\\n\\u653e\\u6ee1\\u4e4b\\u540e\\uff0c\\u6bcf\\u6b21\\u5982\\u679c\\u6709\\u65b0\\u7684key\\u9700\\u8981\\u653e\\u5165\\uff0c\\u9700\\u8981\\u5c06pool\\u4e2dlru\\u6700\\u5927\\u7684\\u4e00\\u4e2akey\\u53d6\\u51fa\\u3002\\n\\n\\u6dd8\\u6c70\\u7684\\u65f6\\u5019\\uff0c\\u76f4\\u63a5\\u4ecepool\\u4e2d\\u9009\\u53d6\\u4e00\\u4e2alru\\u6700\\u5c0f\\u7684\\u503c\\u7136\\u540e\\u5c06\\u5176\\u6dd8\\u6c70\\u3002\\n\"}]}','white','2020-08-14 16:22:24'),(303,' Redis如何发现热点key','\n1. 凭借经验，进行预估：例如提前知道了某个活动的开启，那么就将此Key作为热点Key。\n2. 服务端收集：在操作redis之前，加入一行代码进行数据统计。\n3. 抓包进行评估：Redis使用TCP协议与客户端进行通信，通信协议采用的是RESP，所以自己写程序监听端口也能进行拦截包进行解析。\n4. 在proxy层，对每一个 redis 请求进行收集上报。\n5. Redis自带命令查询：Redis4.0.4版本提供了redis-cli –hotkeys就能找出热点Key。（如果要用Redis自带命令查询时，要注意需要先把内存逐出策略设置为allkeys-lfu或者volatile-lfu，否则会返回错误。进入Redis中使用config set maxmemory-policy allkeys-lfu即可。）\n','<p><br></p><p>1. 凭借经验，进行预估：例如提前知道了某个活动的开启，那么就将此Key作为热点Key。</p><p>2. 服务端收集：在操作redis之前，加入一行代码进行数据统计。</p><p>3. 抓包进行评估：Redis使用TCP协议与客户端进行通信，通信协议采用的是RESP，所以自己写程序监听端口也能进行拦截包进行解析。</p><p>4. 在proxy层，对每一个 redis 请求进行收集上报。</p><p>5. Redis自带命令查询：Redis4.0.4版本提供了redis-cli –hotkeys就能找出热点Key。（如果要用Redis自带命令查询时，要注意需要先把内存逐出策略设置为allkeys-lfu或者volatile-lfu，否则会返回错误。进入Redis中使用config set maxmemory-policy allkeys-lfu即可。）</p>','{\"ops\": [{\"insert\": \"\\n1. \\u51ed\\u501f\\u7ecf\\u9a8c\\uff0c\\u8fdb\\u884c\\u9884\\u4f30\\uff1a\\u4f8b\\u5982\\u63d0\\u524d\\u77e5\\u9053\\u4e86\\u67d0\\u4e2a\\u6d3b\\u52a8\\u7684\\u5f00\\u542f\\uff0c\\u90a3\\u4e48\\u5c31\\u5c06\\u6b64Key\\u4f5c\\u4e3a\\u70ed\\u70b9Key\\u3002\\n2. \\u670d\\u52a1\\u7aef\\u6536\\u96c6\\uff1a\\u5728\\u64cd\\u4f5credis\\u4e4b\\u524d\\uff0c\\u52a0\\u5165\\u4e00\\u884c\\u4ee3\\u7801\\u8fdb\\u884c\\u6570\\u636e\\u7edf\\u8ba1\\u3002\\n3. \\u6293\\u5305\\u8fdb\\u884c\\u8bc4\\u4f30\\uff1aRedis\\u4f7f\\u7528TCP\\u534f\\u8bae\\u4e0e\\u5ba2\\u6237\\u7aef\\u8fdb\\u884c\\u901a\\u4fe1\\uff0c\\u901a\\u4fe1\\u534f\\u8bae\\u91c7\\u7528\\u7684\\u662fRESP\\uff0c\\u6240\\u4ee5\\u81ea\\u5df1\\u5199\\u7a0b\\u5e8f\\u76d1\\u542c\\u7aef\\u53e3\\u4e5f\\u80fd\\u8fdb\\u884c\\u62e6\\u622a\\u5305\\u8fdb\\u884c\\u89e3\\u6790\\u3002\\n4. \\u5728proxy\\u5c42\\uff0c\\u5bf9\\u6bcf\\u4e00\\u4e2a redis \\u8bf7\\u6c42\\u8fdb\\u884c\\u6536\\u96c6\\u4e0a\\u62a5\\u3002\\n5. Redis\\u81ea\\u5e26\\u547d\\u4ee4\\u67e5\\u8be2\\uff1aRedis4.0.4\\u7248\\u672c\\u63d0\\u4f9b\\u4e86redis-cli \\u2013hotkeys\\u5c31\\u80fd\\u627e\\u51fa\\u70ed\\u70b9Key\\u3002\\uff08\\u5982\\u679c\\u8981\\u7528Redis\\u81ea\\u5e26\\u547d\\u4ee4\\u67e5\\u8be2\\u65f6\\uff0c\\u8981\\u6ce8\\u610f\\u9700\\u8981\\u5148\\u628a\\u5185\\u5b58\\u9010\\u51fa\\u7b56\\u7565\\u8bbe\\u7f6e\\u4e3aallkeys-lfu\\u6216\\u8005volatile-lfu\\uff0c\\u5426\\u5219\\u4f1a\\u8fd4\\u56de\\u9519\\u8bef\\u3002\\u8fdb\\u5165Redis\\u4e2d\\u4f7f\\u7528config set maxmemory-policy allkeys-lfu\\u5373\\u53ef\\u3002\\uff09\\n\"}]}','white','2020-08-14 16:22:42'),(304,'Redis的热点key解决方案','1. 服务端缓存：即将热点数据缓存至服务端的内存中.(利用Redis自带的消息通知机制来保证Redis和服务端热点Key的数据一致性，对于热点Key客户端建立一个监听，当热点Key有更新操作的时候，服务端也随之更新。)\n2. 备份热点Key：即将热点Key+随机数，随机分配至Redis其他节点中。这样访问热点key的时候就不会全部命中到一台机器上了。\n','<p>1. 服务端缓存：即将热点数据缓存至服务端的内存中.(利用Redis自带的消息通知机制来保证Redis和服务端热点Key的数据一致性，对于热点Key客户端建立一个监听，当热点Key有更新操作的时候，服务端也随之更新。)</p><p>2. 备份热点Key：即将热点Key+随机数，随机分配至Redis其他节点中。这样访问热点key的时候就不会全部命中到一台机器上了。</p>','{\"ops\": [{\"insert\": \"1. \\u670d\\u52a1\\u7aef\\u7f13\\u5b58\\uff1a\\u5373\\u5c06\\u70ed\\u70b9\\u6570\\u636e\\u7f13\\u5b58\\u81f3\\u670d\\u52a1\\u7aef\\u7684\\u5185\\u5b58\\u4e2d.(\\u5229\\u7528Redis\\u81ea\\u5e26\\u7684\\u6d88\\u606f\\u901a\\u77e5\\u673a\\u5236\\u6765\\u4fdd\\u8bc1Redis\\u548c\\u670d\\u52a1\\u7aef\\u70ed\\u70b9Key\\u7684\\u6570\\u636e\\u4e00\\u81f4\\u6027\\uff0c\\u5bf9\\u4e8e\\u70ed\\u70b9Key\\u5ba2\\u6237\\u7aef\\u5efa\\u7acb\\u4e00\\u4e2a\\u76d1\\u542c\\uff0c\\u5f53\\u70ed\\u70b9Key\\u6709\\u66f4\\u65b0\\u64cd\\u4f5c\\u7684\\u65f6\\u5019\\uff0c\\u670d\\u52a1\\u7aef\\u4e5f\\u968f\\u4e4b\\u66f4\\u65b0\\u3002)\\n2. \\u5907\\u4efd\\u70ed\\u70b9Key\\uff1a\\u5373\\u5c06\\u70ed\\u70b9Key+\\u968f\\u673a\\u6570\\uff0c\\u968f\\u673a\\u5206\\u914d\\u81f3Redis\\u5176\\u4ed6\\u8282\\u70b9\\u4e2d\\u3002\\u8fd9\\u6837\\u8bbf\\u95ee\\u70ed\\u70b9key\\u7684\\u65f6\\u5019\\u5c31\\u4e0d\\u4f1a\\u5168\\u90e8\\u547d\\u4e2d\\u5230\\u4e00\\u53f0\\u673a\\u5668\\u4e0a\\u4e86\\u3002\\n\"}]}','white','2020-08-14 16:23:01'),(305,'如何解决 Redis 缓存雪崩问题','\n1. 使用 Redis 高可用架构：使用 Redis 集群来保证 Redis 服务不会挂掉\n2. 缓存时间不一致，给缓存的失效时间，加上一个随机值，避免集体失效\n3. 限流降级策略：有一定的备案，比如个性推荐服务不可用了，换成热点数据推荐服务\n','<p><br></p><p>1. 使用 Redis 高可用架构：使用 Redis 集群来保证 Redis 服务不会挂掉</p><p>2. 缓存时间不一致，给缓存的失效时间，加上一个随机值，避免集体失效</p><p>3. 限流降级策略：有一定的备案，比如个性推荐服务不可用了，换成热点数据推荐服务</p>','{\"ops\": [{\"insert\": \"\\n1. \\u4f7f\\u7528 Redis \\u9ad8\\u53ef\\u7528\\u67b6\\u6784\\uff1a\\u4f7f\\u7528 Redis \\u96c6\\u7fa4\\u6765\\u4fdd\\u8bc1 Redis \\u670d\\u52a1\\u4e0d\\u4f1a\\u6302\\u6389\\n2. \\u7f13\\u5b58\\u65f6\\u95f4\\u4e0d\\u4e00\\u81f4\\uff0c\\u7ed9\\u7f13\\u5b58\\u7684\\u5931\\u6548\\u65f6\\u95f4\\uff0c\\u52a0\\u4e0a\\u4e00\\u4e2a\\u968f\\u673a\\u503c\\uff0c\\u907f\\u514d\\u96c6\\u4f53\\u5931\\u6548\\n3. \\u9650\\u6d41\\u964d\\u7ea7\\u7b56\\u7565\\uff1a\\u6709\\u4e00\\u5b9a\\u7684\\u5907\\u6848\\uff0c\\u6bd4\\u5982\\u4e2a\\u6027\\u63a8\\u8350\\u670d\\u52a1\\u4e0d\\u53ef\\u7528\\u4e86\\uff0c\\u6362\\u6210\\u70ed\\u70b9\\u6570\\u636e\\u63a8\\u8350\\u670d\\u52a1\\n\"}]}','white','2020-08-14 16:23:13'),(306,'如何解决 Redis 缓存穿透问题','1. 在接口做校验\n2. 存null值（缓存击穿加锁,或设置不过期）\n3. 布隆过滤器拦截： 将所有可能的查询key 先映射到布隆过滤器中，查询时先判断key是否存在布隆过滤器中，存在才继续向下执行，如果不存在，则直接返回。布隆过滤器将值进行多次哈希bit存储，布隆过滤器说某个元素在，可能会被误判。布隆过滤器说某个元素不在，那么一定不在。\n','<p>1. 在接口做校验</p><p>2. 存null值（缓存击穿加锁,或设置不过期）</p><p>3. 布隆过滤器拦截： 将所有可能的查询key 先映射到布隆过滤器中，查询时先判断key是否存在布隆过滤器中，存在才继续向下执行，如果不存在，则直接返回。布隆过滤器将值进行多次哈希bit存储，布隆过滤器说某个元素在，可能会被误判。布隆过滤器说某个元素不在，那么一定不在。</p>','{\"ops\": [{\"insert\": \"1. \\u5728\\u63a5\\u53e3\\u505a\\u6821\\u9a8c\\n2. \\u5b58null\\u503c\\uff08\\u7f13\\u5b58\\u51fb\\u7a7f\\u52a0\\u9501,\\u6216\\u8bbe\\u7f6e\\u4e0d\\u8fc7\\u671f\\uff09\\n3. \\u5e03\\u9686\\u8fc7\\u6ee4\\u5668\\u62e6\\u622a\\uff1a \\u5c06\\u6240\\u6709\\u53ef\\u80fd\\u7684\\u67e5\\u8be2key \\u5148\\u6620\\u5c04\\u5230\\u5e03\\u9686\\u8fc7\\u6ee4\\u5668\\u4e2d\\uff0c\\u67e5\\u8be2\\u65f6\\u5148\\u5224\\u65adkey\\u662f\\u5426\\u5b58\\u5728\\u5e03\\u9686\\u8fc7\\u6ee4\\u5668\\u4e2d\\uff0c\\u5b58\\u5728\\u624d\\u7ee7\\u7eed\\u5411\\u4e0b\\u6267\\u884c\\uff0c\\u5982\\u679c\\u4e0d\\u5b58\\u5728\\uff0c\\u5219\\u76f4\\u63a5\\u8fd4\\u56de\\u3002\\u5e03\\u9686\\u8fc7\\u6ee4\\u5668\\u5c06\\u503c\\u8fdb\\u884c\\u591a\\u6b21\\u54c8\\u5e0cbit\\u5b58\\u50a8\\uff0c\\u5e03\\u9686\\u8fc7\\u6ee4\\u5668\\u8bf4\\u67d0\\u4e2a\\u5143\\u7d20\\u5728\\uff0c\\u53ef\\u80fd\\u4f1a\\u88ab\\u8bef\\u5224\\u3002\\u5e03\\u9686\\u8fc7\\u6ee4\\u5668\\u8bf4\\u67d0\\u4e2a\\u5143\\u7d20\\u4e0d\\u5728\\uff0c\\u90a3\\u4e48\\u4e00\\u5b9a\\u4e0d\\u5728\\u3002\\n\"}]}','white','2020-08-14 16:23:23'),(307,'Redis的持久化机制','Redis为了保证效率，数据缓存在了内存中，但是会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中，以保证数据的持久化。Redis的持久化策略有两种：\n    1. RDB：快照形式是直接把内存中的数据保存到一个dump的文件中，定时保存，保存策略。\n当Redis需要做持久化时，Redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中。当子进程完成写临时文件后，将原来的RDB替换掉。\n    1. AOF：把所有的对Redis的服务器进行修改的命令都存到一个文件里，命令的集合。\n使用AOF做持久化，每一个写命令都通过write函数追加到appendonly.aof中。aof的默认策略是每秒钟fsync一次，在这种配置下，就算发生故障停机，也最多丢失一秒钟的数据。\n缺点是对于相同的数据集来说，AOF的文件体积通常要大于RDB文件的体积。根据所使用的fsync策略，AOF的速度可能会慢于RDB。\nRedis默认是快照RDB的持久化方式。对于主从同步来说，主从刚刚连接的时候，进行全量同步（RDB）；全同步结束后，进行增量同步(AOF)。\n','<p>Redis为了保证效率，数据缓存在了内存中，但是会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中，以保证数据的持久化。Redis的持久化策略有两种：</p><p>    1. RDB：快照形式是直接把内存中的数据保存到一个dump的文件中，定时保存，保存策略。</p><p>当Redis需要做持久化时，Redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中。当子进程完成写临时文件后，将原来的RDB替换掉。</p><p>    1. AOF：把所有的对Redis的服务器进行修改的命令都存到一个文件里，命令的集合。</p><p>使用AOF做持久化，每一个写命令都通过write函数追加到appendonly.aof中。aof的默认策略是每秒钟fsync一次，在这种配置下，就算发生故障停机，也最多丢失一秒钟的数据。</p><p>缺点是对于相同的数据集来说，AOF的文件体积通常要大于RDB文件的体积。根据所使用的fsync策略，AOF的速度可能会慢于RDB。</p><p>Redis默认是快照RDB的持久化方式。对于主从同步来说，主从刚刚连接的时候，进行全量同步（RDB）；全同步结束后，进行增量同步(AOF)。</p>','{\"ops\": [{\"insert\": \"Redis\\u4e3a\\u4e86\\u4fdd\\u8bc1\\u6548\\u7387\\uff0c\\u6570\\u636e\\u7f13\\u5b58\\u5728\\u4e86\\u5185\\u5b58\\u4e2d\\uff0c\\u4f46\\u662f\\u4f1a\\u5468\\u671f\\u6027\\u7684\\u628a\\u66f4\\u65b0\\u7684\\u6570\\u636e\\u5199\\u5165\\u78c1\\u76d8\\u6216\\u8005\\u628a\\u4fee\\u6539\\u64cd\\u4f5c\\u5199\\u5165\\u8ffd\\u52a0\\u7684\\u8bb0\\u5f55\\u6587\\u4ef6\\u4e2d\\uff0c\\u4ee5\\u4fdd\\u8bc1\\u6570\\u636e\\u7684\\u6301\\u4e45\\u5316\\u3002Redis\\u7684\\u6301\\u4e45\\u5316\\u7b56\\u7565\\u6709\\u4e24\\u79cd\\uff1a\\n    1. RDB\\uff1a\\u5feb\\u7167\\u5f62\\u5f0f\\u662f\\u76f4\\u63a5\\u628a\\u5185\\u5b58\\u4e2d\\u7684\\u6570\\u636e\\u4fdd\\u5b58\\u5230\\u4e00\\u4e2adump\\u7684\\u6587\\u4ef6\\u4e2d\\uff0c\\u5b9a\\u65f6\\u4fdd\\u5b58\\uff0c\\u4fdd\\u5b58\\u7b56\\u7565\\u3002\\n\\u5f53Redis\\u9700\\u8981\\u505a\\u6301\\u4e45\\u5316\\u65f6\\uff0cRedis\\u4f1afork\\u4e00\\u4e2a\\u5b50\\u8fdb\\u7a0b\\uff0c\\u5b50\\u8fdb\\u7a0b\\u5c06\\u6570\\u636e\\u5199\\u5230\\u78c1\\u76d8\\u4e0a\\u4e00\\u4e2a\\u4e34\\u65f6RDB\\u6587\\u4ef6\\u4e2d\\u3002\\u5f53\\u5b50\\u8fdb\\u7a0b\\u5b8c\\u6210\\u5199\\u4e34\\u65f6\\u6587\\u4ef6\\u540e\\uff0c\\u5c06\\u539f\\u6765\\u7684RDB\\u66ff\\u6362\\u6389\\u3002\\n    1. AOF\\uff1a\\u628a\\u6240\\u6709\\u7684\\u5bf9Redis\\u7684\\u670d\\u52a1\\u5668\\u8fdb\\u884c\\u4fee\\u6539\\u7684\\u547d\\u4ee4\\u90fd\\u5b58\\u5230\\u4e00\\u4e2a\\u6587\\u4ef6\\u91cc\\uff0c\\u547d\\u4ee4\\u7684\\u96c6\\u5408\\u3002\\n\\u4f7f\\u7528AOF\\u505a\\u6301\\u4e45\\u5316\\uff0c\\u6bcf\\u4e00\\u4e2a\\u5199\\u547d\\u4ee4\\u90fd\\u901a\\u8fc7write\\u51fd\\u6570\\u8ffd\\u52a0\\u5230appendonly.aof\\u4e2d\\u3002aof\\u7684\\u9ed8\\u8ba4\\u7b56\\u7565\\u662f\\u6bcf\\u79d2\\u949ffsync\\u4e00\\u6b21\\uff0c\\u5728\\u8fd9\\u79cd\\u914d\\u7f6e\\u4e0b\\uff0c\\u5c31\\u7b97\\u53d1\\u751f\\u6545\\u969c\\u505c\\u673a\\uff0c\\u4e5f\\u6700\\u591a\\u4e22\\u5931\\u4e00\\u79d2\\u949f\\u7684\\u6570\\u636e\\u3002\\n\\u7f3a\\u70b9\\u662f\\u5bf9\\u4e8e\\u76f8\\u540c\\u7684\\u6570\\u636e\\u96c6\\u6765\\u8bf4\\uff0cAOF\\u7684\\u6587\\u4ef6\\u4f53\\u79ef\\u901a\\u5e38\\u8981\\u5927\\u4e8eRDB\\u6587\\u4ef6\\u7684\\u4f53\\u79ef\\u3002\\u6839\\u636e\\u6240\\u4f7f\\u7528\\u7684fsync\\u7b56\\u7565\\uff0cAOF\\u7684\\u901f\\u5ea6\\u53ef\\u80fd\\u4f1a\\u6162\\u4e8eRDB\\u3002\\nRedis\\u9ed8\\u8ba4\\u662f\\u5feb\\u7167RDB\\u7684\\u6301\\u4e45\\u5316\\u65b9\\u5f0f\\u3002\\u5bf9\\u4e8e\\u4e3b\\u4ece\\u540c\\u6b65\\u6765\\u8bf4\\uff0c\\u4e3b\\u4ece\\u521a\\u521a\\u8fde\\u63a5\\u7684\\u65f6\\u5019\\uff0c\\u8fdb\\u884c\\u5168\\u91cf\\u540c\\u6b65\\uff08RDB\\uff09\\uff1b\\u5168\\u540c\\u6b65\\u7ed3\\u675f\\u540e\\uff0c\\u8fdb\\u884c\\u589e\\u91cf\\u540c\\u6b65(AOF)\\u3002\\n\"}]}','white','2020-08-14 16:23:35'),(308,'Redis和memcached的区别','1. 存储方式上：memcache会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。redis有部分数据存在硬盘上，这样能保证数据的持久性。\n2. 数据支持类型上：memcache对数据类型的支持简单，只支持简单的key-value，，而redis支持五种数据类型。\n3. 用底层模型不同：它们之间底层实现方式以及与客户端之间通信的应用协议不一样。redis直接自己构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。\n4. value的大小：redis可以达到1GB，而memcache只有1MB。\n','<p>1. 存储方式上：memcache会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。redis有部分数据存在硬盘上，这样能保证数据的持久性。</p><p>2. 数据支持类型上：memcache对数据类型的支持简单，只支持简单的key-value，，而redis支持五种数据类型。</p><p>3. 用底层模型不同：它们之间底层实现方式以及与客户端之间通信的应用协议不一样。redis直接自己构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</p><p>4. value的大小：redis可以达到1GB，而memcache只有1MB。</p>','{\"ops\": [{\"insert\": \"1. \\u5b58\\u50a8\\u65b9\\u5f0f\\u4e0a\\uff1amemcache\\u4f1a\\u628a\\u6570\\u636e\\u5168\\u90e8\\u5b58\\u5728\\u5185\\u5b58\\u4e4b\\u4e2d\\uff0c\\u65ad\\u7535\\u540e\\u4f1a\\u6302\\u6389\\uff0c\\u6570\\u636e\\u4e0d\\u80fd\\u8d85\\u8fc7\\u5185\\u5b58\\u5927\\u5c0f\\u3002redis\\u6709\\u90e8\\u5206\\u6570\\u636e\\u5b58\\u5728\\u786c\\u76d8\\u4e0a\\uff0c\\u8fd9\\u6837\\u80fd\\u4fdd\\u8bc1\\u6570\\u636e\\u7684\\u6301\\u4e45\\u6027\\u3002\\n2. \\u6570\\u636e\\u652f\\u6301\\u7c7b\\u578b\\u4e0a\\uff1amemcache\\u5bf9\\u6570\\u636e\\u7c7b\\u578b\\u7684\\u652f\\u6301\\u7b80\\u5355\\uff0c\\u53ea\\u652f\\u6301\\u7b80\\u5355\\u7684key-value\\uff0c\\uff0c\\u800credis\\u652f\\u6301\\u4e94\\u79cd\\u6570\\u636e\\u7c7b\\u578b\\u3002\\n3. \\u7528\\u5e95\\u5c42\\u6a21\\u578b\\u4e0d\\u540c\\uff1a\\u5b83\\u4eec\\u4e4b\\u95f4\\u5e95\\u5c42\\u5b9e\\u73b0\\u65b9\\u5f0f\\u4ee5\\u53ca\\u4e0e\\u5ba2\\u6237\\u7aef\\u4e4b\\u95f4\\u901a\\u4fe1\\u7684\\u5e94\\u7528\\u534f\\u8bae\\u4e0d\\u4e00\\u6837\\u3002redis\\u76f4\\u63a5\\u81ea\\u5df1\\u6784\\u5efa\\u4e86VM\\u673a\\u5236\\uff0c\\u56e0\\u4e3a\\u4e00\\u822c\\u7684\\u7cfb\\u7edf\\u8c03\\u7528\\u7cfb\\u7edf\\u51fd\\u6570\\u7684\\u8bdd\\uff0c\\u4f1a\\u6d6a\\u8d39\\u4e00\\u5b9a\\u7684\\u65f6\\u95f4\\u53bb\\u79fb\\u52a8\\u548c\\u8bf7\\u6c42\\u3002\\n4. value\\u7684\\u5927\\u5c0f\\uff1aredis\\u53ef\\u4ee5\\u8fbe\\u52301GB\\uff0c\\u800cmemcache\\u53ea\\u67091MB\\u3002\\n\"}]}','white','2020-08-14 16:23:53'),(309,'Redis并发竞争key的解决方案','1. 分布式锁+时间戳\n2. 利用消息队列\n','<p>1. 分布式锁+时间戳</p><p>2. 利用消息队列</p>','{\"ops\": [{\"insert\": \"1. \\u5206\\u5e03\\u5f0f\\u9501+\\u65f6\\u95f4\\u6233\\n2. \\u5229\\u7528\\u6d88\\u606f\\u961f\\u5217\\n\"}]}','white','2020-08-14 16:24:02'),(310,'Redis与Mysql双写一致性方案','先更新数据库，再删缓存。\n数据库的读操作的速度远快于写操作的，所以脏数据很难出现。\n可以对异步延时删除策略，保证读请求完成以后，再进行删除操作。\n\n','<p>先更新数据库，再删缓存。</p><p>数据库的读操作的速度远快于写操作的，所以脏数据很难出现。</p><p>可以对异步延时删除策略，保证读请求完成以后，再进行删除操作。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u5148\\u66f4\\u65b0\\u6570\\u636e\\u5e93\\uff0c\\u518d\\u5220\\u7f13\\u5b58\\u3002\\n\\u6570\\u636e\\u5e93\\u7684\\u8bfb\\u64cd\\u4f5c\\u7684\\u901f\\u5ea6\\u8fdc\\u5feb\\u4e8e\\u5199\\u64cd\\u4f5c\\u7684\\uff0c\\u6240\\u4ee5\\u810f\\u6570\\u636e\\u5f88\\u96be\\u51fa\\u73b0\\u3002\\n\\u53ef\\u4ee5\\u5bf9\\u5f02\\u6b65\\u5ef6\\u65f6\\u5220\\u9664\\u7b56\\u7565\\uff0c\\u4fdd\\u8bc1\\u8bfb\\u8bf7\\u6c42\\u5b8c\\u6210\\u4ee5\\u540e\\uff0c\\u518d\\u8fdb\\u884c\\u5220\\u9664\\u64cd\\u4f5c\\u3002\\n\\n\"}]}','white','2020-08-14 16:24:37'),(311,'Redis的管道pipeline','对于单线程阻塞式的Redis，Pipeline可以满足批量的操作，把多个命令连续的发送给Redis Server，然后一一解析响应结果。\n\nPipelining可以提高批量处理性能，提升的原因主要是TCP连接中减少了“交互往返”的时间。\n\npipeline 底层是通过把所有的操作封装成流，redis有定义自己的出入输出流。\n\n在 sync() 方法执行操作，每次请求放在队列里面，解析响应包。\n\n','<p>对于单线程阻塞式的Redis，Pipeline可以满足批量的操作，把多个命令连续的发送给Redis Server，然后一一解析响应结果。</p><p><br></p><p>Pipelining可以提高批量处理性能，提升的原因主要是TCP连接中减少了“交互往返”的时间。</p><p><br></p><p>pipeline 底层是通过把所有的操作封装成流，redis有定义自己的出入输出流。</p><p><br></p><p>在 sync() 方法执行操作，每次请求放在队列里面，解析响应包。</p><p><br></p>','{\"ops\": [{\"insert\": \"\\u5bf9\\u4e8e\\u5355\\u7ebf\\u7a0b\\u963b\\u585e\\u5f0f\\u7684Redis\\uff0cPipeline\\u53ef\\u4ee5\\u6ee1\\u8db3\\u6279\\u91cf\\u7684\\u64cd\\u4f5c\\uff0c\\u628a\\u591a\\u4e2a\\u547d\\u4ee4\\u8fde\\u7eed\\u7684\\u53d1\\u9001\\u7ed9Redis Server\\uff0c\\u7136\\u540e\\u4e00\\u4e00\\u89e3\\u6790\\u54cd\\u5e94\\u7ed3\\u679c\\u3002\\n\\nPipelining\\u53ef\\u4ee5\\u63d0\\u9ad8\\u6279\\u91cf\\u5904\\u7406\\u6027\\u80fd\\uff0c\\u63d0\\u5347\\u7684\\u539f\\u56e0\\u4e3b\\u8981\\u662fTCP\\u8fde\\u63a5\\u4e2d\\u51cf\\u5c11\\u4e86\\u201c\\u4ea4\\u4e92\\u5f80\\u8fd4\\u201d\\u7684\\u65f6\\u95f4\\u3002\\n\\npipeline \\u5e95\\u5c42\\u662f\\u901a\\u8fc7\\u628a\\u6240\\u6709\\u7684\\u64cd\\u4f5c\\u5c01\\u88c5\\u6210\\u6d41\\uff0credis\\u6709\\u5b9a\\u4e49\\u81ea\\u5df1\\u7684\\u51fa\\u5165\\u8f93\\u51fa\\u6d41\\u3002\\n\\n\\u5728 sync() \\u65b9\\u6cd5\\u6267\\u884c\\u64cd\\u4f5c\\uff0c\\u6bcf\\u6b21\\u8bf7\\u6c42\\u653e\\u5728\\u961f\\u5217\\u91cc\\u9762\\uff0c\\u89e3\\u6790\\u54cd\\u5e94\\u5305\\u3002\\n\\n\"}]}','white','2020-08-14 16:25:12');
/*!40000 ALTER TABLE `card` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `message`
--

DROP TABLE IF EXISTS `message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `connect` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `ix_message_create_time` (`create_time`),
  CONSTRAINT `message_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `message`
--

LOCK TABLES `message` WRITE;
/*!40000 ALTER TABLE `message` DISABLE KEYS */;
/*!40000 ALTER TABLE `message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `photo`
--

DROP TABLE IF EXISTS `photo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `photo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `ix_photo_create_time` (`create_time`),
  CONSTRAINT `photo_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `photo`
--

LOCK TABLES `photo` WRITE;
/*!40000 ALTER TABLE `photo` DISABLE KEYS */;
INSERT INTO `photo` VALUES (1,'https://cdn.jamkung.com/card/user/1/202008/12/134957_51.jpg','2020-08-12 13:49:58',1),(2,'https://cdn.jamkung.com/card/user/1/202008/12/134958_50.jpg','2020-08-12 13:49:59',1),(3,'https://cdn.jamkung.com/card/user/1/202008/12/134958_95.jpg','2020-08-12 13:50:00',1),(4,'https://cdn.jamkung.com/card/user/1/202008/12/134959_81.jpg','2020-08-12 13:50:00',1),(24,'https://cdn.jamkung.com/card/user/1/202011/05/232315_97.jpg','2020-11-05 23:23:17',1),(25,'https://cdn.jamkung.com/card/user/1/202011/05/232314_49.jpg','2020-11-05 23:23:17',1),(26,'https://cdn.jamkung.com/card/user/1/202011/05/232316_77.jpg','2020-11-05 23:23:18',1),(27,'https://cdn.jamkung.com/card/user/1/202011/05/232316_61.jpg','2020-11-05 23:23:18',1);
/*!40000 ALTER TABLE `photo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL,
  `phone` varchar(11) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `avatar` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(16) COLLATE utf8mb4_unicode_ci NOT NULL,
  `is_active` tinyint(1) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  KEY `ix_user_create_time` (`create_time`)
) ENGINE=InnoDB AUTO_INCREMENT=209 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'ou4xL5KFJEQk7q3PsSBXijykiE2Q','12332112321','avatar_url','ou4xL5',1,'2020-08-12 11:39:07');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_openid`
--

DROP TABLE IF EXISTS `user_openid`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_openid` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `openid` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL,
  `avatar` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `openid` (`openid`),
  KEY `user_id` (`user_id`),
  KEY `ix_user_openid_create_time` (`create_time`),
  CONSTRAINT `user_openid_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=209 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_openid`
--

LOCK TABLES `user_openid` WRITE;
/*!40000 ALTER TABLE `user_openid` DISABLE KEYS */;
INSERT INTO `user_openid` VALUES (1,'ou4xL5KFJEQk7q3PsSBXijykiE2Q','avatar_url','2020-08-12 11:39:07',1);
/*!40000 ALTER TABLE `user_openid` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-11-18  1:39:23
